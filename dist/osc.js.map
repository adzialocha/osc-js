{"version":3,"file":"osc.js","sources":["../src/common/utils.js","../src/common/helpers.js","../src/atomic.js","../src/atomic/int32.js","../src/atomic/float32.js","../src/atomic/string.js","../src/atomic/blob.js","../src/message.js","../src/atomic/timetag.js","../src/bundle.js","../src/packet.js","../src/events.js","../src/plugin/dgram.js","../src/plugin/bridge.js","../src/plugin/wsclient.js","../src/plugin/wsserver.js","../src/osc.js"],"sourcesContent":["/**\n * Check if given object is an integer number\n * @param {*} n\n * @return {boolean}\n */\nexport function isInt(n) {\n  return Number(n) === n && n % 1 === 0\n}\n\n/**\n * Check if given object is a float number\n * @param {*} n\n * @return {boolean}\n */\nexport function isFloat(n) {\n  return Number(n) === n && n % 1 !== 0\n}\n\n/**\n * Check if given object is a string\n * @param {*} n\n * @return {boolean}\n */\nexport function isString(n) {\n  return typeof n === 'string'\n}\n\n/**\n * Check if given object is an array\n * @param {*} n\n * @return {boolean}\n */\nexport function isArray(n) {\n  return Object.prototype.toString.call(n) === '[object Array]'\n}\n\n/**\n * Check if given object is an object\n * @param {*} n\n * @return {boolean}\n */\nexport function isObject(n) {\n  return Object.prototype.toString.call(n) === '[object Object]'\n}\n\n/**\n * Check if given object is a function\n * @param {*} n\n * @return {boolean}\n */\nexport function isFunction(n) {\n  return typeof n === 'function'\n}\n\n/**\n * Check if given object is a Uint8Array\n * @param {*} n\n * @return {boolean}\n */\nexport function isBlob(n) {\n  return n instanceof Uint8Array\n}\n\n/**\n * Check if given object is a Date\n * @param {*} n\n * @return {boolean}\n */\nexport function isDate(n) {\n  return n instanceof Date\n}\n\n/**\n * Check if given object is undefined\n * @param {*} n\n * @return {boolean}\n */\nexport function isUndefined(n) {\n  return typeof n === 'undefined'\n}\n\n/**\n * Return the next multiple of four\n * @param {number} n\n */\nexport function pad(n) {\n  return (n + 3) & ~0x03\n}\n\n/**\n * Wrap binary data in DataView\n * @param {*} obj\n * @return {DataView}\n */\nexport function dataView(obj) {\n  if (obj.buffer) {\n    return new DataView(obj.buffer)\n  } else if (obj instanceof ArrayBuffer) {\n    return new DataView(obj)\n  }\n\n  return new DataView(new Uint8Array(obj))\n}\n","import { isArray, isInt, isFloat, isString, isBlob } from './utils'\n\n/**\n * Checks type of given object and returns the regarding OSC\n * Type tag character\n * @param {*} item Any object\n * @return {string} OSC Type tag character\n */\nexport function typeTag(item) {\n  if (isInt(item)) {\n    return 'i'\n  } else if (isFloat(item)) {\n    return 'f'\n  } else if (isString(item)) {\n    return 's'\n  } else if (isBlob(item)) {\n    return 'b'\n  }\n\n  throw new Error('OSC typeTag() found unknown value type')\n}\n\n/**\n * Sanitizes an OSC-ready Address Pattern\n * @param {array|string} obj Address as string or array of strings\n * @return {string} Corrected address string\n *\n * @example\n * // all calls return '/test/path' string:\n * prepareAddress('test/path')\n * prepareAddress('/test/path/')\n * prepareAddress([test, path])\n */\nexport function prepareAddress(obj) {\n  let address = ''\n\n  if (isArray(obj)) {\n    return `/${obj.join('/')}`\n  } else if (isString(obj)) {\n    address = obj\n\n    // remove slash at ending of address\n    if (address.length > 1 && address[address.length - 1] === '/') {\n      address = address.slice(0, address.length - 1)\n    }\n\n    // add slash at beginning of address\n    if (address.length > 1 && address[0] !== '/') {\n      address = `/${address}`\n    }\n\n    return address\n  }\n\n  throw new Error('OSC prepareAddress() needs addresses of type array or string')\n}\n\n/**\n * Make an OSC address pattern javascript-regex-ready\n * @param {string} str OSC address pattern\n * @return {string} Javascript RegEx string\n */\nexport function prepareRegExPattern(str) {\n  let pattern\n\n  if (!(isString(str))) {\n    throw new Error('OSC prepareRegExPattern() needs strings')\n  }\n\n  pattern = str.replace(/\\./g, '\\\\.')\n  pattern = pattern.replace(/\\(/g, '\\\\(')\n  pattern = pattern.replace(/\\)/g, '\\\\)')\n\n  pattern = pattern.replace(/\\{/g, '(')\n  pattern = pattern.replace(/\\}/g, ')')\n  pattern = pattern.replace(/,/g, '|')\n\n  pattern = pattern.replace(/\\[!/g, '[^')\n\n  pattern = pattern.replace(/\\?/g, '.')\n  pattern = pattern.replace(/\\*/g, '.*')\n\n  return pattern\n}\n\n/**\n * Holds a list of items and helps to merge them\n * into a single array of packed binary data\n */\nexport default class EncodeHelper {\n  /**\n   * Create a new EncodeHelper instance\n   */\n  constructor() {\n    /** @type {array} data */\n    this.data = []\n    /** @type {number} byteLength */\n    this.byteLength = 0\n  }\n\n  /**\n   * Packs an item and adds it to the list\n   * @param {*} item Any object\n   * @return {EncodeHelper}\n   */\n  add(item) {\n    const buffer = item.pack()\n    this.byteLength += buffer.byteLength\n    this.data.push(buffer)\n\n    return this\n  }\n\n  /**\n   * Merge all added items into one Uint8Array\n   * @return {Uint8Array} Merged binary data array of all items\n   */\n  merge() {\n    const result = new Uint8Array(this.byteLength)\n    let offset = 0\n\n    this.data.forEach((data) => {\n      result.set(data, offset)\n      offset += data.byteLength\n    })\n\n    return result\n  }\n}\n","import { isUndefined } from './common/utils'\n\n/**\n * Base class for OSC Atomic Data Types\n */\nexport default class Atomic {\n  /**\n   * Create an Atomic instance\n   * @param {*} [value] Initial value of any type\n   */\n  constructor(value) {\n    /** @type {*} value */\n    this.value = value\n    /** @type {number} offset */\n    this.offset = 0\n  }\n\n  /**\n   * Interpret the given value of this entity as packed binary data\n   * @param {string} method The DataView method to write to the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @return {Uint8Array} Packed binary data\n   */\n  pack(method, byteLength) {\n    if (!(method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be packed without given method or byteLength')\n    }\n\n    const data = new Uint8Array(byteLength)\n    const dataView = new DataView(data.buffer)\n\n    if (isUndefined(this.value)) {\n      throw new Error('OSC Atomic cant\\'t be encoded with empty value')\n    }\n\n    // use DataView to write to ArrayBuffer\n    dataView[method](this.offset, this.value, false)\n\n    // always return binary Uint8Array after packing\n    return data\n  }\n\n /**\n   * Unpack binary data from DataView according to the given format\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {string} method The DataView method to read the format from the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, method, byteLength, initialOffset = 0) {\n    if (!(dataView && method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be unpacked without given dataView, method or byteLength')\n    }\n\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Atomic expects an instance of type DataView')\n    }\n\n    // use DataView to read from ArrayBuffer and add offset\n    this.value = dataView[method](initialOffset, false)\n    this.offset = initialOffset + byteLength\n\n    // always return offset number after unpacking\n    return this.offset\n  }\n}\n","import { isInt } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian two's complement integer OSC Atomic Data Type\n */\nexport default class AtomicInt32 extends Atomic {\n  /**\n   * Create an AtomicInt32 instance\n   * @param {number} [value] Initial integer value\n   */\n  constructor(value) {\n    if (value && !isInt(value)) {\n      throw new Error('OSC AtomicInt32 constructor expects value of type number')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setInt32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Int32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getInt32', 4, initialOffset)\n  }\n}\n","import { isFloat } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian IEEE 754 floating point number OSC Atomic Data Type\n */\nexport default class AtomicFloat32 extends Atomic {\n  /**\n   * Create an AtomicFloat32 instance\n   * @param {number} [value] Float number\n   */\n  constructor(value) {\n    if (value && !isFloat(value)) {\n      throw new Error('OSC AtomicFloat32 constructor expects value of type float')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setFloat32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Float32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getFloat32', 4, initialOffset)\n  }\n}\n","import { pad, isString, isUndefined } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * A sequence of non-null ASCII characters OSC Atomic Data Type\n */\nexport default class AtomicString extends Atomic {\n  /**\n   * Create an AtomicString instance\n   * @param {string} [value] Initial string value\n   */\n  constructor(value) {\n    if (value && !isString(value)) {\n      throw new Error('OSC AtomicString constructor expects value of type string')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given string as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicString can not be encoded with empty value')\n    }\n\n    // add 0-3 null characters for total number of bits a multiple of 32\n    const terminated = `${this.value}\\u0000`\n    const byteLength = pad(terminated.length)\n\n    const buffer = new Uint8Array(byteLength)\n\n    for (let i = 0; i < terminated.length; i += 1) {\n      buffer[i] = terminated.charCodeAt(i)\n    }\n\n    return buffer\n  }\n\n  /**\n   * Unpack binary data from DataView and read a string\n   * @param {DataView} dataView The DataView holding the binary representation of the string\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicString expects an instance of type DataView')\n    }\n\n    let offset = initialOffset\n    let charcode\n    const data = []\n\n    for (; offset < dataView.byteLength; offset += 1) {\n      charcode = dataView.getUint8(offset)\n\n      // check for terminating null character\n      if (charcode !== 0) {\n        data.push(charcode)\n      } else {\n        offset += 1\n        break\n      }\n    }\n\n    if (offset === dataView.length) {\n      throw new Error('OSC AtomicString found a malformed OSC string')\n    }\n\n    /** @type {number} offset */\n    this.offset = pad(offset)\n    /** @type {string} value */\n    this.value = new TextDecoder(\"utf-8\").decode(new Uint8Array(data));\n\n    return this.offset\n  }\n}\n","import { pad, isBlob, isUndefined } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 8-bit bytes of arbitrary binary data OSC Atomic Data Type\n */\nexport default class AtomicBlob extends Atomic {\n  /**\n   * Create an AtomicBlob instance\n   * @param {Uint8Array} [value] Binary data\n   */\n  constructor(value) {\n    if (value && !isBlob(value)) {\n      throw new Error('OSC AtomicBlob constructor expects value of type Uint8Array')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given blob as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicBlob can not be encoded with empty value')\n    }\n\n    const byteLength = pad(this.value.byteLength)\n    const data = new Uint8Array(byteLength + 4)\n    const dataView = new DataView(data.buffer)\n\n    // an int32 size count\n    dataView.setInt32(0, this.value.byteLength, false)\n    // followed by 8-bit bytes of arbitrary binary data\n    data.set(this.value, 4)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a blob\n   * @param {DataView} dataView The DataView holding the binary representation of the blob\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicBlob expects an instance of type DataView')\n    }\n\n    const byteLength = dataView.getInt32(initialOffset, false)\n\n    /** @type {Uint8Array} value */\n    this.value = new Uint8Array(dataView.buffer, initialOffset + 4, byteLength)\n    /** @type {number} offset */\n    this.offset = pad(initialOffset + 4 + byteLength)\n\n    return this.offset\n  }\n}\n","import { isString, isArray, isInt, isFloat, isBlob } from './common/utils'\nimport Helper, { typeTag, prepareAddress } from './common/helpers'\n\nimport AtomicInt32 from './atomic/int32'\nimport AtomicFloat32 from './atomic/float32'\nimport AtomicString from './atomic/string'\nimport AtomicBlob from './atomic/blob'\n\n/**\n * An OSC message consists of an OSC Address Pattern followed\n * by an OSC Type Tag String followed by zero or more OSC Arguments\n */\nexport default class Message {\n  /**\n   * Create a Message instance\n   * @param {array|string} args Address\n   * @param {...*} args OSC Atomic Data Types\n   *\n   * @example\n   * const message = new Message(['test', 'path'], 50, 100.52, 'test')\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   */\n  constructor(...args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {string} address */\n    this.address = ''\n    /** @type {string} types */\n    this.types = ''\n    /** @type {array} args */\n    this.args = []\n\n    if (args.length > 0) {\n      if (!(isString(args[0]) || isArray(args[0]))) {\n        throw new Error('OSC Message constructor first argument (address) must be a string or array')\n      }\n\n      this.address = prepareAddress(args.shift())\n      this.types = args.map(item => typeTag(item)).join('')\n      this.args = args\n    }\n  }\n\n  /**\n   * Add an OSC Atomic Data Type to the list of elements\n   * @param {*} item\n   */\n  add(item) {\n    if (!item) {\n      throw new Error('OSC Message needs a valid OSC Atomic Data Type')\n    }\n\n    this.args.push(item)\n    this.types += typeTag(item)\n  }\n\n  /**\n   * Interpret the Message as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (this.address.length === 0 || this.address[0] !== '/') {\n      throw new Error('OSC Message has an invalid address')\n    }\n\n    const encoder = new Helper()\n\n    // OSC Address Pattern and Type string\n    encoder.add(new AtomicString(this.address))\n    encoder.add(new AtomicString(`,${this.types}`))\n\n    // followed by zero or more OSC Arguments\n    if (this.args.length > 0) {\n      let argument\n\n      this.args.forEach((value) => {\n        if (isInt(value)) {\n          argument = new AtomicInt32(value)\n        } else if (isFloat(value)) {\n          argument = new AtomicFloat32(value)\n        } else if (isString(value)) {\n          argument = new AtomicString(value)\n        } else if (isBlob(value)) {\n          argument = new AtomicBlob(value)\n        } else {\n          throw new Error('OSC Message found unknown argument type')\n        }\n\n        encoder.add(argument)\n      })\n    }\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Message\n   * @param {DataView} dataView The DataView holding the binary representation of a Message\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Message expects an instance of type DataView.')\n    }\n\n    // read address pattern\n    const address = new AtomicString()\n    address.unpack(dataView, initialOffset)\n\n    // read type string\n    const types = new AtomicString()\n    types.unpack(dataView, address.offset)\n\n    if (address.value.length === 0 || address.value[0] !== '/') {\n      throw new Error('OSC Message found malformed or missing address string')\n    }\n\n    if (types.value.length === 0 && types.value[0] !== ',') {\n      throw new Error('OSC Message found malformed or missing type string')\n    }\n\n    let offset = types.offset\n    let next\n    let type\n\n    const args = []\n\n    // read message arguments (OSC Atomic Data Types)\n    for (let i = 1; i < types.value.length; i += 1) {\n      type = types.value[i]\n\n      if (type === 'i') {\n        next = new AtomicInt32()\n      } else if (type === 'f') {\n        next = new AtomicFloat32()\n      } else if (type === 's') {\n        next = new AtomicString()\n      } else if (type === 'b') {\n        next = new AtomicBlob()\n      } else {\n        throw new Error('OSC Message found non-standard argument type')\n      }\n\n      offset = next.unpack(dataView, offset)\n      args.push(next.value)\n    }\n\n    this.offset = offset\n    this.address = address.value\n    this.types = types.value\n    this.args = args\n\n    return this.offset\n  }\n}\n","import { isInt, isDate, isUndefined } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/** 70 years in seconds */\nexport const SECONDS_70_YEARS = 2208988800\n/** 2^32 */\nexport const TWO_POWER_32 = 4294967296\n\n/**\n * Timetag helper class for representing NTP timestamps\n * and conversion between them and javascript representation\n */\nexport class Timetag {\n  /**\n   * Create a Timetag instance\n   * @param {number} [seconds=0] Initial NTP *seconds* value\n   * @param {number} [fractions=0] Initial NTP *fractions* value\n   */\n  constructor(seconds = 0, fractions = 0) {\n    if (!(isInt(seconds) && isInt(fractions))) {\n      throw new Error('OSC Timetag constructor expects values of type integer number')\n    }\n\n    /** @type {number} seconds */\n    this.seconds = seconds\n    /** @type {number} fractions */\n    this.fractions = fractions\n  }\n\n  /**\n   * Converts from NTP to JS representation and back\n   * @param {number} [milliseconds] Converts from JS milliseconds to NTP.\n   * Leave empty for converting from NTP to JavaScript representation\n   * @return {number} Javascript timestamp\n   */\n  timestamp(milliseconds) {\n    let seconds\n\n    if (typeof milliseconds === 'number') {\n      seconds = milliseconds / 1000\n      const rounded = Math.floor(seconds)\n\n      this.seconds = rounded + SECONDS_70_YEARS\n      this.fractions = Math.round(TWO_POWER_32 * (seconds - rounded))\n\n      return milliseconds\n    }\n\n    seconds = this.seconds - SECONDS_70_YEARS\n    return (seconds + (this.fractions / TWO_POWER_32)) * 1000\n  }\n}\n\n/**\n * 64-bit big-endian fixed-point time tag, semantics\n * defined below OSC Atomic Data Type\n */\nexport default class AtomicTimetag extends Atomic {\n  /**\n   * Create a AtomicTimetag instance\n   * @param {number|Timetag|Date} [value] Initial date, leave empty if\n   * you want it to be the current date\n   */\n  constructor(value = Date.now()) {\n    let timetag = new Timetag()\n\n    if (value instanceof Timetag) {\n      timetag = value\n    } else if (isInt(value)) {\n      timetag.timestamp(value)\n    } else if (isDate(value)) {\n      timetag.timestamp(value.getTime())\n    }\n\n    super(timetag)\n  }\n\n  /**\n   * Interpret the given timetag as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicTimetag can not be encoded with empty value')\n    }\n\n    const { seconds, fractions } = this.value\n    const data = new Uint8Array(8)\n    const dataView = new DataView(data.buffer)\n\n    dataView.setInt32(0, seconds, false)\n    dataView.setInt32(4, fractions, false)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a timetag\n   * @param {DataView} dataView The DataView holding the binary representation of the timetag\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicTimetag expects an instance of type DataView')\n    }\n\n    const seconds = dataView.getUint32(initialOffset, false)\n    const fractions = dataView.getUint32(initialOffset + 4, false)\n\n    /** @type {Timetag} value */\n    this.value = new Timetag(seconds, fractions)\n    /** @type {number} offset */\n    this.offset = initialOffset + 8\n\n    return this.offset\n  }\n}\n","import { isArray, isInt } from './common/utils'\nimport EncodeHelper from './common/helpers'\n\nimport Packet from './packet'\nimport Message from './message'\nimport AtomicString from './atomic/string'\nimport AtomicInt32 from './atomic/int32'\nimport AtomicTimetag from './atomic/timetag'\n\n/** OSC Bundle string */\nexport const BUNDLE_TAG = '#bundle'\n\n/**\n * An OSC Bundle consist of a Timetag and one or many Bundle Elements.\n * The elements are either OSC Messages or more OSC Bundles\n */\nexport default class Bundle {\n  /**\n   * Create a Bundle instance\n   * @param {...*} [args] Timetag and elements. See examples for options\n   *\n   * @example\n   * const bundle = new Bundle(new Date() + 500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherBundle = new Bundle([message], Date.now() + 1500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherMessage = new Message('/test/message', 'test', 12)\n   * const anotherBundle = new Bundle(message, anotherMessage)\n   */\n  constructor(...args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {AtomicTimetag} timetag */\n    this.timetag = new AtomicTimetag()\n    /** @type {array} bundleElements */\n    this.bundleElements = []\n\n    if (args.length > 0) {\n      // first argument is an Date or js timestamp (number)\n      if (args[0] instanceof Date || isInt(args[0])) {\n        this.timetag = new AtomicTimetag(args[0])\n      } else if (isArray(args[0])) {\n        // first argument is an Array of Bundle elements\n        args[0].forEach((item) => {\n          this.add(item)\n        })\n\n        // second argument is an Date or js timestamp (number)\n        if (args.length > 1 && (args[1] instanceof Date || isInt(args[0]))) {\n          this.timetag = new AtomicTimetag(args[1])\n        }\n      } else {\n        // take all arguments as Bundle elements\n        args.forEach((item) => {\n          this.add(item)\n        })\n      }\n    }\n  }\n\n  /**\n   * Take a JavaScript timestamp to set the Bundle's timetag\n   * @param {number} ms JS timestamp in milliseconds\n   *\n   * @example\n   * const bundle = new Bundle()\n   * bundle.timestamp(Date.now() + 5000) // in 5 seconds\n   */\n  timestamp(ms) {\n    if (!isInt(ms)) {\n      throw new Error('OSC Bundle needs an integer for setting the timestamp')\n    }\n\n    this.timetag = new AtomicTimetag(ms)\n  }\n\n  /**\n   * Add a Message or Bundle to the list of elements\n   * @param {Bundle|Message} item\n   */\n  add(item) {\n    if (!(item instanceof Message || item instanceof Bundle)) {\n      throw new Error('OSC Bundle contains only Messages and Bundles')\n    }\n\n    this.bundleElements.push(item)\n  }\n\n  /**\n   * Interpret the Bundle as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    const encoder = new EncodeHelper()\n\n    // an OSC Bundle consists of the OSC-string \"#bundle\"\n    encoder.add(new AtomicString(BUNDLE_TAG))\n\n    // followed by an OSC Time Tag\n    if (!this.timetag) {\n      this.timetag = new AtomicTimetag()\n    }\n\n    encoder.add(this.timetag)\n\n    // followed by zero or more OSC Bundle Elements\n    this.bundleElements.forEach((item) => {\n      encoder.add(new AtomicInt32(item.pack().byteLength))\n      encoder.add(item)\n    })\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Bundle\n   * @param {DataView} dataView The DataView holding the binary representation of a Bundle\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Bundle expects an instance of type DataView')\n    }\n\n    // read the beginning bundle string\n    const head = new AtomicString()\n    head.unpack(dataView, initialOffset)\n\n    if (head.value !== BUNDLE_TAG) {\n      throw new Error('OSC Bundle does not contain a valid #bundle head')\n    }\n\n    // read the timetag\n    const timetag = new AtomicTimetag()\n    let offset = timetag.unpack(dataView, head.offset)\n\n    // read the bundle elements\n    this.bundleElements = []\n\n    while (offset < dataView.byteLength) {\n      const packet = new Packet()\n      const size = new AtomicInt32()\n\n      offset = size.unpack(dataView, offset)\n      offset = packet.unpack(dataView, offset, this.timetag)\n\n      this.bundleElements.push(packet.value)\n    }\n\n    this.offset = offset\n    this.timetag = timetag\n\n    return this.offset\n  }\n}\n","import Bundle, { BUNDLE_TAG } from './bundle'\nimport Message from './message'\nimport AtomicString from './atomic/string'\n\n/**\n * The unit of transmission of OSC is an OSC Packet. The contents\n * of an OSC packet must be either an OSC Message or an OSC Bundle\n */\nexport default class Packet {\n  /**\n   * Create a Packet instance holding a Message or Bundle\n   * @param {Message|Bundle} [value] Initial Packet value\n   */\n  constructor(value) {\n    if (value && !(value instanceof Message || value instanceof Bundle)) {\n      throw new Error('OSC Packet value has to be Message or Bundle')\n    }\n\n    /** @type {Message|Bundle} value */\n    this.value = value\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n  }\n\n  /**\n   * Packs the Packet value. This implementation is more like\n   * a wrapper due to OSC specifications, you could also skip the\n   * Packet and directly work with the Message or Bundle instance\n   * @return {Uint8Array} Packed binary data\n   *\n   * @example\n   * const message = new Message('/test/path', 21.5, 'test')\n   * const packet = new Packet(message)\n   * const packetBinary = packet.pack() // then send it via udp etc.\n   *\n   * // or skip the Packet for convenience\n   * const messageBinary = message.pack()\n   */\n  pack() {\n    if (!this.value) {\n      throw new Error('OSC Packet can not be encoded with empty body')\n    }\n\n    return this.value.pack()\n  }\n\n  /**\n   * Unpack binary data from DataView to read Messages or Bundles\n   * @param {DataView} dataView The DataView holding a binary representation of a Packet\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Packet expects an instance of type DataView')\n    }\n\n    if (dataView.byteLength % 4 !== 0) {\n      throw new Error('OSC Packet byteLength has to be a multiple of four')\n    }\n\n    const head = new AtomicString()\n    head.unpack(dataView, initialOffset)\n\n    let item\n\n    // check if Packet is a Bundle or a Message\n    if (head.value === BUNDLE_TAG) {\n      item = new Bundle()\n    } else {\n      item = new Message()\n    }\n\n    item.unpack(dataView, initialOffset)\n\n    this.offset = item.offset\n    this.value = item\n\n    return this.offset\n  }\n}\n","import { isArray, isString, isInt, isFunction, dataView } from './common/utils'\nimport { prepareAddress, prepareRegExPattern } from './common/helpers'\n\nimport Packet from './packet'\nimport Bundle from './bundle'\nimport Message from './message'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  discardLateMessages: false,\n}\n\n/**\n * EventHandler to notify listeners on matching OSC messages and\n * status changes of plugins\n */\nexport default class EventHandler {\n  /**\n   * Create an EventHandler instance\n   * @param {object} options Custom options\n   */\n  constructor(options) {\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = Object.assign({}, defaultOptions, options)\n    /**\n     * @type {array} addressHandlers\n     * @private\n     */\n    this.addressHandlers = []\n    /**\n     * @type {object} eventHandlers\n     * @private\n     */\n    this.eventHandlers = {\n      open: [],\n      error: [],\n      close: [],\n    }\n    /**\n     * @type {number} uuid\n     * @private\n     */\n    this.uuid = 0\n  }\n\n  /**\n   * Internally used method to dispatch OSC Packets. Extracts\n   * given Timetags and dispatches them accordingly\n   * @param {Packet} packet\n   * @return {boolean} Success state\n   * @private\n   */\n  dispatch(packet) {\n    if (!(packet instanceof Packet)) {\n      throw new Error('OSC EventHander dispatch() accepts only arguments of type Packet')\n    }\n\n    if (!packet.value) {\n      throw new Error('OSC EventHander dispatch() can\\'t read empty Packets')\n    }\n\n    if (packet.value instanceof Bundle) {\n      const bundle = packet.value\n\n      return bundle.bundleElements.forEach((bundleItem) => {\n        if (packet.value instanceof Bundle) {\n          if (bundle.timetag.value.timestamp() < bundleItem.timetag.value.timestamp()) {\n            throw new Error('OSC Bundle timestamp is older than the timestamp of enclosed Bundles')\n          }\n          return this.dispatch(bundleItem)\n        } else if (bundleItem instanceof Message) {\n          const message = bundleItem\n          return this.notify(message.address, message, bundle.timetag.value.timestamp())\n        }\n\n        throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n      })\n    } else if (packet.value instanceof Message) {\n      const message = packet.value\n      return this.notify(message.address, message)\n    }\n\n    throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n  }\n\n  /**\n   * Internally used method to invoke listener callbacks. Uses regular\n   * expression pattern matching for OSC addresses\n   * @param {string} name OSC address or event name\n   * @param {*} [data] The data of the event\n   * @return {boolean} Success state\n   * @private\n   */\n  call(name, data) {\n    let success = false\n\n    // call event handlers\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].forEach((handler) => {\n        handler.callback(data)\n        success = true\n      })\n\n      return success\n    }\n\n    // call address handlers\n    const handlerKeys = Object.keys(this.addressHandlers)\n    const handlers = this.addressHandlers\n\n    handlerKeys.forEach((key) => {\n      const regex = new RegExp(prepareRegExPattern(prepareAddress(name)), 'g')\n      const test = regex.test(key)\n\n      // found a matching address in our callback handlers\n      if (test && key.length === regex.lastIndex) {\n        handlers[key].forEach((handler) => {\n          handler.callback(data)\n          success = true\n        })\n      }\n    })\n\n    return success\n  }\n\n  /**\n   * Notify the EventHandler of incoming OSC messages or status\n   * changes (*open*, *close*, *error*). Handles OSC address patterns\n   * and executes timed messages. Use binary arrays when\n   * handling directly incoming network data. Packet's or Messages can\n   * also be used\n   * @param {...*} args\n   * The OSC address pattern / event name as string}. For convenience and\n   * Plugin API communication you can also use Message or Packet instances\n   * or ArrayBuffer, Buffer instances (low-level access). The latter will\n   * automatically be unpacked\n   * When using a string you can also pass on data as a second argument\n   * (any type). All regarding listeners will be notified with this data.\n   * As a third argument you can define a javascript timestamp (number or\n   * Date instance) for timed notification of the listeners.\n   * @return {boolean} Success state of notification\n   *\n   * @example\n   * const socket = dgram.createSocket('udp4')\n   * socket.on('message', (message) => {\n   *   this.notify(message)\n   * })\n   *\n   * @example\n   * this.notify('error', error.message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * this.notify(message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * // override timestamp\n   * this.notify(message.address, message, Date.now() + 5000)\n   */\n  notify(...args) {\n    if (args.length === 0) {\n      throw new Error('OSC EventHandler can not be called without any argument')\n    }\n\n    // check for incoming dispatchable OSC data\n    if (args[0] instanceof Packet) {\n      return this.dispatch(args[0])\n    } else if (args[0] instanceof Bundle || args[0] instanceof Message) {\n      return this.dispatch(new Packet(args[0]))\n    } else if (!isString(args[0])) {\n      const packet = new Packet()\n      packet.unpack(dataView(args[0]))\n      return this.dispatch(packet)\n    }\n\n    const name = args[0]\n\n    // data argument\n    let data = null\n\n    if (args.length > 1) {\n      data = args[1]\n    }\n\n    // timestamp argument\n    let timestamp = null\n\n    if (args.length > 2) {\n      if (isInt(args[2])) {\n        timestamp = args[2]\n      } else if (args[2] instanceof Date) {\n        timestamp = args[2].getTime()\n      } else {\n        throw new Error('OSC EventHandler timestamp has to be a number or Date')\n      }\n    }\n\n    // notify now or later\n    if (timestamp) {\n      const now = Date.now()\n\n      // is message outdated?\n      if (now > timestamp) {\n        if (!this.options.discardLateMessages) {\n          return this.call(name, data)\n        }\n      }\n\n      // notify later\n      const that = this\n\n      setTimeout(() => {\n        that.call(name, data)\n      }, timestamp - now)\n\n      return true\n    }\n\n    return this.call(name, data)\n  }\n\n  /**\n   * Subscribe to a new address or event you want to listen to\n   * @param {string} name The OSC address or event name\n   * @param {function} callback Callback function on notification\n   * @return {number} Subscription identifier (needed to unsubscribe)\n   */\n  on(name, callback) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error('OSC EventHandler callback has to be a function')\n    }\n\n    // get next id\n    this.uuid += 1\n\n    // prepare handler\n    const handler = {\n      id: this.uuid,\n      callback,\n    }\n\n    // register event listener\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].push(handler)\n      return this.uuid\n    }\n\n    // register address listener\n    const address = prepareAddress(name)\n    const regex = new RegExp(/[#*\\s[\\],/{}|?]/g)\n\n    if (regex.test(address.split('/').join(''))) {\n      throw new Error('OSC EventHandler address string contains invalid characters')\n    }\n\n    if (!(address in this.addressHandlers)) {\n      this.addressHandlers[address] = []\n    }\n\n    this.addressHandlers[address].push(handler)\n\n    return this.uuid\n  }\n\n  /**\n   * Unsubscribe listener from event notification or address handler\n   * @param {string} name The OSC address or event name\n   * @param {number} subscriptionId Subscription id to identify the handler\n   * @return {boolean} Success state\n   */\n  off(name, subscriptionId) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isInt(subscriptionId)) {\n      throw new Error('OSC EventHandler subscription id has to be a number')\n    }\n\n    let key\n    let haystack\n\n    // event or address listener\n    if (isString(name) && name in this.eventHandlers) {\n      key = name\n      haystack = this.eventHandlers\n    } else {\n      key = prepareAddress(name)\n      haystack = this.addressHandlers\n    }\n\n    // remove the entry\n    if (key in haystack) {\n      return haystack[key].some((item, index) => {\n        if (item.id === subscriptionId) {\n          haystack[key].splice(index, 1)\n          return true\n        }\n\n        return false\n      })\n    }\n\n    return false\n  }\n}\n","const dgram = typeof __dirname !== 'undefined' ? require('dgram') : undefined\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options for open method\n * @private\n */\nconst defaultOpenOptions = {\n  host: 'localhost',\n  port: 41234,\n  exclusive: false,\n}\n\n/**\n * Default options for send method\n * @private\n */\nconst defaultSendOptions = {\n  host: 'localhost',\n  port: 41235,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  type: 'udp4',\n  open: defaultOpenOptions,\n  send: defaultSendOptions,\n}\n\n/**\n * OSC plugin for simple OSC messaging via udp client\n * and udp server\n */\nexport default class DatagramPlugin {\n  /**\n   * Create an OSC Plugin instance with given options. Defaults to\n   * localhost:41234 for server and localhost:41235 for client messaging\n   * @param {object} [options] Custom options\n   * @param {string} [options.type='udp4'] 'udp4' or 'udp6'\n   * @param {string} [options.open.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [options.open.port=41234] Port of udp server to bind to\n   * @param {boolean} [options.open.exclusive=false] Exclusive flag\n   * @param {string} [options.send.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [options.send.port=41235] Port of udp client for messaging\n   *\n   * @example\n   * const plugin = new OSC.DatagramPlugin({ send: { port: 9912 } })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(customOptions = {}) {\n    if (!dgram) {\n      throw new Error('DatagramPlugin can not be used in browser context')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = Object.assign({}, defaultOptions, customOptions)\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = dgram.createSocket(this.options.type)\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    // register events\n    this.socket.on('message', (message) => {\n      this.notify(message)\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Bind a udp socket to a hostname and port\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [customOptions.port=41234] Port of udp server to bind to\n   * @param {boolean} [customOptions.exclusive=false] Exclusive flag\n   */\n  open(customOptions = {}) {\n    const options = Object.assign({}, this.options.openOptions, customOptions)\n    const { port, exclusive } = options\n\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    this.socket.bind({\n      address: options.host,\n      port,\n      exclusive,\n    }, () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    })\n  }\n\n  /**\n   * Close udp socket\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    this.socket.close(() => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom port and hostname, otherwise the global options will\n   * be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options for udp socket\n   * @param {string} [customOptions.host] Hostname of udp client\n   * @param {number} [customOptions.port] Port of udp client\n   */\n  send(binary, customOptions = {}) {\n    const options = Object.assign({}, this.options.sendOptions, customOptions)\n    const { port, host } = options\n\n    this.socket.send(new Buffer(binary), 0, binary.byteLength, port, host)\n  }\n}\n","const dgram = typeof __dirname !== 'undefined' ? require('dgram') : undefined\nconst WebSocket = typeof __dirname !== 'undefined' ? require('ws').Server : undefined\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  udpServer: {\n    host: 'localhost',\n    port: 41234,\n    exclusive: false,\n  },\n  udpClient: {\n    host: 'localhost',\n    port: 41235,\n  },\n  wsServer: {\n    host: 'localhost',\n    port: 8080,\n  },\n  receiver: 'ws',\n}\n\n/**\n * Helper method to merge nested objects\n * @private\n */\nfunction mergeOptions(base, custom) {\n  return Object.assign({}, defaultOptions, base, custom, {\n    udpServer: Object.assign({}, defaultOptions.udpServer, base.udpServer, custom.udpServer),\n    udpClient: Object.assign({}, defaultOptions.udpClient, base.udpClient, custom.udpClient),\n    wsServer: Object.assign({}, defaultOptions.wsServer, base.wsServer, custom.wsServer),\n  })\n}\n\n/**\n * OSC plugin for setting up communication between a Websocket\n * client and a udp client with a bridge inbetween\n */\nexport default class BridgePlugin {\n  /**\n   * Create an OSC Bridge instance with given options. Defaults to\n   * localhost:41234 for udp server, localhost:41235 for udp client and\n   * localhost:8080 for Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.udpServer.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [options.udpServer.port=41234] Port of udp server to bind to\n   * @param {boolean} [options.udpServer.exclusive=false] Exclusive flag\n   * @param {string} [options.udpClient.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [options.udpClient.port=41235] Port of udp client for messaging\n   * @param {string} [options.wsServer.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.wsServer.port=8080] Port of Websocket server\n   * @param {string} [options.receiver='ws'] Where messages sent via 'send' method will be\n   * delivered to, 'ws' for Websocket clients, 'udp' for udp client\n   *\n   * @example\n   * const plugin = new OSC.BridgePlugin({ wsServer: { port: 9912 } })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(customOptions = {}) {\n    if (!dgram || !WebSocket) {\n      throw new Error('BridgePlugin can not be used in browser context')\n    }\n\n    /** @type {object} options\n     * @private\n     */\n    this.options = mergeOptions({}, customOptions)\n\n    /**\n     * @type {object} websocket\n     * @private\n     */\n    this.websocket = null\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = dgram.createSocket('udp4')\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    // register udp events\n    this.socket.on('message', (message) => {\n      this.send(message, { receiver: 'ws' })\n      this.notify(message.buffer)\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Bind a udp socket to a hostname and port\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [customOptions.port=41234] Port of udp server to bind to\n   * @param {boolean} [customOptions.exclusive=false] Exclusive flag\n   */\n  open(customOptions = {}) {\n    const options = mergeOptions(this.options, customOptions)\n\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // bind udp server\n    this.socket.bind({\n      address: options.udpServer.host,\n      port: options.udpServer.port,\n      exclusive: options.udpServer.exclusive,\n    }, () => {\n      // bind Websocket server\n      this.websocket = new WebSocket({ host: options.wsServer.host, port: options.wsServer.port })\n      this.websocket.binaryType = 'arraybuffer'\n\n      // register Websocket events\n      this.websocket.on('error', (error) => {\n        this.notify('error', error)\n      })\n\n      this.websocket.on('connection', (client) => {\n        client.on('message', (message) => {\n          this.send(message, { receiver: 'udp' })\n          this.notify(new Uint8Array(message))\n        })\n      })\n\n      this.notify('open')\n    })\n  }\n\n  /**\n   * Close udp socket and Websocket server\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    // close udp socket\n    this.socket.close(() => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n\n      // close Websocket\n      this.websocket.close()\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom receiver, otherwise the global options will be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.udpClient.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [customOptions.udpClient.port=41235] Port of udp client for messaging\n   * @param {string} [customOptions.receiver='ws'] Messages will be delivered to Websocket ('ws')\n   * clients or udp client ('udp')\n   */\n  send(binary, customOptions = {}) {\n    const options = mergeOptions(this.options, customOptions)\n    const { receiver } = options\n\n    if (receiver === 'udp') {\n      // send data to udp client\n      const data = binary instanceof Buffer ? binary : new Buffer(binary)\n      this.socket.send(\n        data,\n        0,\n        data.byteLength,\n        options.udpClient.port,\n        options.udpClient.host,\n      )\n    } else if (receiver === 'ws') {\n      // send data to all Websocket clients\n      this.websocket.clients.forEach((client) => {\n        client.send(binary, { binary: true })\n      })\n    } else {\n      throw new Error('BridgePlugin can not send message to unknown receiver')\n    }\n  }\n}\n","// eslint-disable-next-line no-undef, no-use-before-define\nconst WebsocketClient = typeof __dirname === 'undefined' ? WebSocket : require('ws')\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  host: 'localhost',\n  port: 8080,\n}\n\n/**\n * OSC plugin for a Websocket client running in node or browser context\n */\nexport default class WebsocketClientPlugin {\n  /**\n   * Create an OSC WebsocketClientPlugin instance with given options.\n   * Defaults to *localhost:8080* for connecting to a Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.port=8080] Port of Websocket server\n   *\n   * @example\n   * const plugin = new OSC.WebsocketClientPlugin({ port: 9912 })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(customOptions) {\n    if (!WebsocketClient) {\n      throw new Error('WebsocketClientPlugin can\\'t find a WebSocket class')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = Object.assign({}, defaultOptions, customOptions)\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = null\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status identifier\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Connect to a Websocket server. Defaults to global options\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host] Hostname of Websocket server\n   * @param {number} [customOptions.port] Port of Websocket server\n   */\n  open(customOptions = {}) {\n    const options = Object.assign({}, this.options, customOptions)\n    const { port, host } = options\n\n    // close socket when already given\n    if (this.socket) {\n      this.close()\n    }\n\n    // create websocket client\n    this.socket = new WebsocketClient(`ws://${host}:${port}`)\n    this.socket.binaryType = 'arraybuffer'\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // register events\n    this.socket.onopen = () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    }\n\n    this.socket.onclose = () => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    }\n\n    this.socket.onerror = (error) => {\n      this.notify('error', error)\n    }\n\n    this.socket.onmessage = (message) => {\n      this.notify(message.data)\n    }\n  }\n\n  /**\n   * Close Websocket\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n    this.socket.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message to Websocket server\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   */\n  send(binary) {\n    this.socket.send(binary)\n  }\n}\n","const WebsocketServer = typeof __dirname !== 'undefined' ? require('ws').Server : undefined\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  host: 'localhost',\n  port: 8080,\n}\n\n/**\n * OSC plugin for a Websocket client running in node or browser context\n */\nexport default class WebsocketServerPlugin {\n  /**\n   * Create an OSC WebsocketServerPlugin instance with given options.\n   * Defaults to *localhost:8080* for the Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.port=8080] Port of Websocket server\n   *\n   * @example\n   * const plugin = new OSC.WebsocketServerPlugin({ port: 9912 })\n   * const osc = new OSC({ plugin: plugin })\n   *\n   * osc.open() // start server\n   */\n  constructor(customOptions) {\n    if (!WebsocketServer) {\n      throw new Error('WebsocketServerPlugin can not be used in browser context')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = Object.assign({}, defaultOptions, customOptions)\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = null\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status identifier\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Start a Websocket server. Defaults to global options\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host] Hostname of Websocket server\n   * @param {number} [customOptions.port] Port of Websocket server\n   */\n  open(customOptions = {}) {\n    const options = Object.assign({}, this.options, customOptions)\n    const { port, host } = options\n\n    // close socket when already given\n    if (this.socket) {\n      this.close()\n    }\n\n    // create websocket server\n    this.socket = new WebsocketServer({ host, port })\n    this.socket.binaryType = 'arraybuffer'\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // register events\n    this.socket.on('listening', () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    this.socket.on('connection', (client) => {\n      client.on('message', (message) => {\n        this.notify(new Uint8Array(message))\n      })\n    })\n  }\n\n  /**\n   * Close Websocket server\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n    this.socket.close(() => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message to Websocket clients\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   */\n  send(binary) {\n    this.socket.clients.forEach((client) => {\n      client.send(binary, { binary: true })\n    })\n  }\n}\n","import { isObject, isString, isFunction, isInt } from './common/utils'\n\nimport Packet from './packet'\nimport Bundle from './bundle'\nimport Message from './message'\n\nimport EventHandler from './events'\n\nimport DatagramPlugin from './plugin/dgram'\nimport BridgePlugin from './plugin/bridge'\nimport WebsocketClientPlugin from './plugin/wsclient'\nimport WebsocketServerPlugin from './plugin/wsserver'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  plugin: new WebsocketClientPlugin(),\n  discardLateMessages: false,\n}\n\n/**\n * Status flags\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * OSC interface to send OSC Packets and to listen to status-changes and\n * incoming message events. Offers a Plugin API for different network\n * protocols, defaults to a simple Websocket client for OSC communication\n * between a browser js-app and a js-node server\n *\n * @example\n * const osc = new OSC()\n *\n * osc.on('/input/test', (message) => {\n *   // print incoming OSC message arguments\n *   console.log(message.args)\n * })\n *\n * osc.on('open', () => {\n *   const message = new Message('/test/path', 55.12, 'hello')\n *   osc.send(message)\n * })\n *\n * osc.open({ host: '192.168.178.115', port: 9012 })\n */\nclass OSC {\n  /**\n   * Create an OSC instance with given options\n   * @param {object} [options] Custom options\n   * @param {boolean} [options.discardLateMessages=false] Ignore incoming\n   * messages when given timetag lies in the past\n   * @param {Plugin} [options.plugin=WebsocketClientPlugin] Add a connection plugin\n   * to this interface, defaults to a plugin with Websocket client.\n   * Open README.md for further information on how to handle plugins or\n   * how to write your own with the Plugin API\n   *\n   * @example\n   * const osc = new OSC() // default options with Websocket client\n   *\n   * @example\n   * const osc = new OSC({ discardLateMessages: true })\n   *\n   * @example\n   * const websocketPlugin = new OSC.WebsocketClientPlugin()\n   * const osc = new OSC({ plugin: websocketPlugin })\n   */\n  constructor(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC options argument has to be an object.')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = Object.assign({}, defaultOptions, options)\n    /**\n     * @type {EventHandler} eventHandler\n     * @private\n     */\n    this.eventHandler = new EventHandler({\n      discardLateMessages: this.options.discardLateMessages,\n    })\n\n    // pass EventHandler's notify() to plugin\n    const eventHandler = this.eventHandler\n    if (this.options.plugin && this.options.plugin.registerNotify) {\n      this.options.plugin.registerNotify((...args) =>\n        eventHandler.notify(...args)\n      )\n    }\n  }\n\n  /**\n   * Listen to a status-change event or incoming OSC message with\n   * address pattern matching\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {function} callback Function which is called on notification\n   * @return {number} Subscription id (needed to unsubscribe)\n   *\n   * @example\n   * // will be called when server receives /in!trument/* for example\n   * osc.on('/instrument/1', (message) => {\n   *   console.log(message)\n   * })\n   *\n   * @example\n   * // will be called on network socket error\n   * osc.on('error', (message) => {\n   *   console.log(message)\n   * })\n   */\n  on(eventName, callback) {\n    if (!(isString(eventName) && isFunction(callback))) {\n      throw new Error('OSC on() needs event- or address string and callback function')\n    }\n\n    return this.eventHandler.on(eventName, callback)\n  }\n\n  /**\n   * Unsubscribe an event listener\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {number} subscriptionId The subscription id\n   * @return {boolean} Success state\n   *\n   * @example\n   * const listenerId = osc.on('error', (message) => {\n   *   console.log(message)\n   * })\n   * osc.off('error', listenerId) // unsubscribe from error event\n   */\n  off(eventName, subscriptionId) {\n    if (!(isString(eventName) && isInt(subscriptionId))) {\n      throw new Error('OSC off() needs string and number (subscriptionId) to unsubscribe')\n    }\n\n    return this.eventHandler.off(eventName, subscriptionId)\n  }\n\n  /**\n   * Open network socket with plugin. This method is used by\n   * plugins and is not available without (see Plugin API for more information)\n   * @param {object} [options] Custom global options for plugin instance\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   */\n  open(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC open() options argument needs to be an object')\n    }\n\n    if (!(this.options.plugin && isFunction(this.options.plugin.open))) {\n      throw new Error('OSC Plugin API #open is not implemented!')\n    }\n\n    return this.options.plugin.open(options)\n  }\n\n  /**\n   * Returns the current status of the connection. See *STATUS* for\n   * different possible states. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @return {number} Status identifier\n   *\n   * @example\n   * import OSC, { STATUS } from 'osc'\n   * const osc = new OSC()\n   * if (osc.status() === STATUS.IS_CONNECTING) {\n   *   // do something\n   * }\n   */\n  status() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.status))) {\n      throw new Error('OSC Plugin API #status is not implemented!')\n    }\n\n    return this.options.plugin.status()\n  }\n\n  /**\n   * Close connection. This method is used by plugins and is not\n   * available without (see Plugin API for more information)\n   */\n  close() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.close))) {\n      throw new Error('OSC Plugin API #close is not implemented!')\n    }\n\n    return this.options.plugin.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @param {Packet|Bundle|Message} packet OSC Packet, Bundle or Message instance\n   * @param {object} [options] Custom options\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   *\n   * const message = new OSC.Message('/test/path', 55.1, 57)\n   * osc.send(message)\n   *\n   * // send message again to custom address\n   * osc.send(message, { host: '192.168.178.115', port: 9001 })\n   */\n  send(packet, options) {\n    if (!(this.options.plugin && isFunction(this.options.plugin.send))) {\n      throw new Error('OSC Plugin API #send is not implemented!')\n    }\n\n    if (!(packet instanceof Message || packet instanceof Bundle || packet instanceof Packet)) {\n      throw new Error('OSC send() needs Messages, Bundles or Packets')\n    }\n\n    if (options && !isObject(options)) {\n      throw new Error('OSC send() options argument has to be an object')\n    }\n\n    return this.options.plugin.send(packet.pack(), options)\n  }\n}\n\n// expose status flags\nOSC.STATUS = STATUS\n\n// expose OSC classes\nOSC.Packet = Packet\nOSC.Bundle = Bundle\nOSC.Message = Message\n\n// expose plugins\nOSC.DatagramPlugin = DatagramPlugin\nOSC.WebsocketClientPlugin = WebsocketClientPlugin\nOSC.WebsocketServerPlugin = WebsocketServerPlugin\nOSC.BridgePlugin = BridgePlugin\n\nexport default OSC\n"],"names":["isInt","n","Number","isFloat","isString","isArray","Object","prototype","toString","call","isObject","isFunction","isBlob","Uint8Array","isDate","Date","isUndefined","pad","dataView","obj","buffer","DataView","ArrayBuffer","typeTag","item","Error","prepareAddress","address","join","length","slice","prepareRegExPattern","str","pattern","replace","EncodeHelper","data","byteLength","pack","push","result","offset","forEach","set","Atomic","value","method","initialOffset","AtomicInt32","AtomicFloat32","AtomicString","terminated","i","charCodeAt","charcode","getUint8","TextDecoder","decode","AtomicBlob","setInt32","getInt32","Message","types","args","shift","map","encoder","Helper","add","argument","merge","unpack","next","type","SECONDS_70_YEARS","TWO_POWER_32","Timetag","seconds","fractions","milliseconds","rounded","Math","floor","round","AtomicTimetag","now","timetag","timestamp","getTime","getUint32","BUNDLE_TAG","Bundle","bundleElements","ms","head","packet","Packet","size","defaultOptions","EventHandler","options","assign","addressHandlers","eventHandlers","uuid","bundle","bundleItem","dispatch","message","notify","name","success","handler","callback","handlerKeys","keys","handlers","key","regex","RegExp","test","lastIndex","discardLateMessages","that","split","subscriptionId","haystack","some","index","id","splice","dgram","__dirname","require","undefined","STATUS","defaultOpenOptions","defaultSendOptions","DatagramPlugin","customOptions","socket","createSocket","socketStatus","IS_NOT_INITIALIZED","on","error","fn","openOptions","port","exclusive","IS_CONNECTING","bind","host","IS_OPEN","IS_CLOSING","close","IS_CLOSED","binary","sendOptions","send","Buffer","WebSocket","Server","mergeOptions","base","custom","udpServer","udpClient","wsServer","BridgePlugin","websocket","receiver","binaryType","client","clients","WebsocketClient","WebsocketClientPlugin","onopen","onclose","onerror","onmessage","WebsocketServer","WebsocketServerPlugin","OSC","eventHandler","plugin","registerNotify","eventName","off","open","status"],"mappings":"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"}