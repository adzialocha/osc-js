[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/atomic/blob.js",
    "content": "import {\n  isBlob,\n  isUndefined,\n  pad,\n} from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 8-bit bytes of arbitrary binary data OSC Atomic Data Type\n */\nexport default class AtomicBlob extends Atomic {\n  /**\n   * Create an AtomicBlob instance\n   * @param {Uint8Array} [value] Binary data\n   */\n  constructor(value) {\n    if (value && !isBlob(value)) {\n      throw new Error('OSC AtomicBlob constructor expects value of type Uint8Array')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given blob as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicBlob can not be encoded with empty value')\n    }\n\n    const byteLength = pad(this.value.byteLength)\n    const data = new Uint8Array(byteLength + 4)\n    const dataView = new DataView(data.buffer)\n\n    // an int32 size count\n    dataView.setInt32(0, this.value.byteLength, false)\n    // followed by 8-bit bytes of arbitrary binary data\n    data.set(this.value, 4)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a blob\n   * @param {DataView} dataView The DataView holding the binary representation of the blob\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicBlob expects an instance of type DataView')\n    }\n\n    const byteLength = dataView.getInt32(initialOffset, false)\n\n    /** @type {Uint8Array} value */\n    this.value = new Uint8Array(dataView.buffer, initialOffset + 4, byteLength)\n    /** @type {number} offset */\n    this.offset = pad(initialOffset + 4 + byteLength)\n\n    return this.offset\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic/blob.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "AtomicBlob",
    "memberof": "src/atomic/blob.js",
    "static": true,
    "longname": "src/atomic/blob.js~AtomicBlob",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/blob.js",
    "importStyle": "AtomicBlob",
    "description": "8-bit bytes of arbitrary binary data OSC Atomic Data Type",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "src/atomic.js~Atomic"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic/blob.js~AtomicBlob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/blob.js~AtomicBlob#constructor",
    "access": "public",
    "description": "Create an AtomicBlob instance",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Uint8Array"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Binary data"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "pack",
    "memberof": "src/atomic/blob.js~AtomicBlob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/blob.js~AtomicBlob#pack",
    "access": "public",
    "description": "Interpret the given blob as packed binary data",
    "lineNumber": 29,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/atomic/blob.js~AtomicBlob",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/blob.js~AtomicBlob#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView and read a blob",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of the blob"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "value",
    "memberof": "src/atomic/blob.js~AtomicBlob",
    "static": false,
    "longname": "src/atomic/blob.js~AtomicBlob#value",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "offset",
    "memberof": "src/atomic/blob.js~AtomicBlob",
    "static": false,
    "longname": "src/atomic/blob.js~AtomicBlob#offset",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/atomic/constant.js",
    "content": "/**\n * Extended boolean type without data representing \"True\"\n */\nexport const VALUE_TRUE = true\n\n/**\n * Extended boolean type without data representing \"False\"\n */\nexport const VALUE_FALSE = false\n\n/**\n * Extended type without data representing \"None\"\n * @type {null}\n */\nexport const VALUE_NONE = null\n\n/**\n * Extended type without data representing \"Infinity\"\n */\nexport const VALUE_INFINITY = Infinity\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic/constant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "VALUE_TRUE",
    "memberof": "src/atomic/constant.js",
    "static": true,
    "longname": "src/atomic/constant.js~VALUE_TRUE",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/constant.js",
    "importStyle": "{VALUE_TRUE}",
    "description": "Extended boolean type without data representing \"True\"",
    "lineNumber": 4,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "VALUE_FALSE",
    "memberof": "src/atomic/constant.js",
    "static": true,
    "longname": "src/atomic/constant.js~VALUE_FALSE",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/constant.js",
    "importStyle": "{VALUE_FALSE}",
    "description": "Extended boolean type without data representing \"False\"",
    "lineNumber": 9,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "VALUE_NONE",
    "memberof": "src/atomic/constant.js",
    "static": true,
    "longname": "src/atomic/constant.js~VALUE_NONE",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/constant.js",
    "importStyle": "{VALUE_NONE}",
    "description": "Extended type without data representing \"None\"",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "VALUE_INFINITY",
    "memberof": "src/atomic/constant.js",
    "static": true,
    "longname": "src/atomic/constant.js~VALUE_INFINITY",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/constant.js",
    "importStyle": "{VALUE_INFINITY}",
    "description": "Extended type without data representing \"Infinity\"",
    "lineNumber": 20,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/atomic/float32.js",
    "content": "import { isNumber } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian IEEE 754 floating point number OSC Atomic Data Type\n */\nexport default class AtomicFloat32 extends Atomic {\n  /**\n   * Create an AtomicFloat32 instance\n   * @param {number} [value] Float number\n   */\n  constructor(value) {\n    if (value && !isNumber(value)) {\n      throw new Error('OSC AtomicFloat32 constructor expects value of type float')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setFloat32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Float32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getFloat32', 4, initialOffset)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic/float32.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "class",
    "name": "AtomicFloat32",
    "memberof": "src/atomic/float32.js",
    "static": true,
    "longname": "src/atomic/float32.js~AtomicFloat32",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/float32.js",
    "importStyle": "AtomicFloat32",
    "description": "32-bit big-endian IEEE 754 floating point number OSC Atomic Data Type",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/atomic.js~Atomic"
    ]
  },
  {
    "__docId__": 62,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic/float32.js~AtomicFloat32",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/float32.js~AtomicFloat32#constructor",
    "access": "public",
    "description": "Create an AtomicFloat32 instance",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Float number"
      }
    ]
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "pack",
    "memberof": "src/atomic/float32.js~AtomicFloat32",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/float32.js~AtomicFloat32#pack",
    "access": "public",
    "description": "Interpret the given number as packed binary data",
    "lineNumber": 25,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/atomic/float32.js~AtomicFloat32",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/float32.js~AtomicFloat32#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView and read a Float32 number",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of the value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/atomic/float64.js",
    "content": "import { isNumber } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 64-bit big-endian IEEE 754 floating point number OSC Atomic Data Type\n */\nexport default class AtomicFloat64 extends Atomic {\n  /**\n   * Create an AtomicFloat64 instance\n   * @param {number} [value] Float number\n   */\n  constructor(value) {\n    if (value && !isNumber(value)) {\n      throw new Error('OSC AtomicFloat64 constructor expects value of type float')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setFloat64', 8)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Float64 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getFloat64', 8, initialOffset)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic/float64.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "AtomicFloat64",
    "memberof": "src/atomic/float64.js",
    "static": true,
    "longname": "src/atomic/float64.js~AtomicFloat64",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/float64.js",
    "importStyle": "AtomicFloat64",
    "description": "64-bit big-endian IEEE 754 floating point number OSC Atomic Data Type",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/atomic.js~Atomic"
    ]
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic/float64.js~AtomicFloat64",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/float64.js~AtomicFloat64#constructor",
    "access": "public",
    "description": "Create an AtomicFloat64 instance",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Float number"
      }
    ]
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "pack",
    "memberof": "src/atomic/float64.js~AtomicFloat64",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/float64.js~AtomicFloat64#pack",
    "access": "public",
    "description": "Interpret the given number as packed binary data",
    "lineNumber": 25,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/atomic/float64.js~AtomicFloat64",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/float64.js~AtomicFloat64#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView and read a Float64 number",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of the value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/atomic/int32.js",
    "content": "import { isInt } from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/**\n * 32-bit big-endian two's complement integer OSC Atomic Data Type\n */\nexport default class AtomicInt32 extends Atomic {\n  /**\n   * Create an AtomicInt32 instance\n   * @param {number} [value] Initial integer value\n   */\n  constructor(value) {\n    if (value && !isInt(value)) {\n      throw new Error('OSC AtomicInt32 constructor expects value of type number')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setInt32', 4)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Int32 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getInt32', 4, initialOffset)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic/int32.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "AtomicInt32",
    "memberof": "src/atomic/int32.js",
    "static": true,
    "longname": "src/atomic/int32.js~AtomicInt32",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/int32.js",
    "importStyle": "AtomicInt32",
    "description": "32-bit big-endian two's complement integer OSC Atomic Data Type",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/atomic.js~Atomic"
    ]
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic/int32.js~AtomicInt32",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/int32.js~AtomicInt32#constructor",
    "access": "public",
    "description": "Create an AtomicInt32 instance",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Initial integer value"
      }
    ]
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "pack",
    "memberof": "src/atomic/int32.js~AtomicInt32",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/int32.js~AtomicInt32#pack",
    "access": "public",
    "description": "Interpret the given number as packed binary data",
    "lineNumber": 25,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/atomic/int32.js~AtomicInt32",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/int32.js~AtomicInt32#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView and read a Int32 number",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of the value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/atomic/int64.js",
    "content": "import Atomic from '../atomic'\n\nconst MAX_INT64 = BigInt('9223372036854775807')\nconst MIN_INT64 = BigInt('-9223372036854775808')\n\n/**\n * 64-bit big-endian two's complement integer OSC Atomic Data Type\n */\nexport default class AtomicInt64 extends Atomic {\n  /**\n   * Create an AtomicInt64 instance\n   * @param {number} [value] Initial integer value\n   */\n  constructor(value) {\n    if (value && typeof value !== 'bigint') {\n      throw new Error('OSC AtomicInt64 constructor expects value of type BigInt')\n    }\n\n    if (value && (value < MIN_INT64 || value > MAX_INT64)) {\n      throw new Error('OSC AtomicInt64 value is out of bounds')\n    }\n\n    let tmp\n    if (value) {\n      tmp = BigInt.asIntN(64, value)\n    }\n\n    super(tmp)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setBigInt64', 8)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a Int64 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getBigInt64', 8, initialOffset)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic/int64.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "MAX_INT64",
    "memberof": "src/atomic/int64.js",
    "static": true,
    "longname": "src/atomic/int64.js~MAX_INT64",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/atomic/int64.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "MIN_INT64",
    "memberof": "src/atomic/int64.js",
    "static": true,
    "longname": "src/atomic/int64.js~MIN_INT64",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/atomic/int64.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "AtomicInt64",
    "memberof": "src/atomic/int64.js",
    "static": true,
    "longname": "src/atomic/int64.js~AtomicInt64",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/int64.js",
    "importStyle": "AtomicInt64",
    "description": "64-bit big-endian two's complement integer OSC Atomic Data Type",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/atomic.js~Atomic"
    ]
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic/int64.js~AtomicInt64",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/int64.js~AtomicInt64#constructor",
    "access": "public",
    "description": "Create an AtomicInt64 instance",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Initial integer value"
      }
    ]
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "pack",
    "memberof": "src/atomic/int64.js~AtomicInt64",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/int64.js~AtomicInt64#pack",
    "access": "public",
    "description": "Interpret the given number as packed binary data",
    "lineNumber": 35,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/atomic/int64.js~AtomicInt64",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/int64.js~AtomicInt64#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView and read a Int64 number",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of the value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/atomic/string.js",
    "content": "import {\n  hasProperty,\n  isString,\n  isUndefined,\n  pad,\n} from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/** Slice size of large strings for fallback method */\nconst STR_SLICE_SIZE = 65537\n\n/** Text encoding format */\nconst STR_ENCODING = 'utf-8'\n\n/**\n * Helper method to decode a string using different methods depending on environment\n * @param {number[]} charCodes Array of char codes\n * @return {string} Decoded string\n */\nfunction charCodesToString(charCodes) {\n  // Use these methods to be able to convert large strings\n  if (hasProperty('Buffer')) {\n    return Buffer.from(charCodes).toString(STR_ENCODING)\n  } else if (hasProperty('TextDecoder')) {\n    return new TextDecoder(STR_ENCODING) // eslint-disable-line no-undef\n      .decode(new Int8Array(charCodes))\n  }\n\n  // Fallback method\n  let str = ''\n\n  for (let i = 0; i < charCodes.length; i += STR_SLICE_SIZE) {\n    str += String.fromCharCode.apply(\n      null,\n      charCodes.slice(i, i + STR_SLICE_SIZE),\n    )\n  }\n\n  return str\n}\n\n/**\n * A sequence of non-null ASCII characters OSC Atomic Data Type\n */\nexport default class AtomicString extends Atomic {\n  /**\n   * Create an AtomicString instance\n   * @param {string} [value] Initial string value\n   */\n  constructor(value) {\n    if (value && !isString(value)) {\n      throw new Error('OSC AtomicString constructor expects value of type string')\n    }\n\n    super(value)\n  }\n\n  /**\n   * Interpret the given string as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicString can not be encoded with empty value')\n    }\n\n    // add 0-3 null characters for total number of bits a multiple of 32\n    const terminated = `${this.value}\\u0000`\n    const byteLength = pad(terminated.length)\n\n    const buffer = new Uint8Array(byteLength)\n\n    for (let i = 0; i < terminated.length; i += 1) {\n      buffer[i] = terminated.charCodeAt(i)\n    }\n\n    return buffer\n  }\n\n  /**\n   * Unpack binary data from DataView and read a string\n   * @param {DataView} dataView The DataView holding the binary representation of the string\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicString expects an instance of type DataView')\n    }\n\n    let offset = initialOffset\n    let charcode\n    const charCodes = []\n\n    for (; offset < dataView.byteLength; offset += 1) {\n      charcode = dataView.getUint8(offset)\n\n      // check for terminating null character\n      if (charcode !== 0) {\n        charCodes.push(charcode)\n      } else {\n        offset += 1\n        break\n      }\n    }\n\n    if (offset === dataView.length) {\n      throw new Error('OSC AtomicString found a malformed OSC string')\n    }\n\n    /** @type {number} offset */\n    this.offset = pad(offset)\n    /** @type {string} value */\n    this.value = charCodesToString(charCodes)\n\n    return this.offset\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic/string.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "STR_SLICE_SIZE",
    "memberof": "src/atomic/string.js",
    "static": true,
    "longname": "src/atomic/string.js~STR_SLICE_SIZE",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/atomic/string.js",
    "importStyle": null,
    "description": "Slice size of large strings for fallback method",
    "lineNumber": 11,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "STR_ENCODING",
    "memberof": "src/atomic/string.js",
    "static": true,
    "longname": "src/atomic/string.js~STR_ENCODING",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/atomic/string.js",
    "importStyle": null,
    "description": "Text encoding format",
    "lineNumber": 14,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "charCodesToString",
    "memberof": "src/atomic/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/atomic/string.js~charCodesToString",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/atomic/string.js",
    "importStyle": null,
    "description": "Helper method to decode a string using different methods depending on environment",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "charCodes",
        "description": "Array of char codes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Decoded string"
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "AtomicString",
    "memberof": "src/atomic/string.js",
    "static": true,
    "longname": "src/atomic/string.js~AtomicString",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/string.js",
    "importStyle": "AtomicString",
    "description": "A sequence of non-null ASCII characters OSC Atomic Data Type",
    "lineNumber": 46,
    "interface": false,
    "extends": [
      "src/atomic.js~Atomic"
    ]
  },
  {
    "__docId__": 87,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic/string.js~AtomicString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/string.js~AtomicString#constructor",
    "access": "public",
    "description": "Create an AtomicString instance",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Initial string value"
      }
    ]
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "pack",
    "memberof": "src/atomic/string.js~AtomicString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/string.js~AtomicString#pack",
    "access": "public",
    "description": "Interpret the given string as packed binary data",
    "lineNumber": 63,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/atomic/string.js~AtomicString",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/string.js~AtomicString#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView and read a string",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of the string"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "offset",
    "memberof": "src/atomic/string.js~AtomicString",
    "static": false,
    "longname": "src/atomic/string.js~AtomicString#offset",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "value",
    "memberof": "src/atomic/string.js~AtomicString",
    "static": false,
    "longname": "src/atomic/string.js~AtomicString#value",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/atomic/timetag.js",
    "content": "import {\n  isDate,\n  isInt,\n  isUndefined,\n} from '../common/utils'\n\nimport Atomic from '../atomic'\n\n/** 70 years in seconds */\nexport const SECONDS_70_YEARS = 2208988800\n/** 2^32 */\nexport const TWO_POWER_32 = 4294967296\n\n/**\n * Timetag helper class for representing NTP timestamps\n * and conversion between them and javascript representation\n */\nexport class Timetag {\n  /**\n   * Create a Timetag instance\n   * @param {number} [seconds=0] Initial NTP *seconds* value\n   * @param {number} [fractions=0] Initial NTP *fractions* value\n   */\n  constructor(seconds = 0, fractions = 0) {\n    if (!(isInt(seconds) && isInt(fractions))) {\n      throw new Error('OSC Timetag constructor expects values of type integer number')\n    }\n\n    /** @type {number} seconds */\n    this.seconds = seconds\n    /** @type {number} fractions */\n    this.fractions = fractions\n  }\n\n  /**\n   * Converts from NTP to JS representation and back\n   * @param {number} [milliseconds] Converts from JS milliseconds to NTP.\n   * Leave empty for converting from NTP to JavaScript representation\n   * @return {number} Javascript timestamp\n   */\n  timestamp(milliseconds) {\n    let seconds\n\n    if (typeof milliseconds === 'number') {\n      seconds = milliseconds / 1000\n      const rounded = Math.floor(seconds)\n\n      this.seconds = rounded + SECONDS_70_YEARS\n      this.fractions = Math.round(TWO_POWER_32 * (seconds - rounded))\n\n      return milliseconds\n    }\n\n    seconds = this.seconds - SECONDS_70_YEARS\n    return (seconds + Math.round(this.fractions / TWO_POWER_32)) * 1000\n  }\n}\n\n/**\n * 64-bit big-endian fixed-point time tag, semantics\n * defined below OSC Atomic Data Type\n */\nexport default class AtomicTimetag extends Atomic {\n  /**\n   * Create a AtomicTimetag instance\n   * @param {number|Timetag|Date} [value] Initial date, leave empty if\n   * you want it to be the current date\n   */\n  constructor(value = Date.now()) {\n    let timetag = new Timetag()\n\n    if (value instanceof Timetag) {\n      timetag = value\n    } else if (isInt(value)) {\n      timetag.timestamp(value)\n    } else if (isDate(value)) {\n      timetag.timestamp(value.getTime())\n    }\n\n    super(timetag)\n  }\n\n  /**\n   * Interpret the given timetag as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (isUndefined(this.value)) {\n      throw new Error('OSC AtomicTimetag can not be encoded with empty value')\n    }\n\n    const { seconds, fractions } = this.value\n    const data = new Uint8Array(8)\n    const dataView = new DataView(data.buffer)\n\n    dataView.setInt32(0, seconds, false)\n    dataView.setInt32(4, fractions, false)\n\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView and read a timetag\n   * @param {DataView} dataView The DataView holding the binary representation of the timetag\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC AtomicTimetag expects an instance of type DataView')\n    }\n\n    const seconds = dataView.getUint32(initialOffset, false)\n    const fractions = dataView.getUint32(initialOffset + 4, false)\n\n    /** @type {Timetag} value */\n    this.value = new Timetag(seconds, fractions)\n    /** @type {number} offset */\n    this.offset = initialOffset + 8\n\n    return this.offset\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic/timetag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "SECONDS_70_YEARS",
    "memberof": "src/atomic/timetag.js",
    "static": true,
    "longname": "src/atomic/timetag.js~SECONDS_70_YEARS",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/timetag.js",
    "importStyle": "{SECONDS_70_YEARS}",
    "description": "70 years in seconds",
    "lineNumber": 10,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "TWO_POWER_32",
    "memberof": "src/atomic/timetag.js",
    "static": true,
    "longname": "src/atomic/timetag.js~TWO_POWER_32",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/timetag.js",
    "importStyle": "{TWO_POWER_32}",
    "description": "2^32",
    "lineNumber": 12,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "Timetag",
    "memberof": "src/atomic/timetag.js",
    "static": true,
    "longname": "src/atomic/timetag.js~Timetag",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/timetag.js",
    "importStyle": "{Timetag}",
    "description": "Timetag helper class for representing NTP timestamps\nand conversion between them and javascript representation",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic/timetag.js~Timetag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/timetag.js~Timetag#constructor",
    "access": "public",
    "description": "Create a Timetag instance",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "seconds",
        "description": "Initial NTP *seconds* value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "fractions",
        "description": "Initial NTP *fractions* value"
      }
    ]
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "seconds",
    "memberof": "src/atomic/timetag.js~Timetag",
    "static": false,
    "longname": "src/atomic/timetag.js~Timetag#seconds",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "fractions",
    "memberof": "src/atomic/timetag.js~Timetag",
    "static": false,
    "longname": "src/atomic/timetag.js~Timetag#fractions",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "timestamp",
    "memberof": "src/atomic/timetag.js~Timetag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/timetag.js~Timetag#timestamp",
    "access": "public",
    "description": "Converts from NTP to JS representation and back",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "milliseconds",
        "description": "Converts from JS milliseconds to NTP.\nLeave empty for converting from NTP to JavaScript representation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Javascript timestamp"
    }
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "AtomicTimetag",
    "memberof": "src/atomic/timetag.js",
    "static": true,
    "longname": "src/atomic/timetag.js~AtomicTimetag",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/timetag.js",
    "importStyle": "AtomicTimetag",
    "description": "64-bit big-endian fixed-point time tag, semantics\ndefined below OSC Atomic Data Type",
    "lineNumber": 63,
    "interface": false,
    "extends": [
      "src/atomic.js~Atomic"
    ]
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic/timetag.js~AtomicTimetag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/timetag.js~AtomicTimetag#constructor",
    "access": "public",
    "description": "Create a AtomicTimetag instance",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "Timetag",
          "Date"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Initial date, leave empty if\nyou want it to be the current date"
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "pack",
    "memberof": "src/atomic/timetag.js~AtomicTimetag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/timetag.js~AtomicTimetag#pack",
    "access": "public",
    "description": "Interpret the given timetag as packed binary data",
    "lineNumber": 87,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/atomic/timetag.js~AtomicTimetag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/timetag.js~AtomicTimetag#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView and read a timetag",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of the timetag"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "value",
    "memberof": "src/atomic/timetag.js~AtomicTimetag",
    "static": false,
    "longname": "src/atomic/timetag.js~AtomicTimetag#value",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "Timetag"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "offset",
    "memberof": "src/atomic/timetag.js~AtomicTimetag",
    "static": false,
    "longname": "src/atomic/timetag.js~AtomicTimetag#offset",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/atomic/uint64.js",
    "content": "import Atomic from '../atomic'\n\nconst MAX_UINT64 = BigInt('18446744073709551615')\n\n/**\n * Unsigned 64-bit big-endian two's complement integer OSC Atomic Data Type\n */\nexport default class AtomicUInt64 extends Atomic {\n  /**\n   * Create an AtomicUInt64 instance\n   * @param {number} [value] Initial integer value\n   */\n  constructor(value) {\n    if (value && typeof value !== 'bigint') {\n      throw new Error('OSC AtomicUInt64 constructor expects value of type BigInt')\n    }\n\n    if (value && (value < 0 || value > MAX_UINT64)) {\n      throw new Error('OSC AtomicUInt64 value is out of bounds')\n    }\n\n    let tmp\n    if (value) {\n      tmp = BigInt.asUintN(64, value)\n    }\n\n    super(tmp)\n  }\n\n  /**\n   * Interpret the given number as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    return super.pack('setBigUint64', 8)\n  }\n\n  /**\n   * Unpack binary data from DataView and read a UInt64 number\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    return super.unpack(dataView, 'getBigUint64', 8, initialOffset)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic/uint64.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "MAX_UINT64",
    "memberof": "src/atomic/uint64.js",
    "static": true,
    "longname": "src/atomic/uint64.js~MAX_UINT64",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/atomic/uint64.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "AtomicUInt64",
    "memberof": "src/atomic/uint64.js",
    "static": true,
    "longname": "src/atomic/uint64.js~AtomicUInt64",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic/uint64.js",
    "importStyle": "AtomicUInt64",
    "description": "Unsigned 64-bit big-endian two's complement integer OSC Atomic Data Type",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/atomic.js~Atomic"
    ]
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic/uint64.js~AtomicUInt64",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/uint64.js~AtomicUInt64#constructor",
    "access": "public",
    "description": "Create an AtomicUInt64 instance",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Initial integer value"
      }
    ]
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "pack",
    "memberof": "src/atomic/uint64.js~AtomicUInt64",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/uint64.js~AtomicUInt64#pack",
    "access": "public",
    "description": "Interpret the given number as packed binary data",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/atomic/uint64.js~AtomicUInt64",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic/uint64.js~AtomicUInt64#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView and read a UInt64 number",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of the value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/atomic.js",
    "content": "import { isUndefined } from './common/utils'\n\n/**\n * Base class for OSC Atomic Data Types\n */\nexport default class Atomic {\n  /**\n   * Create an Atomic instance\n   * @param {*} [value] Initial value of any type\n   */\n  constructor(value) {\n    /** @type {*} value */\n    this.value = value\n    /** @type {number} offset */\n    this.offset = 0\n  }\n\n  /**\n   * Interpret the given value of this entity as packed binary data\n   * @param {string} method The DataView method to write to the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @return {Uint8Array} Packed binary data\n   */\n  pack(method, byteLength) {\n    if (!(method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be packed without given method or byteLength')\n    }\n\n    const data = new Uint8Array(byteLength)\n    const dataView = new DataView(data.buffer)\n\n    if (isUndefined(this.value)) {\n      throw new Error('OSC Atomic cant\\'t be encoded with empty value')\n    }\n\n    // use DataView to write to ArrayBuffer\n    dataView[method](this.offset, this.value, false)\n\n    // always return binary Uint8Array after packing\n    return data\n  }\n\n  /**\n   * Unpack binary data from DataView according to the given format\n   * @param {DataView} dataView The DataView holding the binary representation of the value\n   * @param {string} method The DataView method to read the format from the ArrayBuffer\n   * @param {number} byteLength Size of array in bytes\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, method, byteLength, initialOffset = 0) {\n    if (!(dataView && method && byteLength)) {\n      throw new Error('OSC Atomic cant\\'t be unpacked without given dataView, method or byteLength')\n    }\n\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Atomic expects an instance of type DataView')\n    }\n\n    // use DataView to read from ArrayBuffer and add offset\n    this.value = dataView[method](initialOffset, false)\n    this.offset = initialOffset + byteLength\n\n    // always return offset number after unpacking\n    return this.offset\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/atomic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "class",
    "name": "Atomic",
    "memberof": "src/atomic.js",
    "static": true,
    "longname": "src/atomic.js~Atomic",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/atomic.js",
    "importStyle": "Atomic",
    "description": "Base class for OSC Atomic Data Types",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 116,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/atomic.js~Atomic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic.js~Atomic#constructor",
    "access": "public",
    "description": "Create an Atomic instance",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Initial value of any type"
      }
    ]
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "value",
    "memberof": "src/atomic.js~Atomic",
    "static": false,
    "longname": "src/atomic.js~Atomic#value",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "offset",
    "memberof": "src/atomic.js~Atomic",
    "static": false,
    "longname": "src/atomic.js~Atomic#offset",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "pack",
    "memberof": "src/atomic.js~Atomic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic.js~Atomic#pack",
    "access": "public",
    "description": "Interpret the given value of this entity as packed binary data",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The DataView method to write to the ArrayBuffer"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "byteLength",
        "description": "Size of array in bytes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/atomic.js~Atomic",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/atomic.js~Atomic#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView according to the given format",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of the value"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The DataView method to read the format from the ArrayBuffer"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "byteLength",
        "description": "Size of array in bytes"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/bundle.js",
    "content": "import EncodeHelper from './common/helpers'\nimport { isArray, isInt } from './common/utils'\n\nimport AtomicInt32 from './atomic/int32'\nimport AtomicString from './atomic/string'\nimport AtomicTimetag from './atomic/timetag'\nimport Message from './message'\n\n/** OSC Bundle string */\nexport const BUNDLE_TAG = '#bundle'\n\n/**\n * An OSC Bundle consist of a Timetag and one or many Bundle Elements.\n * The elements are either OSC Messages or more OSC Bundles\n */\nexport default class Bundle {\n  /**\n   * Create a Bundle instance\n   * @param {...*} args Timetag and elements. See examples for options\n   *\n   * @example\n   * const bundle = new Bundle(new Date() + 500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherBundle = new Bundle([message], Date.now() + 1500)\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   * const anotherMessage = new Message('/test/message', 'test', 12)\n   * const anotherBundle = new Bundle(message, anotherMessage)\n   */\n  constructor(...args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {AtomicTimetag} timetag */\n    this.timetag = new AtomicTimetag()\n    /** @type {array} bundleElements */\n    this.bundleElements = []\n\n    if (args.length > 0) {\n      // first argument is an Date or js timestamp (number)\n      if (args[0] instanceof Date || isInt(args[0])) {\n        this.timetag = new AtomicTimetag(args[0])\n      } else if (isArray(args[0])) {\n        // first argument is an Array of Bundle elements\n        args[0].forEach((item) => {\n          this.add(item)\n        })\n\n        // second argument is an Date or js timestamp (number)\n        if (args.length > 1 && (args[1] instanceof Date || isInt(args[1]))) {\n          this.timetag = new AtomicTimetag(args[1])\n        }\n      } else {\n        // take all arguments as Bundle elements\n        args.forEach((item) => {\n          this.add(item)\n        })\n      }\n    }\n  }\n\n  /**\n   * Take a JavaScript timestamp to set the Bundle's timetag\n   * @param {number} ms JS timestamp in milliseconds\n   *\n   * @example\n   * const bundle = new Bundle()\n   * bundle.timestamp(Date.now() + 5000) // in 5 seconds\n   */\n  timestamp(ms) {\n    if (!isInt(ms)) {\n      throw new Error('OSC Bundle needs an integer for setting the timestamp')\n    }\n\n    this.timetag = new AtomicTimetag(ms)\n  }\n\n  /**\n   * Add a Message or Bundle to the list of elements\n   * @param {Bundle|Message} item\n   */\n  add(item) {\n    if (!(item instanceof Message || item instanceof Bundle)) {\n      throw new Error('OSC Bundle contains only Messages and Bundles')\n    }\n\n    this.bundleElements.push(item)\n  }\n\n  /**\n   * Interpret the Bundle as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    const encoder = new EncodeHelper()\n\n    // an OSC Bundle consists of the OSC-string \"#bundle\"\n    encoder.add(new AtomicString(BUNDLE_TAG))\n\n    // followed by an OSC Time Tag\n    if (!this.timetag) {\n      this.timetag = new AtomicTimetag()\n    }\n\n    encoder.add(this.timetag)\n\n    // followed by zero or more OSC Bundle Elements\n    this.bundleElements.forEach((item) => {\n      encoder.add(new AtomicInt32(item.pack().byteLength))\n      encoder.add(item)\n    })\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Bundle\n   * @param {DataView} dataView The DataView holding the binary representation of a Bundle\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Bundle expects an instance of type DataView')\n    }\n\n    // read the beginning bundle string\n    const parentHead = new AtomicString()\n    parentHead.unpack(dataView, initialOffset)\n\n    if (parentHead.value !== BUNDLE_TAG) {\n      throw new Error('OSC Bundle does not contain a valid #bundle head')\n    }\n\n    // read the timetag\n    const timetag = new AtomicTimetag()\n    let offset = timetag.unpack(dataView, parentHead.offset)\n\n    // read the bundle elements\n    this.bundleElements = []\n\n    while (offset < dataView.byteLength) {\n      const head = new AtomicString()\n      const size = new AtomicInt32()\n\n      offset = size.unpack(dataView, offset)\n\n      // check if Packet is a Bundle or a Message\n      let item\n      head.unpack(dataView, offset)\n\n      if (head.value === BUNDLE_TAG) {\n        item = new Bundle()\n      } else {\n        item = new Message()\n      }\n\n      offset = item.unpack(dataView, offset)\n\n      this.bundleElements.push(item)\n    }\n\n    this.offset = offset\n    this.timetag = timetag\n\n    return this.offset\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/bundle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "BUNDLE_TAG",
    "memberof": "src/bundle.js",
    "static": true,
    "longname": "src/bundle.js~BUNDLE_TAG",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/bundle.js",
    "importStyle": "{BUNDLE_TAG}",
    "description": "OSC Bundle string",
    "lineNumber": 10,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "Bundle",
    "memberof": "src/bundle.js",
    "static": true,
    "longname": "src/bundle.js~Bundle",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/bundle.js",
    "importStyle": "Bundle",
    "description": "An OSC Bundle consist of a Timetag and one or many Bundle Elements.\nThe elements are either OSC Messages or more OSC Bundles",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 126,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/bundle.js~Bundle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bundle.js~Bundle#constructor",
    "access": "public",
    "description": "Create a Bundle instance",
    "examples": [
      "const bundle = new Bundle(new Date() + 500)",
      "const message = new Message('/test/path', 51.2)\nconst anotherBundle = new Bundle([message], Date.now() + 1500)",
      "const message = new Message('/test/path', 51.2)\nconst anotherMessage = new Message('/test/message', 'test', 12)\nconst anotherBundle = new Bundle(message, anotherMessage)"
    ],
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Timetag and elements. See examples for options"
      }
    ]
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "offset",
    "memberof": "src/bundle.js~Bundle",
    "static": false,
    "longname": "src/bundle.js~Bundle#offset",
    "access": "private",
    "description": "",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "timetag",
    "memberof": "src/bundle.js~Bundle",
    "static": false,
    "longname": "src/bundle.js~Bundle#timetag",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "AtomicTimetag"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "bundleElements",
    "memberof": "src/bundle.js~Bundle",
    "static": false,
    "longname": "src/bundle.js~Bundle#bundleElements",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "timestamp",
    "memberof": "src/bundle.js~Bundle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bundle.js~Bundle#timestamp",
    "access": "public",
    "description": "Take a JavaScript timestamp to set the Bundle's timetag",
    "examples": [
      "const bundle = new Bundle()\nbundle.timestamp(Date.now() + 5000) // in 5 seconds"
    ],
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ms",
        "description": "JS timestamp in milliseconds"
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "add",
    "memberof": "src/bundle.js~Bundle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bundle.js~Bundle#add",
    "access": "public",
    "description": "Add a Message or Bundle to the list of elements",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "Bundle",
          "Message"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "pack",
    "memberof": "src/bundle.js~Bundle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bundle.js~Bundle#pack",
    "access": "public",
    "description": "Interpret the Bundle as packed binary data",
    "lineNumber": 99,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/bundle.js~Bundle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/bundle.js~Bundle#unpack",
    "access": "public",
    "description": "Unpack binary data to read a Bundle",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding the binary representation of a Bundle"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/common/helpers.js",
    "content": "import {\n  isArray,\n  isBlob,\n  isBoolean,\n  isFloat,\n  isInfinity,\n  isInt,\n  isNull,\n  isString,\n} from './utils'\n\n/**\n * Checks type of given object and returns the regarding OSC\n * Type tag character\n * @param {*} item Any object\n * @return {string} OSC Type tag character\n */\nexport function typeTag(item) {\n  if (isInt(item)) {\n    return 'i'\n  } else if (isFloat(item)) {\n    return 'f'\n  } else if (isString(item)) {\n    return 's'\n  } else if (isBlob(item)) {\n    return 'b'\n  } else if (isBoolean(item)) {\n    return item ? 'T' : 'F'\n  } else if (isNull(item)) {\n    return 'N'\n  } else if (isInfinity(item)) {\n    return 'I'\n  }\n\n  throw new Error('OSC typeTag() found unknown value type')\n}\n\n/**\n * Sanitizes an OSC-ready Address Pattern\n * @param {string[]|string} obj Address as string or array of strings\n * @return {string} Corrected address string\n *\n * @example\n * // all calls return '/test/path' string:\n * prepareAddress('test/path')\n * prepareAddress('/test/path/')\n * prepareAddress([test, path])\n */\nexport function prepareAddress(obj) {\n  let address = ''\n\n  if (isArray(obj)) {\n    return `/${obj.join('/')}`\n  } else if (isString(obj)) {\n    address = obj\n\n    // remove slash at ending of address\n    if (address.length > 1 && address[address.length - 1] === '/') {\n      address = address.slice(0, address.length - 1)\n    }\n\n    // add slash at beginning of address\n    if (address.length > 1 && address[0] !== '/') {\n      address = `/${address}`\n    }\n\n    return address\n  }\n\n  throw new Error('OSC prepareAddress() needs addresses of type array or string')\n}\n\n/**\n * Make an OSC address pattern javascript-regex-ready\n * @param {string} str OSC address pattern\n * @return {string} Javascript RegEx string\n */\nexport function prepareRegExPattern(str) {\n  let pattern\n\n  if (!(isString(str))) {\n    throw new Error('OSC prepareRegExPattern() needs strings')\n  }\n\n  pattern = str.replace(/\\./g, '\\\\.')\n  pattern = pattern.replace(/\\(/g, '\\\\(')\n  pattern = pattern.replace(/\\)/g, '\\\\)')\n\n  pattern = pattern.replace(/\\{/g, '(')\n  pattern = pattern.replace(/\\}/g, ')')\n  pattern = pattern.replace(/,/g, '|')\n\n  pattern = pattern.replace(/\\[!/g, '[^')\n\n  pattern = pattern.replace(/\\?/g, '.')\n  pattern = pattern.replace(/\\*/g, '.*')\n\n  return pattern\n}\n\n/**\n * Holds a list of items and helps to merge them\n * into a single array of packed binary data\n */\nexport default class EncodeHelper {\n  /**\n   * Create a new EncodeHelper instance\n   */\n  constructor() {\n    /** @type {array} data */\n    this.data = []\n    /** @type {number} byteLength */\n    this.byteLength = 0\n  }\n\n  /**\n   * Packs an item and adds it to the list\n   * @param {*} item Any object\n   * @return {EncodeHelper}\n   */\n  add(item) {\n    // Skip encoding items which do not need a payload as they are constants\n    if (isBoolean(item) || isInfinity(item) || isNull(item)) {\n      return this\n    }\n\n    const buffer = item.pack()\n    this.byteLength += buffer.byteLength\n    this.data.push(buffer)\n\n    return this\n  }\n\n  /**\n   * Merge all added items into one Uint8Array\n   * @return {Uint8Array} Merged binary data array of all items\n   */\n  merge() {\n    const result = new Uint8Array(this.byteLength)\n    let offset = 0\n\n    this.data.forEach((data) => {\n      result.set(data, offset)\n      offset += data.byteLength\n    })\n\n    return result\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/common/helpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "typeTag",
    "memberof": "src/common/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/helpers.js~typeTag",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/helpers.js",
    "importStyle": "{typeTag}",
    "description": "Checks type of given object and returns the regarding OSC\nType tag character",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "Any object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "OSC Type tag character"
    }
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "prepareAddress",
    "memberof": "src/common/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/helpers.js~prepareAddress",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/helpers.js",
    "importStyle": "{prepareAddress}",
    "description": "Sanitizes an OSC-ready Address Pattern",
    "examples": [
      "// all calls return '/test/path' string:\nprepareAddress('test/path')\nprepareAddress('/test/path/')\nprepareAddress([test, path])"
    ],
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Address as string or array of strings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Corrected address string"
    }
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "prepareRegExPattern",
    "memberof": "src/common/helpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/helpers.js~prepareRegExPattern",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/helpers.js",
    "importStyle": "{prepareRegExPattern}",
    "description": "Make an OSC address pattern javascript-regex-ready",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "OSC address pattern"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Javascript RegEx string"
    }
  },
  {
    "__docId__": 145,
    "kind": "class",
    "name": "EncodeHelper",
    "memberof": "src/common/helpers.js",
    "static": true,
    "longname": "src/common/helpers.js~EncodeHelper",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/helpers.js",
    "importStyle": "EncodeHelper",
    "description": "Holds a list of items and helps to merge them\ninto a single array of packed binary data",
    "lineNumber": 105,
    "interface": false
  },
  {
    "__docId__": 146,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/common/helpers.js~EncodeHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/common/helpers.js~EncodeHelper#constructor",
    "access": "public",
    "description": "Create a new EncodeHelper instance",
    "lineNumber": 109
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "data",
    "memberof": "src/common/helpers.js~EncodeHelper",
    "static": false,
    "longname": "src/common/helpers.js~EncodeHelper#data",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "byteLength",
    "memberof": "src/common/helpers.js~EncodeHelper",
    "static": false,
    "longname": "src/common/helpers.js~EncodeHelper#byteLength",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "add",
    "memberof": "src/common/helpers.js~EncodeHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/common/helpers.js~EncodeHelper#add",
    "access": "public",
    "description": "Packs an item and adds it to the list",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "Any object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EncodeHelper"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "merge",
    "memberof": "src/common/helpers.js~EncodeHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/common/helpers.js~EncodeHelper#merge",
    "access": "public",
    "description": "Merge all added items into one Uint8Array",
    "lineNumber": 138,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Merged binary data array of all items"
    },
    "params": []
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "src/common/utils.js",
    "content": "/**\n * Check if given object is an integer number\n * @param {*} n\n * @return {boolean}\n */\nexport function isInt(n) {\n  return Number(n) === n && n % 1 === 0\n}\n\n/**\n * Check if given object is a float number\n * @param {*} n\n * @return {boolean}\n */\nexport function isFloat(n) {\n  return Number(n) === n && n % 1 !== 0\n}\n\n/**\n * Check if given object is a number\n * @param {*} n\n * @return {boolean}\n */\nexport function isNumber(n) {\n  return Number(n) === n\n}\n\n/**\n * Check if given object is a string\n * @param {*} n\n * @return {boolean}\n */\nexport function isString(n) {\n  return typeof n === 'string'\n}\n\n/**\n * Check if given object is a boolean\n * @param {*} n\n * @return {boolean}\n */\nexport function isBoolean(n) {\n  return typeof n === 'boolean'\n}\n\n/**\n * Check if given object is infinity constant\n * @param {*} n\n * @return {boolean}\n */\nexport function isInfinity(n) {\n  return n === Infinity\n}\n\n/**\n * Check if given object is an array\n * @param {*} n\n * @return {boolean}\n */\nexport function isArray(n) {\n  return Object.prototype.toString.call(n) === '[object Array]'\n}\n\n/**\n * Check if given object is an object\n * @param {*} n\n * @return {boolean}\n */\nexport function isObject(n) {\n  return Object.prototype.toString.call(n) === '[object Object]'\n}\n\n/**\n * Check if given object is a function\n * @param {*} n\n * @return {boolean}\n */\nexport function isFunction(n) {\n  return typeof n === 'function'\n}\n\n/**\n * Check if given object is a Uint8Array\n * @param {*} n\n * @return {boolean}\n */\nexport function isBlob(n) {\n  return n instanceof Uint8Array\n}\n\n/**\n * Check if given object is a Date\n * @param {*} n\n * @return {boolean}\n */\nexport function isDate(n) {\n  return n instanceof Date\n}\n\n/**\n * Check if given object is undefined\n * @param {*} n\n * @return {boolean}\n */\nexport function isUndefined(n) {\n  return typeof n === 'undefined'\n}\n\n/**\n * Check if given object is null\n * @param {*} n\n * @return {boolean}\n */\nexport function isNull(n) {\n  return n === null\n}\n\n/**\n * Return the next multiple of four\n * @param {number} n\n */\nexport function pad(n) {\n  return (n + 3) & ~0x03\n}\n\n/**\n * Checks if environment provides a feature\n * @param {string} name Name of needed feature\n * @return {boolean}\n */\nexport function hasProperty(name) {\n  return Object.prototype.hasOwnProperty.call(\n    (typeof global !== 'undefined' ? global : window), // eslint-disable-line no-undef\n    name,\n  )\n}\n\n/**\n * Wrap binary data in DataView\n * @param {*} obj\n * @return {DataView}\n */\nexport function dataView(obj) {\n  if (obj.buffer) {\n    return new DataView(obj.buffer)\n  } else if (obj instanceof ArrayBuffer) {\n    return new DataView(obj)\n  }\n\n  return new DataView(new Uint8Array(obj))\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/common/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "isInt",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isInt",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isInt}",
    "description": "Check if given object is an integer number",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "isFloat",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isFloat",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isFloat}",
    "description": "Check if given object is a float number",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "isNumber",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isNumber",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isNumber}",
    "description": "Check if given object is a number",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "isString",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isString",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isString}",
    "description": "Check if given object is a string",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "isBoolean",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isBoolean",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isBoolean}",
    "description": "Check if given object is a boolean",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "isInfinity",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isInfinity",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isInfinity}",
    "description": "Check if given object is infinity constant",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "isArray",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isArray",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isArray}",
    "description": "Check if given object is an array",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isObject}",
    "description": "Check if given object is an object",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isFunction}",
    "description": "Check if given object is a function",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "isBlob",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isBlob",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isBlob}",
    "description": "Check if given object is a Uint8Array",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "isDate",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isDate",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isDate}",
    "description": "Check if given object is a Date",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "isUndefined",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isUndefined",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isUndefined}",
    "description": "Check if given object is undefined",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "isNull",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~isNull",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{isNull}",
    "description": "Check if given object is null",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "pad",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~pad",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{pad}",
    "description": "Return the next multiple of four",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "hasProperty",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~hasProperty",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{hasProperty}",
    "description": "Checks if environment provides a feature",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of needed feature"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "dataView",
    "memberof": "src/common/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/common/utils.js~dataView",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/common/utils.js",
    "importStyle": "{dataView}",
    "description": "Wrap binary data in DataView",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataView"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "src/events.js",
    "content": "import {\n  dataView,\n  isArray,\n  isFunction,\n  isInt,\n  isString,\n} from './common/utils'\n\nimport {\n  prepareAddress,\n  prepareRegExPattern,\n} from './common/helpers'\n\nimport Bundle from './bundle'\nimport Message from './message'\nimport Packet from './packet'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  discardLateMessages: false,\n}\n\n/**\n * EventHandler to notify listeners on matching OSC messages and\n * status changes of plugins\n */\nexport default class EventHandler {\n  /**\n   * Create an EventHandler instance\n   * @param {object} options Custom options\n   */\n  constructor(options) {\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n    /**\n     * @type {array} addressHandlers\n     * @private\n     */\n    this.addressHandlers = []\n    /**\n     * @type {object} eventHandlers\n     * @private\n     */\n    this.eventHandlers = {\n      open: [],\n      error: [],\n      close: [],\n    }\n    /**\n     * @type {number} uuid\n     * @private\n     */\n    this.uuid = 0\n  }\n\n  /**\n   * Internally used method to dispatch OSC Packets. Extracts\n   * given Timetags and dispatches them accordingly\n   * @param {Packet} packet\n   * @param {*} [rinfo] Remote address info\n   * @return {boolean} Success state\n   * @private\n   */\n  dispatch(packet, rinfo) {\n    if (!(packet instanceof Packet)) {\n      throw new Error('OSC EventHander dispatch() accepts only arguments of type Packet')\n    }\n\n    if (!packet.value) {\n      throw new Error('OSC EventHander dispatch() can\\'t read empty Packets')\n    }\n\n    if (packet.value instanceof Bundle) {\n      const bundle = packet.value\n\n      return bundle.bundleElements.forEach((bundleItem) => {\n        if (bundleItem instanceof Bundle) {\n          if (bundle.timetag.value.timestamp() < bundleItem.timetag.value.timestamp()) {\n            throw new Error('OSC Bundle timestamp is older than the timestamp of enclosed Bundles')\n          }\n          return this.dispatch(new Packet(bundleItem))\n        } else if (bundleItem instanceof Message) {\n          const message = bundleItem\n          return this.notify(\n            message.address,\n            message,\n            bundle.timetag.value.timestamp(),\n            rinfo,\n          )\n        }\n\n        throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n      })\n    } else if (packet.value instanceof Message) {\n      const message = packet.value\n      return this.notify(message.address, message, 0, rinfo)\n    }\n\n    throw new Error('OSC EventHander dispatch() can\\'t dispatch unknown Packet value')\n  }\n\n  /**\n   * Internally used method to invoke listener callbacks. Uses regular\n   * expression pattern matching for OSC addresses\n   * @param {string} name OSC address or event name\n   * @param {*} [data] The data of the event\n   * @param {*} [rinfo] Remote address info\n   * @return {boolean} Success state\n   * @private\n   */\n  call(name, data, rinfo) {\n    let success = false\n\n    // call event handlers\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].forEach((handler) => {\n        handler.callback(data, rinfo)\n        success = true\n      })\n\n      return success\n    }\n\n    // call address handlers\n    const handlerKeys = Object.keys(this.addressHandlers)\n    const handlers = this.addressHandlers\n\n    handlerKeys.forEach((key) => {\n      let foundMatch = false\n\n      const regex = new RegExp(prepareRegExPattern(prepareAddress(name)), 'g')\n      const test = regex.test(key)\n\n      // found a matching address in our callback handlers\n      if (test && key.length === regex.lastIndex) {\n        foundMatch = true\n      }\n\n      if (!foundMatch) {\n        // try matching address from callback handlers (when given)\n        const reverseRegex = new RegExp(prepareRegExPattern(prepareAddress(key)), 'g')\n        const reverseTest = reverseRegex.test(name)\n\n        if (reverseTest && name.length === reverseRegex.lastIndex) {\n          foundMatch = true\n        }\n      }\n\n      if (foundMatch) {\n        handlers[key].forEach((handler) => {\n          handler.callback(data, rinfo)\n          success = true\n        })\n      }\n    })\n\n    return success\n  }\n\n  /**\n   * Notify the EventHandler of incoming OSC messages or status\n   * changes (*open*, *close*, *error*). Handles OSC address patterns\n   * and executes timed messages. Use binary arrays when\n   * handling directly incoming network data. Packet's or Messages can\n   * also be used\n   * @param {...*} args\n   * The OSC address pattern / event name as string}. For convenience and\n   * Plugin API communication you can also use Message or Packet instances\n   * or ArrayBuffer, Buffer instances (low-level access). The latter will\n   * automatically be unpacked\n   * When using a string you can also pass on data as a second argument\n   * (any type). All regarding listeners will be notified with this data.\n   * As a third argument you can define a javascript timestamp (number or\n   * Date instance) for timed notification of the listeners.\n   * @return {boolean} Success state of notification\n   *\n   * @example\n   * const socket = dgram.createSocket('udp4')\n   * socket.on('message', (message) => {\n   *   this.notify(message)\n   * })\n   *\n   * @example\n   * this.notify('error', error.message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * this.notify(message)\n   *\n   * @example\n   * const message = new OSC.Message('/test/path', 55)\n   * // override timestamp\n   * this.notify(message.address, message, Date.now() + 5000)\n   */\n  notify(...args) {\n    if (args.length === 0) {\n      throw new Error('OSC EventHandler can not be called without any argument')\n    }\n\n    // check for incoming dispatchable OSC data\n    if (args[0] instanceof Packet) {\n      return this.dispatch(args[0], args[1])\n    } else if (args[0] instanceof Bundle || args[0] instanceof Message) {\n      return this.dispatch(new Packet(args[0]), args[1])\n    } else if (!isString(args[0])) {\n      const packet = new Packet()\n      packet.unpack(dataView(args[0]))\n      return this.dispatch(packet, args[1])\n    }\n\n    const name = args[0]\n\n    // data argument\n    let data = null\n\n    if (args.length > 1) {\n      data = args[1]\n    }\n\n    // timestamp argument\n    let timestamp = null\n\n    if (args.length > 2) {\n      if (isInt(args[2])) {\n        timestamp = args[2]\n      } else if (args[2] instanceof Date) {\n        timestamp = args[2].getTime()\n      } else {\n        throw new Error('OSC EventHandler timestamp has to be a number or Date')\n      }\n    }\n\n    // remote address info\n    let rinfo = null\n\n    if (args.length >= 3) {\n      rinfo = args[3]\n    }\n\n    // notify now or later\n    if (timestamp) {\n      const now = Date.now()\n\n      // is message outdated?\n      if (now > timestamp) {\n        if (!this.options.discardLateMessages) {\n          return this.call(name, data, rinfo)\n        }\n      }\n\n      // notify later\n      const that = this\n\n      setTimeout(() => {\n        that.call(name, data, rinfo)\n      }, timestamp - now)\n\n      return true\n    }\n\n    return this.call(name, data, rinfo)\n  }\n\n  /**\n   * Subscribe to a new address or event you want to listen to\n   * @param {string} name The OSC address or event name\n   * @param {function} callback Callback function on notification\n   * @return {number} Subscription identifier (needed to unsubscribe)\n   */\n  on(name, callback) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error('OSC EventHandler callback has to be a function')\n    }\n\n    // get next id\n    this.uuid += 1\n\n    // prepare handler\n    const handler = {\n      id: this.uuid,\n      callback,\n    }\n\n    // register event listener\n    if (isString(name) && name in this.eventHandlers) {\n      this.eventHandlers[name].push(handler)\n      return this.uuid\n    }\n\n    // register address listener\n    const address = prepareAddress(name)\n\n    if (!(address in this.addressHandlers)) {\n      this.addressHandlers[address] = []\n    }\n\n    this.addressHandlers[address].push(handler)\n\n    return this.uuid\n  }\n\n  /**\n   * Unsubscribe listener from event notification or address handler\n   * @param {string} name The OSC address or event name\n   * @param {number} subscriptionId Subscription id to identify the handler\n   * @return {boolean} Success state\n   */\n  off(name, subscriptionId) {\n    if (!(isString(name) || isArray(name))) {\n      throw new Error('OSC EventHandler accepts only strings or arrays for address patterns')\n    }\n\n    if (!isInt(subscriptionId)) {\n      throw new Error('OSC EventHandler subscription id has to be a number')\n    }\n\n    let key\n    let haystack\n\n    // event or address listener\n    if (isString(name) && name in this.eventHandlers) {\n      key = name\n      haystack = this.eventHandlers\n    } else {\n      key = prepareAddress(name)\n      haystack = this.addressHandlers\n    }\n\n    // remove the entry\n    if (key in haystack) {\n      return haystack[key].some((item, index) => {\n        if (item.id === subscriptionId) {\n          haystack[key].splice(index, 1)\n          return true\n        }\n\n        return false\n      })\n    }\n\n    return false\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "defaultOptions",
    "memberof": "src/events.js",
    "static": true,
    "longname": "src/events.js~defaultOptions",
    "access": "private",
    "export": false,
    "importPath": "osc-js/src/events.js",
    "importStyle": null,
    "description": "Default options",
    "lineNumber": 22,
    "type": {
      "types": [
        "{\"discardLateMessages\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "class",
    "name": "EventHandler",
    "memberof": "src/events.js",
    "static": true,
    "longname": "src/events.js~EventHandler",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/events.js",
    "importStyle": "EventHandler",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 172,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.js~EventHandler#constructor",
    "access": "public",
    "description": "Create an EventHandler instance",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Custom options"
      }
    ]
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "options",
    "memberof": "src/events.js~EventHandler",
    "static": false,
    "longname": "src/events.js~EventHandler#options",
    "access": "private",
    "description": "",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "addressHandlers",
    "memberof": "src/events.js~EventHandler",
    "static": false,
    "longname": "src/events.js~EventHandler#addressHandlers",
    "access": "private",
    "description": "",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "eventHandlers",
    "memberof": "src/events.js~EventHandler",
    "static": false,
    "longname": "src/events.js~EventHandler#eventHandlers",
    "access": "private",
    "description": "",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "uuid",
    "memberof": "src/events.js~EventHandler",
    "static": false,
    "longname": "src/events.js~EventHandler#uuid",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "dispatch",
    "memberof": "src/events.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.js~EventHandler#dispatch",
    "access": "private",
    "description": "Internally used method to dispatch OSC Packets. Extracts\ngiven Timetags and dispatches them accordingly",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Packet"
        ],
        "spread": false,
        "optional": false,
        "name": "packet",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "rinfo",
        "description": "Remote address info"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Success state"
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "call",
    "memberof": "src/events.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.js~EventHandler#call",
    "access": "private",
    "description": "Internally used method to invoke listener callbacks. Uses regular\nexpression pattern matching for OSC addresses",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "OSC address or event name"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "The data of the event"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "rinfo",
        "description": "Remote address info"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Success state"
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "notify",
    "memberof": "src/events.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.js~EventHandler#notify",
    "access": "public",
    "description": "Notify the EventHandler of incoming OSC messages or status\nchanges (*open*, *close*, *error*). Handles OSC address patterns\nand executes timed messages. Use binary arrays when\nhandling directly incoming network data. Packet's or Messages can\nalso be used",
    "examples": [
      "const socket = dgram.createSocket('udp4')\nsocket.on('message', (message) => {\n  this.notify(message)\n})",
      "this.notify('error', error.message)",
      "const message = new OSC.Message('/test/path', 55)\nthis.notify(message)",
      "const message = new OSC.Message('/test/path', 55)\n// override timestamp\nthis.notify(message.address, message, Date.now() + 5000)"
    ],
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "...*"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "The OSC address pattern / event name as string}. For convenience and\nPlugin API communication you can also use Message or Packet instances\nor ArrayBuffer, Buffer instances (low-level access). The latter will\nautomatically be unpacked\nWhen using a string you can also pass on data as a second argument\n(any type). All regarding listeners will be notified with this data.\nAs a third argument you can define a javascript timestamp (number or\nDate instance) for timed notification of the listeners."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Success state of notification"
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "on",
    "memberof": "src/events.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.js~EventHandler#on",
    "access": "public",
    "description": "Subscribe to a new address or event you want to listen to",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The OSC address or event name"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function on notification"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Subscription identifier (needed to unsubscribe)"
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "off",
    "memberof": "src/events.js~EventHandler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events.js~EventHandler#off",
    "access": "public",
    "description": "Unsubscribe listener from event notification or address handler",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The OSC address or event name"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "Subscription id to identify the handler"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Success state"
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "src/external/dgram.js",
    "content": "// This file gets used instead of the NodeJS `dgram` module during rollup\n// builds targeting browser environments. It simply returns \"nothing\".\nconst noop = undefined\nexport default noop\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/external/dgram.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "noop",
    "memberof": "src/external/dgram.js",
    "static": true,
    "longname": "src/external/dgram.js~noop",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/external/dgram.js",
    "importStyle": "noop",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/external/ws.js",
    "content": "// This file gets used instead of the `ws` package during rollup builds\n// targeting browser environments.\n/* eslint-disable no-undef */\n/* eslint-disable no-restricted-globals */\nfunction fillWs() {\n  if (typeof WebSocket !== 'undefined') {\n    return WebSocket\n  } else if (typeof MozWebSocket !== 'undefined') {\n    return MozWebSocket\n  } else if (typeof global !== 'undefined') {\n    return global.WebSocket || global.MozWebSocket\n  } else if (typeof window !== 'undefined') {\n    return window.WebSocket || window.MozWebSocket\n  } else if (typeof self !== 'undefined') {\n    return self.WebSocket || self.MozWebSocket\n  }\n  return undefined\n}\n/* eslint-enable no-undef */\n/* eslint-enable no-restricted-globals */\n\nconst ws = fillWs()\n\n/**\n * Do not export server for browser environments.\n * @private\n */\nexport const WebSocketServer = undefined\n\n/**\n * Return WebSocket client for browser environments.\n * @private\n */\nexport default ws\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/external/ws.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "fillWs",
    "memberof": "src/external/ws.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/external/ws.js~fillWs",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/external/ws.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "WebSocketServer",
    "memberof": "src/external/ws.js",
    "static": true,
    "longname": "src/external/ws.js~WebSocketServer",
    "access": "private",
    "export": true,
    "importPath": "osc-js/src/external/ws.js",
    "importStyle": "{WebSocketServer}",
    "description": "Do not export server for browser environments.",
    "lineNumber": 28,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "ws",
    "memberof": "src/external/ws.js",
    "static": true,
    "longname": "src/external/ws.js~ws",
    "access": "private",
    "export": true,
    "importPath": "osc-js/src/external/ws.js",
    "importStyle": "ws",
    "description": "Return WebSocket client for browser environments.",
    "lineNumber": 22,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/message.js",
    "content": "import {\n  isArray,\n  isString,\n  isUndefined,\n} from './common/utils'\n\nimport Helper, { typeTag, prepareAddress } from './common/helpers'\n\nimport AtomicBlob from './atomic/blob'\nimport AtomicFloat32 from './atomic/float32'\nimport AtomicFloat64 from './atomic/float64'\nimport AtomicInt32 from './atomic/int32'\nimport AtomicInt64 from './atomic/int64'\nimport AtomicUInt64 from './atomic/uint64'\nimport AtomicString from './atomic/string'\nimport {\n  VALUE_NONE, VALUE_TRUE, VALUE_FALSE, VALUE_INFINITY,\n} from './atomic/constant'\n\n/**\n * A TypedMessage consists of an OSC address and an optional array of typed OSC arguments.\n *\n * @typedef {'i'|'f'|'s'|'b'|'h'|'t'|'d'|'T'|'F'|'N'|'I'} MessageArgType\n *\n * - `i` - int32\n * - `f` - float32\n * - `s` - string\n * - `b` - blob\n * - `h` - int64\n * - `t` - uint64\n * - `d` - double\n * - `T` - True (no argument data)\n * - `F` - False (no argument data)\n * - `N` - Nil (no argument data)\n * - `I` - Infinitum (no argument data)\n *\n * @typedef {number|string|Blob|VALUE_TRUE|VALUE_FALSE|VALUE_NONE|VALUE_INFINITY} MessageArgValue\n *\n * @typedef {object} MessageArgObject\n * @property {MessageArgType} type\n * @property {MessageArgValue} value\n *\n * @example\n * const messageArgObject = {\n *   type: 'i', value: 123\n * }\n */\nexport class TypedMessage {\n  /**\n   * Create a TypedMessage instance\n   * @param {string[]|string} address Address\n   * @param {MessageArgValue[]} args Arguments\n   *\n   * @example\n   * const message = new TypedMessage(['test', 'path'])\n   * message.add('d', 123.123456789)\n   * message.add('s', 'hello')\n   *\n   * @example\n   * const message = new TypedMessage('/test/path', [\n   *   { type: 'i', value: 123 },\n   *   { type: 'd', value: 123.123 },\n   *   { type: 'h', value: 0xFFFFFFn },\n   *   { type: 'T', value: null },\n   * ])\n   */\n  constructor(address, args) {\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n    /** @type {string} address */\n    this.address = ''\n    /** @type {string} types */\n    this.types = ''\n    /** @type {MessageArgValue[]} args */\n    this.args = []\n\n    if (!isUndefined(address)) {\n      if (!(isString(address) || isArray(address))) {\n        throw new Error('OSC Message constructor first argument (address) must be a string or array')\n      }\n      this.address = prepareAddress(address)\n    }\n\n    if (!isUndefined(args)) {\n      if (!isArray(args)) {\n        throw new Error('OSC Message constructor second argument (args) must be an array')\n      }\n      args.forEach((item) => this.add(item.type, item.value))\n    }\n  }\n\n  /**\n   * Add an OSC Atomic Data Type to the list of elements\n   * @param {MessageArgType} type\n   * @param {MessageArgValue} item\n   */\n  add(type, item) {\n    if (isUndefined(type)) {\n      throw new Error('OSC Message needs a valid OSC Atomic Data Type')\n    }\n\n    if (type === 'N') {\n      this.args.push(VALUE_NONE)\n    } else if (type === 'T') {\n      this.args.push(VALUE_TRUE)\n    } else if (type === 'F') {\n      this.args.push(VALUE_FALSE)\n    } else if (type === 'I') {\n      this.args.push(VALUE_INFINITY)\n    } else {\n      this.args.push(item)\n    }\n\n    this.types += type\n  }\n\n  /**\n   * Interpret the Message as packed binary data\n   * @return {Uint8Array} Packed binary data\n   */\n  pack() {\n    if (this.address.length === 0 || this.address[0] !== '/') {\n      throw new Error('OSC Message has an invalid address')\n    }\n\n    const encoder = new Helper()\n\n    // OSC Address Pattern and Type string\n    encoder.add(new AtomicString(this.address))\n    encoder.add(new AtomicString(`,${this.types}`))\n\n    // followed by zero or more OSC Arguments\n    if (this.args.length > 0) {\n      let argument\n\n      if (this.args.length > this.types.length) {\n        throw new Error('OSC Message argument and type tag mismatch')\n      }\n\n      this.args.forEach((value, index) => {\n        const type = this.types[index]\n        if (type === 'i') {\n          argument = new AtomicInt32(value)\n        } else if (type === 'h') {\n          argument = new AtomicInt64(value)\n        } else if (type === 't') {\n          argument = new AtomicUInt64(value)\n        } else if (type === 'f') {\n          argument = new AtomicFloat32(value)\n        } else if (type === 'd') {\n          argument = new AtomicFloat64(value)\n        } else if (type === 's') {\n          argument = new AtomicString(value)\n        } else if (type === 'b') {\n          argument = new AtomicBlob(value)\n        } else if (type === 'T') {\n          argument = VALUE_TRUE\n        } else if (type === 'F') {\n          argument = VALUE_FALSE\n        } else if (type === 'N') {\n          argument = VALUE_NONE\n        } else if (type === 'I') {\n          argument = VALUE_INFINITY\n        } else {\n          throw new Error('OSC Message found unknown argument type')\n        }\n\n        encoder.add(argument)\n      })\n    }\n\n    return encoder.merge()\n  }\n\n  /**\n   * Unpack binary data to read a Message\n   * @param {DataView} dataView The DataView holding the binary representation of a Message\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Message expects an instance of type DataView.')\n    }\n\n    // read address pattern\n    const address = new AtomicString()\n    address.unpack(dataView, initialOffset)\n\n    // read type string\n    const types = new AtomicString()\n    types.unpack(dataView, address.offset)\n\n    if (address.value.length === 0 || address.value[0] !== '/') {\n      throw new Error('OSC Message found malformed or missing address string')\n    }\n\n    if (types.value.length === 0 && types.value[0] !== ',') {\n      throw new Error('OSC Message found malformed or missing type string')\n    }\n\n    let { offset } = types\n    let next\n    let type\n\n    const args = []\n\n    // read message arguments (OSC Atomic Data Types)\n    for (let i = 1; i < types.value.length; i += 1) {\n      type = types.value[i]\n      next = null\n\n      if (type === 'i') {\n        next = new AtomicInt32()\n      } else if (type === 'h') {\n        next = new AtomicInt64()\n      } else if (type === 't') {\n        next = new AtomicUInt64()\n      } else if (type === 'f') {\n        next = new AtomicFloat32()\n      } else if (type === 'd') {\n        next = new AtomicFloat64()\n      } else if (type === 's') {\n        next = new AtomicString()\n      } else if (type === 'b') {\n        next = new AtomicBlob()\n      } else if (type === 'T') {\n        args.push(VALUE_TRUE)\n      } else if (type === 'F') {\n        args.push(VALUE_FALSE)\n      } else if (type === 'N') {\n        args.push(VALUE_NONE)\n      } else if (type === 'I') {\n        args.push(VALUE_INFINITY)\n      } else {\n        throw new Error('OSC Message found unsupported argument type')\n      }\n\n      if (next) {\n        offset = next.unpack(dataView, offset)\n        args.push(next.value)\n      }\n    }\n\n    this.offset = offset\n    this.address = address.value\n    this.types = types.value\n    this.args = args\n\n    return this.offset\n  }\n}\n\n/**\n * An OSC message consists of an OSC Address Pattern followed\n * by an OSC Type Tag String followed by zero or more OSC Arguments\n */\nexport default class Message extends TypedMessage {\n  /**\n   * Create a Message instance\n   * @param {string[]|string} address Address\n   * @param {...MessageArgValue} args OSC Atomic Data Types\n   *\n   * @example\n   * const message = new Message(['test', 'path'], 50, 100.52, 'test')\n   *\n   * @example\n   * const message = new Message('/test/path', 51.2)\n   */\n  constructor(address, ...args) {\n    let oscArgs\n    if (args.length > 0) {\n      if (args[0] instanceof Array) {\n        oscArgs = args.shift()\n      }\n    }\n\n    super(address, oscArgs)\n\n    if (args.length > 0) {\n      this.types = args.map((item) => typeTag(item)).join('')\n      this.args = args\n    }\n  }\n\n  /**\n   * Add an OSC Atomic Data Type to the list of elements\n   * @param {MessageArgValue} item\n   */\n  add(item) {\n    super.add(typeTag(item), item)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "typedef",
    "name": "MessageArgObject",
    "memberof": "src/message.js",
    "static": true,
    "longname": "src/message.js~MessageArgObject",
    "access": "public",
    "description": "A TypedMessage consists of an OSC address and an optional array of typed OSC arguments.",
    "examples": [
      "const messageArgObject = {\n  type: 'i', value: 123\n}"
    ],
    "lineNumber": 48,
    "properties": [
      {
        "nullable": null,
        "types": [
          "MessageArgType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "MessageArgValue"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "MessageArgObject"
    }
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "Message",
    "memberof": "src/message.js",
    "static": true,
    "longname": "src/message.js~Message",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/message.js",
    "importStyle": "Message",
    "description": "An OSC message consists of an OSC Address Pattern followed\nby an OSC Type Tag String followed by zero or more OSC Arguments",
    "lineNumber": 261,
    "interface": false,
    "extends": [
      "TypedMessage"
    ]
  },
  {
    "__docId__": 192,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/message.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/message.js~Message#constructor",
    "access": "public",
    "description": "Create a Message instance",
    "examples": [
      "const message = new Message(['test', 'path'], 50, 100.52, 'test')",
      "const message = new Message('/test/path', 51.2)"
    ],
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "Address"
      },
      {
        "nullable": null,
        "types": [
          "...MessageArgValue"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "OSC Atomic Data Types"
      }
    ]
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "types",
    "memberof": "src/message.js~Message",
    "static": false,
    "longname": "src/message.js~Message#types",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "args",
    "memberof": "src/message.js~Message",
    "static": false,
    "longname": "src/message.js~Message#args",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "add",
    "memberof": "src/message.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/message.js~Message#add",
    "access": "public",
    "description": "Add an OSC Atomic Data Type to the list of elements",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "MessageArgValue"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/osc.js",
    "content": "import {\n  isFunction,\n  isInt,\n  isObject,\n  isString,\n} from './common/utils'\n\nimport Bundle from './bundle'\nimport EventHandler from './events'\nimport Message, { TypedMessage } from './message'\nimport Packet from './packet'\n\nimport DatagramPlugin from './plugin/dgram'\nimport BridgePlugin from './plugin/bridge'\nimport WebsocketClientPlugin from './plugin/wsclient'\nimport WebsocketServerPlugin from './plugin/wsserver'\nimport Plugin from './plugin/plugin'\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  discardLateMessages: false,\n}\n\n/**\n * Status flags\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * OSC interface to send OSC Packets and listen to status changes and\n * incoming message events. Offers a Plugin API for different network\n * protocols, defaults to a simple Websocket client for OSC communication\n * between a browser js-app and a js-node server\n *\n * @example\n * const osc = new OSC()\n *\n * osc.on('/input/test', message => {\n *   // print incoming OSC message arguments\n *   console.log(message.args)\n * })\n *\n * osc.on('open', () => {\n *   const message = new Message('/test/path', 55.12, 'hello')\n *   osc.send(message)\n * })\n *\n * osc.open({ host: '192.168.178.115', port: 9012 })\n */\nclass OSC {\n  /**\n   * Create an OSC instance with given options\n   * @param {object} [options] Custom options\n   * @param {boolean} [options.discardLateMessages=false] Ignore incoming\n   * messages when given timetag lies in the past\n   * @param {Plugin} [options.plugin=WebsocketClientPlugin] Add a connection plugin\n   * to this interface, defaults to a plugin with Websocket client.\n   * Open README.md for further information on how to handle plugins or\n   * how to write your own with the Plugin API\n   *\n   * @example\n   * const osc = new OSC() // default options with Websocket client\n   *\n   * @example\n   * const osc = new OSC({ discardLateMessages: true })\n   *\n   * @example\n   * const websocketPlugin = new OSC.WebsocketClientPlugin()\n   * const osc = new OSC({ plugin: websocketPlugin })\n   */\n  constructor(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC options argument has to be an object.')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n    // create default plugin with default options\n    if (!this.options.plugin) {\n      this.options.plugin = new WebsocketClientPlugin();\n    }\n    /**\n     * @type {EventHandler} eventHandler\n     * @private\n     */\n    this.eventHandler = new EventHandler({\n      discardLateMessages: this.options.discardLateMessages,\n    })\n\n    // pass EventHandler's notify() to plugin\n    const { eventHandler } = this\n    if (this.options.plugin && this.options.plugin.registerNotify) {\n      this.options.plugin.registerNotify((...args) => eventHandler.notify(...args))\n    }\n  }\n\n  /**\n   * Listen to a status-change event or incoming OSC message with\n   * address pattern matching\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {function} callback Function which is called on notification\n   * @return {number} Subscription id (needed to unsubscribe)\n   *\n   * @example\n   * // will be called when server receives /in!trument/* for example\n   * osc.on('/instrument/1', message => {\n   *   console.log(message)\n   * })\n   *\n   * @example\n   * // will be called for every message since it uses the wildcard symbol\n   * osc.on('*', message => {\n   *   console.log(message)\n   * })\n   *\n   * @example\n   * // will be called on network socket error\n   * osc.on('error', message => {\n   *   console.log(message)\n   * })\n   */\n  on(eventName, callback) {\n    if (!(isString(eventName) && isFunction(callback))) {\n      throw new Error('OSC on() needs event- or address string and callback function')\n    }\n\n    return this.eventHandler.on(eventName, callback)\n  }\n\n  /**\n   * Unsubscribe an event listener\n   * @param {string} eventName Event name or OSC address pattern\n   * @param {number} subscriptionId The subscription id\n   * @return {boolean} Success state\n   *\n   * @example\n   * const listenerId = osc.on('error', message => {\n   *   console.log(message)\n   * })\n   * osc.off('error', listenerId) // unsubscribe from error event\n   */\n  off(eventName, subscriptionId) {\n    if (!(isString(eventName) && isInt(subscriptionId))) {\n      throw new Error('OSC off() needs string and number (subscriptionId) to unsubscribe')\n    }\n\n    return this.eventHandler.off(eventName, subscriptionId)\n  }\n\n  /**\n   * Open network socket with plugin. This method is used by\n   * plugins and is not available without (see Plugin API for more information)\n   * @param {object} [options] Custom global options for plugin instance\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   */\n  open(options) {\n    if (options && !isObject(options)) {\n      throw new Error('OSC open() options argument needs to be an object')\n    }\n\n    if (!(this.options.plugin && isFunction(this.options.plugin.open))) {\n      throw new Error('OSC Plugin API #open is not implemented!')\n    }\n\n    return this.options.plugin.open(options)\n  }\n\n  /**\n   * Returns the current status of the connection. See *STATUS* for\n   * different possible states. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @return {number} Status identifier\n   *\n   * @example\n   * import OSC, { STATUS } from 'osc'\n   * const osc = new OSC()\n   * if (osc.status() === STATUS.IS_CONNECTING) {\n   *   // do something\n   * }\n   */\n  status() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.status))) {\n      throw new Error('OSC Plugin API #status is not implemented!')\n    }\n\n    return this.options.plugin.status()\n  }\n\n  /**\n   * Close connection. This method is used by plugins and is not\n   * available without (see Plugin API for more information)\n   */\n  close() {\n    if (!(this.options.plugin && isFunction(this.options.plugin.close))) {\n      throw new Error('OSC Plugin API #close is not implemented!')\n    }\n\n    return this.options.plugin.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. This method is used by plugins\n   * and is not available without (see Plugin API for more information)\n   * @param {Packet|Bundle|Message|TypedMessage} packet OSC Packet, Bundle or Message instance\n   * @param {object} [options] Custom options\n   *\n   * @example\n   * const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\n   * osc.open({ host: '127.0.0.1', port: 8080 })\n   *\n   * const message = new OSC.Message('/test/path', 55.1, 57)\n   * osc.send(message)\n   *\n   * // send message again to custom address\n   * osc.send(message, { host: '192.168.178.115', port: 9001 })\n   */\n  send(packet, options) {\n    if (!(this.options.plugin && isFunction(this.options.plugin.send))) {\n      throw new Error('OSC Plugin API #send is not implemented!')\n    }\n\n    if (!(packet instanceof TypedMessage\n        || packet instanceof Message\n        || packet instanceof Bundle\n        || packet instanceof Packet)\n    ) {\n      throw new Error('OSC send() needs Messages, Bundles or Packets')\n    }\n\n    if (options && !isObject(options)) {\n      throw new Error('OSC send() options argument has to be an object')\n    }\n\n    return this.options.plugin.send(packet.pack(), options)\n  }\n}\n\n// expose status flags\nOSC.STATUS = STATUS\n\n// expose OSC classes\nOSC.Packet = Packet\nOSC.Bundle = Bundle\nOSC.Message = Message\nOSC.TypedMessage = TypedMessage\n\n// expose plugins\nOSC.Plugin = Plugin\nOSC.DatagramPlugin = DatagramPlugin\nOSC.WebsocketClientPlugin = WebsocketClientPlugin\nOSC.WebsocketServerPlugin = WebsocketServerPlugin\nOSC.BridgePlugin = BridgePlugin\n\nexport default OSC\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/osc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "defaultOptions",
    "memberof": "src/osc.js",
    "static": true,
    "longname": "src/osc.js~defaultOptions",
    "access": "private",
    "export": false,
    "importPath": "osc-js/src/osc.js",
    "importStyle": null,
    "description": "Default options",
    "lineNumber": 23,
    "type": {
      "types": [
        "{\"discardLateMessages\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "src/osc.js",
    "static": true,
    "longname": "src/osc.js~STATUS",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/osc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "{\"IS_NOT_INITIALIZED\": *, \"IS_CONNECTING\": *, \"IS_OPEN\": number, \"IS_CLOSING\": number, \"IS_CLOSED\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "OSC",
    "memberof": "src/osc.js",
    "static": true,
    "longname": "src/osc.js~OSC",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/osc.js",
    "importStyle": "OSC",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 200,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/osc.js~OSC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/osc.js~OSC#constructor",
    "access": "public",
    "description": "Create an OSC instance with given options",
    "examples": [
      "const osc = new OSC() // default options with Websocket client",
      "const osc = new OSC({ discardLateMessages: true })",
      "const websocketPlugin = new OSC.WebsocketClientPlugin()\nconst osc = new OSC({ plugin: websocketPlugin })"
    ],
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.discardLateMessages",
        "description": "Ignore incoming\nmessages when given timetag lies in the past"
      },
      {
        "nullable": null,
        "types": [
          "Plugin"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "WebsocketClientPlugin",
        "defaultRaw": "WebsocketClientPlugin",
        "name": "options.plugin",
        "description": "Add a connection plugin\nto this interface, defaults to a plugin with Websocket client.\nOpen README.md for further information on how to handle plugins or\nhow to write your own with the Plugin API"
      }
    ]
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "options",
    "memberof": "src/osc.js~OSC",
    "static": false,
    "longname": "src/osc.js~OSC#options",
    "access": "private",
    "description": "",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "eventHandler",
    "memberof": "src/osc.js~OSC",
    "static": false,
    "longname": "src/osc.js~OSC#eventHandler",
    "access": "private",
    "description": "",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "EventHandler"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "on",
    "memberof": "src/osc.js~OSC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/osc.js~OSC#on",
    "access": "public",
    "description": "Listen to a status-change event or incoming OSC message with\naddress pattern matching",
    "examples": [
      "// will be called when server receives /in!trument/* for example\nosc.on('/instrument/1', message => {\n  console.log(message)\n})",
      "// will be called for every message since it uses the wildcard symbol\nosc.on('*', message => {\n  console.log(message)\n})",
      "// will be called on network socket error\nosc.on('error', message => {\n  console.log(message)\n})"
    ],
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": "Event name or OSC address pattern"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Function which is called on notification"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Subscription id (needed to unsubscribe)"
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "off",
    "memberof": "src/osc.js~OSC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/osc.js~OSC#off",
    "access": "public",
    "description": "Unsubscribe an event listener",
    "examples": [
      "const listenerId = osc.on('error', message => {\n  console.log(message)\n})\nosc.off('error', listenerId) // unsubscribe from error event"
    ],
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": "Event name or OSC address pattern"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionId",
        "description": "The subscription id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Success state"
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "open",
    "memberof": "src/osc.js~OSC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/osc.js~OSC#open",
    "access": "public",
    "description": "Open network socket with plugin. This method is used by\nplugins and is not available without (see Plugin API for more information)",
    "examples": [
      "const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\nosc.open({ host: '127.0.0.1', port: 8080 })"
    ],
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Custom global options for plugin instance"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "status",
    "memberof": "src/osc.js~OSC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/osc.js~OSC#status",
    "access": "public",
    "description": "Returns the current status of the connection. See *STATUS* for\ndifferent possible states. This method is used by plugins\nand is not available without (see Plugin API for more information)",
    "examples": [
      "import OSC, { STATUS } from 'osc'\nconst osc = new OSC()\nif (osc.status() === STATUS.IS_CONNECTING) {\n  // do something\n}"
    ],
    "lineNumber": 196,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Status identifier"
    },
    "params": []
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "close",
    "memberof": "src/osc.js~OSC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/osc.js~OSC#close",
    "access": "public",
    "description": "Close connection. This method is used by plugins and is not\navailable without (see Plugin API for more information)",
    "lineNumber": 208,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "send",
    "memberof": "src/osc.js~OSC",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/osc.js~OSC#send",
    "access": "public",
    "description": "Send an OSC Packet, Bundle or Message. This method is used by plugins\nand is not available without (see Plugin API for more information)",
    "examples": [
      "const osc = new OSC({ plugin: new OSC.DatagramPlugin() })\nosc.open({ host: '127.0.0.1', port: 8080 })\n\nconst message = new OSC.Message('/test/path', 55.1, 57)\nosc.send(message)\n\n// send message again to custom address\nosc.send(message, { host: '192.168.178.115', port: 9001 })"
    ],
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "Packet",
          "Bundle",
          "Message",
          "TypedMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "packet",
        "description": "OSC Packet, Bundle or Message instance"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Custom options"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "src/packet.js",
    "content": "import AtomicString from './atomic/string'\nimport Bundle, { BUNDLE_TAG } from './bundle'\nimport Message from './message'\n\n/**\n * The unit of transmission of OSC is an OSC Packet. The contents\n * of an OSC packet must be either an OSC Message or an OSC Bundle\n */\nexport default class Packet {\n  /**\n   * Create a Packet instance holding a Message or Bundle\n   * @param {Message|Bundle} [value] Initial Packet value\n   */\n  constructor(value) {\n    if (value && !(value instanceof Message || value instanceof Bundle)) {\n      throw new Error('OSC Packet value has to be Message or Bundle')\n    }\n\n    /** @type {Message|Bundle} value */\n    this.value = value\n    /**\n     * @type {number} offset\n     * @private\n     */\n    this.offset = 0\n  }\n\n  /**\n   * Packs the Packet value. This implementation is more like\n   * a wrapper due to OSC specifications, you could also skip the\n   * Packet and directly work with the Message or Bundle instance\n   * @return {Uint8Array} Packed binary data\n   *\n   * @example\n   * const message = new Message('/test/path', 21.5, 'test')\n   * const packet = new Packet(message)\n   * const packetBinary = packet.pack() // then send it via udp etc.\n   *\n   * // or skip the Packet for convenience\n   * const messageBinary = message.pack()\n   */\n  pack() {\n    if (!this.value) {\n      throw new Error('OSC Packet can not be encoded with empty body')\n    }\n\n    return this.value.pack()\n  }\n\n  /**\n   * Unpack binary data from DataView to read Messages or Bundles\n   * @param {DataView} dataView The DataView holding a binary representation of a Packet\n   * @param {number} [initialOffset=0] Offset of DataView before unpacking\n   * @return {number} Offset after unpacking\n   */\n  unpack(dataView, initialOffset = 0) {\n    if (!(dataView instanceof DataView)) {\n      throw new Error('OSC Packet expects an instance of type DataView')\n    }\n\n    if (dataView.byteLength % 4 !== 0) {\n      throw new Error('OSC Packet byteLength has to be a multiple of four')\n    }\n\n    const head = new AtomicString()\n    head.unpack(dataView, initialOffset)\n\n    let item\n\n    // check if Packet is a Bundle or a Message\n    if (head.value === BUNDLE_TAG) {\n      item = new Bundle()\n    } else {\n      item = new Message()\n    }\n\n    item.unpack(dataView, initialOffset)\n\n    this.offset = item.offset\n    this.value = item\n\n    return this.offset\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/packet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "class",
    "name": "Packet",
    "memberof": "src/packet.js",
    "static": true,
    "longname": "src/packet.js~Packet",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/packet.js",
    "importStyle": "Packet",
    "description": "The unit of transmission of OSC is an OSC Packet. The contents\nof an OSC packet must be either an OSC Message or an OSC Bundle",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 211,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/packet.js~Packet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/packet.js~Packet#constructor",
    "access": "public",
    "description": "Create a Packet instance holding a Message or Bundle",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Message",
          "Bundle"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "Initial Packet value"
      }
    ]
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "value",
    "memberof": "src/packet.js~Packet",
    "static": false,
    "longname": "src/packet.js~Packet#value",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Message",
        "Bundle"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "offset",
    "memberof": "src/packet.js~Packet",
    "static": false,
    "longname": "src/packet.js~Packet#offset",
    "access": "private",
    "description": "",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "pack",
    "memberof": "src/packet.js~Packet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/packet.js~Packet#pack",
    "access": "public",
    "description": "Packs the Packet value. This implementation is more like\na wrapper due to OSC specifications, you could also skip the\nPacket and directly work with the Message or Bundle instance",
    "examples": [
      "const message = new Message('/test/path', 21.5, 'test')\nconst packet = new Packet(message)\nconst packetBinary = packet.pack() // then send it via udp etc.\n\n// or skip the Packet for convenience\nconst messageBinary = message.pack()"
    ],
    "lineNumber": 42,
    "return": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": "Packed binary data"
    },
    "params": []
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "unpack",
    "memberof": "src/packet.js~Packet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/packet.js~Packet#unpack",
    "access": "public",
    "description": "Unpack binary data from DataView to read Messages or Bundles",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataView"
        ],
        "spread": false,
        "optional": false,
        "name": "dataView",
        "description": "The DataView holding a binary representation of a Packet"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "initialOffset",
        "description": "Offset of DataView before unpacking"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Offset after unpacking"
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "src/plugin/bridge.js",
    "content": "import dgram from 'dgram'\nimport { WebSocketServer } from 'ws'\n\nimport Plugin from './plugin'\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  udpServer: {\n    host: 'localhost',\n    port: 41234,\n    exclusive: false,\n  },\n  udpClient: {\n    host: 'localhost',\n    port: 41235,\n  },\n  wsServer: {\n    host: 'localhost',\n    port: 8080,\n  },\n  receiver: 'ws',\n}\n\n/**\n * Helper method to merge nested objects\n * @private\n */\nfunction mergeOptions(base, custom) {\n  return {\n    ...defaultOptions,\n    ...base,\n    ...custom,\n    udpServer: { ...defaultOptions.udpServer, ...base.udpServer, ...custom.udpServer },\n    udpClient: { ...defaultOptions.udpClient, ...base.udpClient, ...custom.udpClient },\n    wsServer: { ...defaultOptions.wsServer, ...base.wsServer, ...custom.wsServer },\n  }\n}\n\n/**\n * OSC plugin for setting up communication between a Websocket\n * client and a udp client with a bridge inbetween\n */\nexport default class BridgePlugin extends Plugin {\n  /**\n   * Create an OSC Bridge instance with given options. Defaults to\n   * localhost:41234 for udp server, localhost:41235 for udp client and\n   * localhost:8080 for Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.udpServer.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [options.udpServer.port=41234] Port of udp server to bind to\n   * @param {boolean} [options.udpServer.exclusive=false] Exclusive flag\n   * @param {string} [options.udpClient.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [options.udpClient.port=41235] Port of udp client for messaging\n   * @param {string} [options.wsServer.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.wsServer.port=8080] Port of Websocket server\n   * @param {http.Server|https.Server} [options.wsServer.server] Use existing Node.js HTTP/S server\n   * @param {string} [options.receiver='ws'] Where messages sent via 'send' method will be\n   * delivered to, 'ws' for Websocket clients, 'udp' for udp client\n   *\n   * @example\n   * const plugin = new OSC.BridgePlugin({ wsServer: { port: 9912 } })\n   * const osc = new OSC({ plugin: plugin })\n   *\n   * @example <caption>Using an existing HTTP server</caption>\n   * const http = require('http')\n   * const httpServer = http.createServer();\n   * const plugin = new OSC.BridgePlugin({ wsServer: { server: httpServer } })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(options = {}) {\n    super()\n\n    // `dgram` and `WebSocketServer` get replaced with an undefined value in\n    // builds targeting browser environments\n    if (!dgram || !WebSocketServer) {\n      throw new Error('BridgePlugin can not be used in browser context')\n    }\n\n    /** @type {object} options\n     * @private\n     */\n    this.options = mergeOptions({}, options)\n\n    /**\n     * @type {object} websocket\n     * @private\n     */\n    this.websocket = null\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = dgram.createSocket('udp4')\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    // register udp events\n    this.socket.on('message', (message) => {\n      this.send(message, { receiver: 'ws' })\n      this.notify(message.buffer)\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Bind a udp socket to a hostname and port\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [customOptions.port=41234] Port of udp server to bind to\n   * @param {boolean} [customOptions.exclusive=false] Exclusive flag\n   */\n  open(customOptions = {}) {\n    const options = mergeOptions(this.options, customOptions)\n\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // bind udp server\n    this.socket.bind({\n      address: options.udpServer.host,\n      port: options.udpServer.port,\n      exclusive: options.udpServer.exclusive,\n    }, () => {\n      let wsServerOptions = {}\n      if (options.wsServer.server) {\n        wsServerOptions.server = options.wsServer.server\n      } else {\n        wsServerOptions = options.wsServer\n      }\n\n      // bind Websocket server\n      this.websocket = new WebSocketServer(wsServerOptions)\n      this.websocket.binaryType = 'arraybuffer'\n\n      // register Websocket events\n      this.websocket.on('listening', () => {\n        this.socketStatus = STATUS.IS_OPEN\n        this.notify('open')\n      })\n\n      this.websocket.on('error', (error) => {\n        this.notify('error', error)\n      })\n\n      this.websocket.on('connection', (client) => {\n        client.on('message', (message, rinfo) => {\n          this.send(message, { receiver: 'udp' })\n          this.notify(new Uint8Array(message), rinfo)\n        })\n      })\n    })\n  }\n\n  /**\n   * Close udp socket and Websocket server\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    // close udp socket\n    this.socket.close(() => {\n      // close Websocket\n      this.websocket.close(() => {\n        this.socketStatus = STATUS.IS_CLOSED\n        this.notify('close')\n      })\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom receiver, otherwise the global options will be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.udpClient.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [customOptions.udpClient.port=41235] Port of udp client for messaging\n   * @param {string} [customOptions.receiver='ws'] Messages will be delivered to Websocket ('ws')\n   * clients or udp client ('udp')\n   */\n  send(binary, customOptions = {}) {\n    const options = mergeOptions(this.options, customOptions)\n    const { receiver } = options\n\n    if (receiver === 'udp') {\n      // send data to udp client\n      const data = binary instanceof Buffer ? binary : Buffer.from(binary)\n      this.socket.send(\n        data,\n        0,\n        data.byteLength,\n        options.udpClient.port,\n        options.udpClient.host,\n      )\n    } else if (receiver === 'ws') {\n      // send data to all Websocket clients\n      this.websocket.clients.forEach((client) => {\n        client.send(binary, { binary: true })\n      })\n    } else {\n      throw new Error('BridgePlugin can not send message to unknown receiver')\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/plugin/bridge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "src/plugin/bridge.js",
    "static": true,
    "longname": "src/plugin/bridge.js~STATUS",
    "access": "private",
    "export": false,
    "importPath": "osc-js/src/plugin/bridge.js",
    "importStyle": null,
    "description": "Status flags",
    "lineNumber": 10,
    "type": {
      "types": [
        "{\"IS_NOT_INITIALIZED\": *, \"IS_CONNECTING\": *, \"IS_OPEN\": number, \"IS_CLOSING\": number, \"IS_CLOSED\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "defaultOptions",
    "memberof": "src/plugin/bridge.js",
    "static": true,
    "longname": "src/plugin/bridge.js~defaultOptions",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/plugin/bridge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"udpServer\": *, \"udpClient\": *, \"wsServer\": *, \"receiver\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "mergeOptions",
    "memberof": "src/plugin/bridge.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/bridge.js~mergeOptions",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/plugin/bridge.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      },
      {
        "name": "custom",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{...defaultOptions: Object, ...base: Object, ...custom: Object, \"udpServer\": *, \"udpClient\": *, \"wsServer\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "BridgePlugin",
    "memberof": "src/plugin/bridge.js",
    "static": true,
    "longname": "src/plugin/bridge.js~BridgePlugin",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/plugin/bridge.js",
    "importStyle": "BridgePlugin",
    "description": "OSC plugin for setting up communication between a Websocket\nclient and a udp client with a bridge inbetween",
    "lineNumber": 58,
    "interface": false,
    "extends": [
      "src/plugin/plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 223,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#constructor",
    "access": "public",
    "description": "Create an OSC Bridge instance with given options. Defaults to\nlocalhost:41234 for udp server, localhost:41235 for udp client and\nlocalhost:8080 for Websocket server",
    "examples": [
      "const plugin = new OSC.BridgePlugin({ wsServer: { port: 9912 } })\nconst osc = new OSC({ plugin: plugin })",
      "<caption>Using an existing HTTP server</caption>\nconst http = require('http')\nconst httpServer = http.createServer();\nconst plugin = new OSC.BridgePlugin({ wsServer: { server: httpServer } })\nconst osc = new OSC({ plugin: plugin })"
    ],
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "options.udpServer.host",
        "description": "Hostname of udp server to bind to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "41234",
        "defaultRaw": 41234,
        "name": "options.udpServer.port",
        "description": "Port of udp server to bind to"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.udpServer.exclusive",
        "description": "Exclusive flag"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "options.udpClient.host",
        "description": "Hostname of udp client for messaging"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "41235",
        "defaultRaw": 41235,
        "name": "options.udpClient.port",
        "description": "Port of udp client for messaging"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "options.wsServer.host",
        "description": "Hostname of Websocket server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "8080",
        "defaultRaw": 8080,
        "name": "options.wsServer.port",
        "description": "Port of Websocket server"
      },
      {
        "nullable": null,
        "types": [
          "http.Server",
          "https.Server"
        ],
        "spread": false,
        "optional": true,
        "name": "options.wsServer.server",
        "description": "Use existing Node.js HTTP/S server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'ws'",
        "defaultRaw": "'ws'",
        "name": "options.receiver",
        "description": "Where messages sent via 'send' method will be\ndelivered to, 'ws' for Websocket clients, 'udp' for udp client"
      }
    ]
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "options",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#options",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "websocket",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#websocket",
    "access": "private",
    "description": "",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "socket",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#socket",
    "access": "private",
    "description": "",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "socketStatus",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#socketStatus",
    "access": "private",
    "description": "",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "notify",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#notify",
    "access": "private",
    "description": "",
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "registerNotify",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#registerNotify",
    "access": "private",
    "description": "Internal method to hook into osc library's\nEventHandler notify method",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Notify callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "status",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#status",
    "access": "public",
    "description": "Returns the current status of the connection",
    "lineNumber": 147,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Status ID"
    },
    "params": []
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "open",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#open",
    "access": "public",
    "description": "Bind a udp socket to a hostname and port",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "customOptions.host",
        "description": "Hostname of udp server to bind to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "41234",
        "defaultRaw": 41234,
        "name": "customOptions.port",
        "description": "Port of udp server to bind to"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "customOptions.exclusive",
        "description": "Exclusive flag"
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "close",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#close",
    "access": "public",
    "description": "Close udp socket and Websocket server",
    "lineNumber": 202,
    "params": [],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "send",
    "memberof": "src/plugin/bridge.js~BridgePlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/bridge.js~BridgePlugin#send",
    "access": "public",
    "description": "Send an OSC Packet, Bundle or Message. Use options here for\ncustom receiver, otherwise the global options will be taken",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "Uint8Array"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "Binary representation of OSC Packet"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "customOptions.udpClient.host",
        "description": "Hostname of udp client for messaging"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "41235",
        "defaultRaw": 41235,
        "name": "customOptions.udpClient.port",
        "description": "Port of udp client for messaging"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'ws'",
        "defaultRaw": "'ws'",
        "name": "customOptions.receiver",
        "description": "Messages will be delivered to Websocket ('ws')\nclients or udp client ('udp')"
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "src/plugin/dgram.js",
    "content": "import dgram from 'dgram'\n\nimport Plugin from './plugin'\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options for open method\n * @private\n */\nconst defaultOpenOptions = {\n  host: 'localhost',\n  port: 41234,\n  exclusive: false,\n}\n\n/**\n * Default options for send method\n * @private\n */\nconst defaultSendOptions = {\n  host: 'localhost',\n  port: 41235,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  type: 'udp4',\n  open: defaultOpenOptions,\n  send: defaultSendOptions,\n}\n\n/**\n * Helper method to merge nested objects\n * @private\n */\nfunction mergeOptions(base, custom) {\n  return {\n    ...defaultOptions,\n    ...base,\n    ...custom,\n    open: { ...defaultOptions.open, ...base.open, ...custom.open },\n    send: { ...defaultOptions.send, ...base.send, ...custom.send },\n  }\n}\n\n/**\n * OSC plugin for simple OSC messaging via udp client\n * and udp server\n */\nexport default class DatagramPlugin extends Plugin {\n  /**\n   * Create an OSC Plugin instance with given options. Defaults to\n   * localhost:41234 for server and localhost:41235 for client messaging\n   * @param {object} [options] Custom options\n   * @param {string} [options.type='udp4'] 'udp4' or 'udp6'\n   * @param {string} [options.open.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [options.open.port=41234] Port of udp server to bind to\n   * @param {boolean} [options.open.exclusive=false] Exclusive flag\n   * @param {string} [options.send.host='localhost'] Hostname of udp client for messaging\n   * @param {number} [options.send.port=41235] Port of udp client for messaging\n   *\n   * @example\n   * const plugin = new OSC.DatagramPlugin({ send: { port: 9912 } })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(options = {}) {\n    super()\n\n    // `dgram` gets replaced with an undefined value in builds targeting\n    // browser environments\n    if (!dgram) {\n      throw new Error('DatagramPlugin can not be used in browser context')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = mergeOptions({}, options)\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = dgram.createSocket(this.options.type)\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    // register events\n    this.socket.on('message', (message, rinfo) => {\n      this.notify(message, rinfo)\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Bind a udp socket to a hostname and port\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host='localhost'] Hostname of udp server to bind to\n   * @param {number} [customOptions.port=41234] Port of udp server to bind to\n   * @param {boolean} [customOptions.exclusive=false] Exclusive flag\n   */\n  open(customOptions = {}) {\n    const options = { ...this.options.open, ...customOptions }\n    const { port, exclusive } = options\n\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    this.socket.bind({\n      address: options.host,\n      port,\n      exclusive,\n    }, () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    })\n  }\n\n  /**\n   * Close udp socket\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    this.socket.close(() => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom port and hostname, otherwise the global options will\n   * be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options for udp socket\n   * @param {string} [customOptions.host] Hostname of udp client\n   * @param {number} [customOptions.port] Port of udp client\n   */\n  send(binary, customOptions = {}) {\n    const options = { ...this.options.send, ...customOptions }\n    const { port, host } = options\n\n    this.socket.send(Buffer.from(binary), 0, binary.byteLength, port, host)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/plugin/dgram.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "src/plugin/dgram.js",
    "static": true,
    "longname": "src/plugin/dgram.js~STATUS",
    "access": "private",
    "export": false,
    "importPath": "osc-js/src/plugin/dgram.js",
    "importStyle": null,
    "description": "Status flags",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"IS_NOT_INITIALIZED\": *, \"IS_CONNECTING\": *, \"IS_OPEN\": number, \"IS_CLOSING\": number, \"IS_CLOSED\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "defaultOpenOptions",
    "memberof": "src/plugin/dgram.js",
    "static": true,
    "longname": "src/plugin/dgram.js~defaultOpenOptions",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/plugin/dgram.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"host\": string, \"port\": number, \"exclusive\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "defaultSendOptions",
    "memberof": "src/plugin/dgram.js",
    "static": true,
    "longname": "src/plugin/dgram.js~defaultSendOptions",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/plugin/dgram.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{\"host\": string, \"port\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "defaultOptions",
    "memberof": "src/plugin/dgram.js",
    "static": true,
    "longname": "src/plugin/dgram.js~defaultOptions",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/plugin/dgram.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "{\"type\": string, \"open\": *, \"send\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "mergeOptions",
    "memberof": "src/plugin/dgram.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/plugin/dgram.js~mergeOptions",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/plugin/dgram.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      },
      {
        "name": "custom",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{...defaultOptions: Object, ...base: Object, ...custom: Object, \"open\": *, \"send\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "DatagramPlugin",
    "memberof": "src/plugin/dgram.js",
    "static": true,
    "longname": "src/plugin/dgram.js~DatagramPlugin",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/plugin/dgram.js",
    "importStyle": "DatagramPlugin",
    "description": "OSC plugin for simple OSC messaging via udp client\nand udp server",
    "lineNumber": 64,
    "interface": false,
    "extends": [
      "src/plugin/plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#constructor",
    "access": "public",
    "description": "Create an OSC Plugin instance with given options. Defaults to\nlocalhost:41234 for server and localhost:41235 for client messaging",
    "examples": [
      "const plugin = new OSC.DatagramPlugin({ send: { port: 9912 } })\nconst osc = new OSC({ plugin: plugin })"
    ],
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'udp4'",
        "defaultRaw": "'udp4'",
        "name": "options.type",
        "description": "'udp4' or 'udp6'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "options.open.host",
        "description": "Hostname of udp server to bind to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "41234",
        "defaultRaw": 41234,
        "name": "options.open.port",
        "description": "Port of udp server to bind to"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.open.exclusive",
        "description": "Exclusive flag"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "options.send.host",
        "description": "Hostname of udp client for messaging"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "41235",
        "defaultRaw": 41235,
        "name": "options.send.port",
        "description": "Port of udp client for messaging"
      }
    ]
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "options",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#options",
    "access": "private",
    "description": "",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "socket",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#socket",
    "access": "private",
    "description": "",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "socketStatus",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#socketStatus",
    "access": "private",
    "description": "",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "notify",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#notify",
    "access": "private",
    "description": "",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "registerNotify",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#registerNotify",
    "access": "private",
    "description": "Internal method to hook into osc library's\nEventHandler notify method",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Notify callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "status",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#status",
    "access": "public",
    "description": "Returns the current status of the connection",
    "lineNumber": 136,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Status ID"
    },
    "params": []
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "open",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#open",
    "access": "public",
    "description": "Bind a udp socket to a hostname and port",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "customOptions.host",
        "description": "Hostname of udp server to bind to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "41234",
        "defaultRaw": 41234,
        "name": "customOptions.port",
        "description": "Port of udp server to bind to"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "customOptions.exclusive",
        "description": "Exclusive flag"
      }
    ],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "close",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#close",
    "access": "public",
    "description": "Close udp socket",
    "lineNumber": 166,
    "params": [],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "send",
    "memberof": "src/plugin/dgram.js~DatagramPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/dgram.js~DatagramPlugin#send",
    "access": "public",
    "description": "Send an OSC Packet, Bundle or Message. Use options here for\ncustom port and hostname, otherwise the global options will\nbe taken",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "Uint8Array"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "Binary representation of OSC Packet"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions",
        "description": "Custom options for udp socket"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions.host",
        "description": "Hostname of udp client"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions.port",
        "description": "Port of udp client"
      }
    ],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "src/plugin/plugin.js",
    "content": "// /**\n//  @constructor\n//  @abstract\n//  */\n// const Plugin = () => {\n//   if (this.constructor === Plugin) {\n//   }\n// }\n\n// /**\n// @abstract\n// */\n// Plugin.prototype.close = () => {\n//   throw new Error('Abstract method!')\n// }\n\nexport default class Plugin {\n  constructor() {\n    if (this.constructor === Plugin) {\n      throw new Error('Plugin is an abstract class. Please create or use an implementation!')\n    }\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status ID\n   */\n  status() {\n    throw new Error('Abstract method!')\n  }\n\n  /**\n   * Open socket connection. Specifics depend on implementation.\n   * @param {object} [customOptions] Custom options. See implementation specifics.\n   */\n  // eslint-disable-next-line no-unused-vars\n  open(customOptions = {}) {\n    throw new Error('Abstract method!')\n  }\n\n  /**\n   * Close socket connection and anything else used in the implementation.\n   */\n  close() {\n    throw new Error('Abstract method!')\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message. Use options here for\n   * custom receiver, otherwise the global options will be taken\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   * @param {object} [customOptions] Custom options. Specifics depend on implementation.\n   */\n  // eslint-disable-next-line no-unused-vars\n  send(binary, customOptions = {}) {\n    throw new Error('Abstract method!')\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/plugin/plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "class",
    "name": "Plugin",
    "memberof": "src/plugin/plugin.js",
    "static": true,
    "longname": "src/plugin/plugin.js~Plugin",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/plugin/plugin.js",
    "importStyle": "Plugin",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 264,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/plugin.js~Plugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "status",
    "memberof": "src/plugin/plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/plugin.js~Plugin#status",
    "access": "public",
    "description": "Returns the current status of the connection",
    "lineNumber": 28,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Status ID"
    },
    "params": []
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "open",
    "memberof": "src/plugin/plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/plugin.js~Plugin#open",
    "access": "public",
    "description": "Open socket connection. Specifics depend on implementation.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions",
        "description": "Custom options. See implementation specifics."
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "close",
    "memberof": "src/plugin/plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/plugin.js~Plugin#close",
    "access": "public",
    "description": "Close socket connection and anything else used in the implementation.",
    "lineNumber": 44,
    "params": [],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "send",
    "memberof": "src/plugin/plugin.js~Plugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/plugin.js~Plugin#send",
    "access": "public",
    "description": "Send an OSC Packet, Bundle or Message. Use options here for\ncustom receiver, otherwise the global options will be taken",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Uint8Array"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "Binary representation of OSC Packet"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions",
        "description": "Custom options. Specifics depend on implementation."
      }
    ],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/plugin/wsclient.js",
    "content": "import WebSocket from 'ws'\n\nimport Plugin from './plugin'\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  host: 'localhost',\n  port: 8080,\n  secure: false,\n  protocol: [],\n}\n\n/**\n * OSC plugin for a Websocket client running in node or browser context\n */\nexport default class WebsocketClientPlugin extends Plugin {\n  /**\n   * Create an OSC WebsocketClientPlugin instance with given options.\n   * Defaults to *localhost:8080* for connecting to a Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.port=8080] Port of Websocket server\n   * @param {boolean} [options.secure=false] Use wss:// for secure connections\n   * @param {string|string[]} [options.protocol=''] Subprotocol of Websocket server\n   *\n   * @example\n   * const plugin = new OSC.WebsocketClientPlugin({ port: 9912 })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(options) {\n    super()\n\n    if (!WebSocket) {\n      throw new Error('WebsocketClientPlugin can\\'t find a WebSocket class')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = null\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status identifier\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Connect to a Websocket server. Defaults to global options\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host] Hostname of Websocket server\n   * @param {number} [customOptions.port] Port of Websocket server\n   * @param {boolean} [customOptions.secure] Use wss:// for secure connections\n   * @param {string|string[]} [options.protocol] Subprotocol of Websocket server\n   */\n  open(customOptions = {}) {\n    const options = { ...this.options, ...customOptions }\n    const {\n      port, host, secure, protocol,\n    } = options\n\n    // close socket when already given\n    if (this.socket) {\n      this.close()\n    }\n\n    // create websocket client\n    const scheme = secure ? 'wss' : 'ws'\n    const rinfo = {\n      address: host,\n      family: scheme,\n      port,\n      size: 0,\n    }\n\n    this.socket = new WebSocket(`${scheme}://${host}:${port}`, protocol)\n    this.socket.binaryType = 'arraybuffer'\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // register events\n    this.socket.onopen = () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    }\n\n    this.socket.onclose = () => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    }\n\n    this.socket.onerror = (error) => {\n      this.notify('error', error)\n    }\n\n    this.socket.onmessage = (message) => {\n      this.notify(message.data, rinfo)\n    }\n  }\n\n  /**\n   * Close Websocket\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n    this.socket.close()\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message to Websocket server\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   */\n  send(binary) {\n    this.socket.send(binary)\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/plugin/wsclient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "src/plugin/wsclient.js",
    "static": true,
    "longname": "src/plugin/wsclient.js~STATUS",
    "access": "private",
    "export": false,
    "importPath": "osc-js/src/plugin/wsclient.js",
    "importStyle": null,
    "description": "Status flags",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"IS_NOT_INITIALIZED\": *, \"IS_CONNECTING\": *, \"IS_OPEN\": number, \"IS_CLOSING\": number, \"IS_CLOSED\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "variable",
    "name": "defaultOptions",
    "memberof": "src/plugin/wsclient.js",
    "static": true,
    "longname": "src/plugin/wsclient.js~defaultOptions",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/plugin/wsclient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"host\": string, \"port\": number, \"secure\": *, \"protocol\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 272,
    "kind": "class",
    "name": "WebsocketClientPlugin",
    "memberof": "src/plugin/wsclient.js",
    "static": true,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/plugin/wsclient.js",
    "importStyle": "WebsocketClientPlugin",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/plugin/plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 273,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#constructor",
    "access": "public",
    "description": "Create an OSC WebsocketClientPlugin instance with given options.\nDefaults to *localhost:8080* for connecting to a Websocket server",
    "examples": [
      "const plugin = new OSC.WebsocketClientPlugin({ port: 9912 })\nconst osc = new OSC({ plugin: plugin })"
    ],
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "options.host",
        "description": "Hostname of Websocket server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "8080",
        "defaultRaw": 8080,
        "name": "options.port",
        "description": "Port of Websocket server"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.secure",
        "description": "Use wss:// for secure connections"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "options.protocol",
        "description": "Subprotocol of Websocket server"
      }
    ]
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "options",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#options",
    "access": "private",
    "description": "",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "socket",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#socket",
    "access": "private",
    "description": "",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "socketStatus",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#socketStatus",
    "access": "private",
    "description": "",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "notify",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#notify",
    "access": "private",
    "description": "",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "registerNotify",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#registerNotify",
    "access": "private",
    "description": "Internal method to hook into osc library's\nEventHandler notify method",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Notify callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "status",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#status",
    "access": "public",
    "description": "Returns the current status of the connection",
    "lineNumber": 90,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Status identifier"
    },
    "params": []
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "open",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#open",
    "access": "public",
    "description": "Connect to a Websocket server. Defaults to global options",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions.host",
        "description": "Hostname of Websocket server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions.port",
        "description": "Port of Websocket server"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions.secure",
        "description": "Use wss:// for secure connections"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "options.protocol",
        "description": "Subprotocol of Websocket server"
      }
    ],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "close",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#close",
    "access": "public",
    "description": "Close Websocket",
    "lineNumber": 149,
    "params": [],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "send",
    "memberof": "src/plugin/wsclient.js~WebsocketClientPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsclient.js~WebsocketClientPlugin#send",
    "access": "public",
    "description": "Send an OSC Packet, Bundle or Message to Websocket server",
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "Uint8Array"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "Binary representation of OSC Packet"
      }
    ],
    "return": null
  },
  {
    "__docId__": 289,
    "kind": "file",
    "name": "src/plugin/wsserver.js",
    "content": "import { WebSocketServer } from 'ws'\n\nimport Plugin from './plugin'\n\n/**\n * Status flags\n * @private\n */\nconst STATUS = {\n  IS_NOT_INITIALIZED: -1,\n  IS_CONNECTING: 0,\n  IS_OPEN: 1,\n  IS_CLOSING: 2,\n  IS_CLOSED: 3,\n}\n\n/**\n * Default options\n * @private\n */\nconst defaultOptions = {\n  host: 'localhost',\n  port: 8080,\n}\n\n/**\n * This will import the types for JSDoc/Type declarations without\n * impacting the runtime\n * @typedef {import('http').Server|import('https').Server} Server\n */\n\n/**\n * OSC plugin for a Websocket client running in node or browser context\n */\nexport default class WebsocketServerPlugin extends Plugin {\n  /**\n   * Create an OSC WebsocketServerPlugin instance with given options.\n   * Defaults to *localhost:8080* for the Websocket server\n   * @param {object} [options] Custom options\n   * @param {string} [options.host='localhost'] Hostname of Websocket server\n   * @param {number} [options.port=8080] Port of Websocket server\n   * @param {Server} [options.server] Use existing Node.js HTTP/S server\n   *\n   * @example\n   * const plugin = new OSC.WebsocketServerPlugin({ port: 9912 })\n   * const osc = new OSC({ plugin: plugin })\n   *\n   * osc.open() // start server\n   * @example <caption>Using an existing HTTP server</caption>\n   * const http = require('http')\n   * const httpServer = http.createServer();\n   * const plugin = new OSC.WebsocketServerPlugin({ server: httpServer })\n   * const osc = new OSC({ plugin: plugin })\n   */\n  constructor(options) {\n    super()\n\n    // `WebSocketServer` gets replaced with an undefined value in builds\n    // targeting browser environments\n    if (!WebSocketServer) {\n      throw new Error('WebsocketServerPlugin can not be used in browser context')\n    }\n\n    /**\n     * @type {object} options\n     * @private\n     */\n    this.options = { ...defaultOptions, ...options }\n\n    /**\n     * @type {object} socket\n     * @private\n     */\n    this.socket = null\n    /**\n     * @type {number} socketStatus\n     * @private\n     */\n    this.socketStatus = STATUS.IS_NOT_INITIALIZED\n\n    /**\n     * @type {function} notify\n     * @private\n     */\n    this.notify = () => {}\n  }\n\n  /**\n   * Internal method to hook into osc library's\n   * EventHandler notify method\n   * @param {function} fn Notify callback\n   * @private\n   */\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  /**\n   * Returns the current status of the connection\n   * @return {number} Status identifier\n   */\n  status() {\n    return this.socketStatus\n  }\n\n  /**\n   * Start a Websocket server. Defaults to global options\n   * @param {object} [customOptions] Custom options\n   * @param {string} [customOptions.host] Hostname of Websocket server\n   * @param {number} [customOptions.port] Port of Websocket server\n   */\n  open(customOptions = {}) {\n    const options = { ...this.options, ...customOptions }\n    const { port, host } = options\n    const rinfo = {\n      address: host,\n      family: 'wsserver',\n      port,\n      size: 0,\n    }\n\n    // close socket when already given\n    if (this.socket) {\n      this.close()\n    }\n\n    // create websocket server\n    if (options.server) {\n      this.socket = new WebSocketServer({ server: options.server })\n    } else {\n      this.socket = new WebSocketServer({ host, port })\n    }\n\n    this.socket.binaryType = 'arraybuffer'\n    this.socketStatus = STATUS.IS_CONNECTING\n\n    // register events\n    this.socket.on('listening', () => {\n      this.socketStatus = STATUS.IS_OPEN\n      this.notify('open')\n    })\n\n    this.socket.on('error', (error) => {\n      this.notify('error', error)\n    })\n\n    this.socket.on('connection', (client) => {\n      client.on('message', (message) => {\n        this.notify(new Uint8Array(message), rinfo)\n      })\n    })\n  }\n\n  /**\n   * Close Websocket server\n   */\n  close() {\n    this.socketStatus = STATUS.IS_CLOSING\n\n    this.socket.close(() => {\n      this.socketStatus = STATUS.IS_CLOSED\n      this.notify('close')\n    })\n  }\n\n  /**\n   * Send an OSC Packet, Bundle or Message to Websocket clients\n   * @param {Uint8Array} binary Binary representation of OSC Packet\n   */\n  send(binary) {\n    this.socket.clients.forEach((client) => {\n      client.send(binary, { binary: true })\n    })\n  }\n}\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/src/plugin/wsserver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 290,
    "kind": "variable",
    "name": "STATUS",
    "memberof": "src/plugin/wsserver.js",
    "static": true,
    "longname": "src/plugin/wsserver.js~STATUS",
    "access": "private",
    "export": false,
    "importPath": "osc-js/src/plugin/wsserver.js",
    "importStyle": null,
    "description": "Status flags",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"IS_NOT_INITIALIZED\": *, \"IS_CONNECTING\": *, \"IS_OPEN\": number, \"IS_CLOSING\": number, \"IS_CLOSED\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 291,
    "kind": "variable",
    "name": "defaultOptions",
    "memberof": "src/plugin/wsserver.js",
    "static": true,
    "longname": "src/plugin/wsserver.js~defaultOptions",
    "access": "public",
    "export": false,
    "importPath": "osc-js/src/plugin/wsserver.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"host\": string, \"port\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 292,
    "kind": "class",
    "name": "WebsocketServerPlugin",
    "memberof": "src/plugin/wsserver.js",
    "static": true,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "access": "public",
    "export": true,
    "importPath": "osc-js/src/plugin/wsserver.js",
    "importStyle": "WebsocketServerPlugin",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/plugin/plugin.js~Plugin"
    ]
  },
  {
    "__docId__": 293,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#constructor",
    "access": "public",
    "description": "Create an OSC WebsocketServerPlugin instance with given options.\nDefaults to *localhost:8080* for the Websocket server",
    "examples": [
      "const plugin = new OSC.WebsocketServerPlugin({ port: 9912 })\nconst osc = new OSC({ plugin: plugin })\n\nosc.open() // start server",
      "<caption>Using an existing HTTP server</caption>\nconst http = require('http')\nconst httpServer = http.createServer();\nconst plugin = new OSC.WebsocketServerPlugin({ server: httpServer })\nconst osc = new OSC({ plugin: plugin })"
    ],
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'localhost'",
        "defaultRaw": "'localhost'",
        "name": "options.host",
        "description": "Hostname of Websocket server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "8080",
        "defaultRaw": 8080,
        "name": "options.port",
        "description": "Port of Websocket server"
      },
      {
        "nullable": null,
        "types": [
          "Server"
        ],
        "spread": false,
        "optional": true,
        "name": "options.server",
        "description": "Use existing Node.js HTTP/S server"
      }
    ]
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "options",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#options",
    "access": "private",
    "description": "",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "socket",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#socket",
    "access": "private",
    "description": "",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "socketStatus",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#socketStatus",
    "access": "private",
    "description": "",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "notify",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#notify",
    "access": "private",
    "description": "",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "registerNotify",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#registerNotify",
    "access": "private",
    "description": "Internal method to hook into osc library's\nEventHandler notify method",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": "Notify callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "status",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#status",
    "access": "public",
    "description": "Returns the current status of the connection",
    "lineNumber": 102,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Status identifier"
    },
    "params": []
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "open",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#open",
    "access": "public",
    "description": "Start a Websocket server. Defaults to global options",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions",
        "description": "Custom options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions.host",
        "description": "Hostname of Websocket server"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "customOptions.port",
        "description": "Port of Websocket server"
      }
    ],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "close",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#close",
    "access": "public",
    "description": "Close Websocket server",
    "lineNumber": 157,
    "params": [],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "send",
    "memberof": "src/plugin/wsserver.js~WebsocketServerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/plugin/wsserver.js~WebsocketServerPlugin#send",
    "access": "public",
    "description": "Send an OSC Packet, Bundle or Message to Websocket clients",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "Uint8Array"
        ],
        "spread": false,
        "optional": false,
        "name": "binary",
        "description": "Binary representation of OSC Packet"
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "osc-js\n======\n\n<p>\n  <a href=\"https://github.com/adzialocha/osc-js/actions\">\n    <img src=\"https://github.com/adzialocha/osc-js/workflows/Node.js%20CI/badge.svg\" alt=\"Build status\">\n  </a>\n  <a href=\"https://www.npmjs.org/package/osc-js\">\n    <img src=\"https://img.shields.io/npm/v/osc-js.svg?style=flat-square\" alt=\"npm version\">\n  </a>\n  <a href=\"http://spdx.org/licenses/MIT\">\n    <img src=\"https://img.shields.io/npm/l/osc-js.svg?style=flat-square\" alt=\"npm licence\">\n  </a>\n  <a href=\"https://adzialocha.github.io/osc-js\">\n    <img src=\"https://raw.githubusercontent.com/adzialocha/osc-js/gh-pages/badge.svg\" alt=\"ESDoc status\">\n  </a>\n</p>\n\nosc-js is an [Open Sound Control](http://opensoundcontrol.org/) library for JavaScript applications (UMD module for Node, Browser etc.) with address pattern matching and timetag handling. Sends messages via *UDP*, *WebSocket* or both (bridge mode) and offers a customizable Plugin API for network protocols.\n\n[Wiki](https://github.com/adzialocha/osc-js/wiki) | [Basic Usage](https://github.com/adzialocha/osc-js/wiki/Basic-Usage) | [Documentation](https://adzialocha.github.io/osc-js) | [Plugin API](https://github.com/adzialocha/osc-js/wiki/Plugin-API)\n\n## Features\n\n- UMD Module running in Node.js, Electron, Chrome Apps, browser or any other JS environment\n- Can be used with Webpack and Browserify\n- TypeScript definitions\n- No dependencies (except of `ws` in Node.js or similar environments)\n- Receive sender information from incoming messages\n- Built-in *UDP*, *WebSocket* networking support as plugins\n- Special bridge plugin for easy communication between *UDP*- and *WebSocket* clients\n- Plugin API for custom network protocols\n- Featuring all [OSC 1.0 specifications](http://opensoundcontrol.org/spec-1_0)\n- OSC Address pattern matching\n- Time-critical OSC Bundles with Timetags\n- Extended (nonstandard) argument types\n\n## Documentation\n\nRead more about osc-js and how to use it in the [Wiki](https://github.com/adzialocha/osc-js/wiki) and [Documentation](https://adzialocha.github.io/osc-js).\n\n## Example\n\n```js\nconst osc = new OSC()\n\nosc.on('/param/density', (message, rinfo) => {\n  console.log(message.args)\n  console.log(rinfo)\n})\n\nosc.on('*', message => {\n  console.log(message.args)\n})\n\nosc.on('/{foo,bar}/*/param', message => {\n  console.log(message.args)\n})\n\nosc.on('open', () => {\n  const message = new OSC.Message('/test', 12.221, 'hello')\n  osc.send(message)\n})\n\nosc.open({ port: 9000 })\n```\n\n## Installation and Usage\n\nRecommended installation via npm: `npm i osc-js` or `yarn add osc-js`.\n\nImport the library `const OSC = require('osc-js')` or add the script `lib/osc.js` or `lib/osc.min.js` (minified version) for usage in a browser.\n\n## Plugins\n\nosc-js offers a plugin architecture for extending it's networking capabilities. The library comes with four built-in plugins. This is propably all you need for an OSC application:\n\n- `WebsocketClientPlugin` (default)\n- `WebsocketServerPlugin`\n- `DatagramPlugin` for UDP network messaging\n- `BridgePlugin` useful Bridge between WebSocket- and UDP Clients\n\nConfiguration and examples of every plugin can be read here: [Wiki](https://github.com/adzialocha/osc-js/wiki).\n\n### Example: WebSocket Server\n\nRegister the plugin when creating the OSC instance:\n\n```js\nconst osc = new OSC({ plugin: new OSC.WebsocketServerPlugin() })\nosc.open() // listening on 'ws://localhost:8080'\n```\n\n### Example: OSC between MaxMSP/PD/SC etc. and your browser\n\n1. Write a simple webpage. The library will use a WebSocket client\nby default.\n\n  ```html\n  <button id=\"send\">Send Message</button>\n  <script type=\"text/javascript\" src=\"lib/osc.min.js\"></script>\n  <script type=\"text/javascript\">\n    var osc = new OSC();\n    osc.open(); // connect by default to ws://localhost:8080\n\n    document.getElementById('send').addEventListener('click', () => {\n      var message = new OSC.Message('/test/random', Math.random());\n      osc.send(message);\n    });\n  </script>\n  ```\n\n2. Write a Node app (the \"bridge\" between your UDP and WebSocket clients).\n\n  ```js\n  const OSC = require('osc-js')\n\n  const config = { udpClient: { port: 9129 } }\n  const osc = new OSC({ plugin: new OSC.BridgePlugin(config) })\n\n  osc.open() // start a WebSocket server on port 8080\n  ```\n\n3. Create your Max/MSP patch (or PD, SuperCollider etc.).\n\n  ```\n  [udpreceive 9129] // incoming '/test/random' messages with random number\n  ```\n\n### Custom solutions with Plugin API\n\nIt is possible to write more sophisticated solutions for OSC applications without loosing the osc-js interface (including its message handling etc.). Read the [Plugin API documentation](https://github.com/adzialocha/osc-js/wiki/Plugin-API) for further information.\n\n```js\nclass MyCustomPlugin {\n  // ... read docs for implementation details\n}\n\nconst osc = new OSC({ plugin: MyCustomPlugin() })\nosc.open()\n\nosc.on('/test', message => {\n  // use event listener with your plugin\n})\n```\n\n### Usage without plugins\n\nThe library can be used without the mentioned features in case you need to write and read binary OSC data. See this example below for using the [Low-Level API](https://github.com/adzialocha/osc-js/wiki/Low-Level-API) (even though the library already has a solution for handling UDP like in this example):\n\n```js\nconst dgram = require('dgram')\nconst OSC = require('osc-js')\n\nconst socket = dgram.createSocket('udp4')\n\n// send a messsage via udp\nconst message = new OSC.Message('/some/path', 21)\nconst binary = message.pack()\nsocket.send(new Buffer(binary), 0, binary.byteLength, 41234, 'localhost')\n\n// receive a message via UDP\nsocket.on('message', data => {\n  const msg = new OSC.Message()\n  msg.unpack(data)\n  console.log(msg.args)\n})\n```\n\n## Development\n\nosc-js uses [Babel](http://babeljs.io) for ES6 support, [ESDoc](https://esdoc.org) for documentation, [Mocha](https://mochajs.org/) + [Chai](http://chaijs.com/) for testing and [Rollup](https://rollupjs.org) for generating the UMD module.\n\nClone the repository and install all dependencies:\n\n```\ngit clone git@github.com:adzialocha/osc-js.git\ncd osc-js\nnpm install\n```\n\n### Testing\n\n`npm run test` for running the tests.\n`npm run test:watch` for running specs during development. Check code style with `npm run lint`.\n\n### Deployment\n\n`npm run build` for exporting UMD module in `lib` folder.\n\n### Contributors\n\n* [@adzialocha](https://github.com/adzialocha)\n* [@davidgranstrom](https://github.com/davidgranstrom)\n* [@elgiano](https://github.com/elgiano)\n* [@eliot-akira](https://github.com/eliot-akira)\n* [@JacobMuchow](https://github.com/JacobMuchow)\n* [@PeterKey](https://github.com/PeterKey)\n* [@yaxu](https://github.com/yaxu)\n* [@yojeek](https://github.com/yojeek)\n\n### ESDocs\n\n`npm run docs` for generating a `docs` folder with HTML files documenting the library. Read them online here: [https://adzialocha.github.io/osc-js](https://adzialocha.github.io/osc-js)\n\n## License\n\nMIT License `MIT`\n",
    "longname": "/home/runner/work/osc-js/osc-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"osc-js\",\n  \"version\": \"2.4.0\",\n  \"description\": \"OSC library for Node.js and the browser, with customizable Plugin API for WebSocket, UDP or bridge networking\",\n  \"main\": \"lib/osc.js\",\n  \"browser\": \"lib/osc.min.js\",\n  \"types\": \"lib/osc.d.ts\",\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"docs\": \"esdoc\",\n    \"lint\": \"eslint rollup.config.js src/** test/**\",\n    \"test\": \"mocha test/** --require @babel/register --exit\",\n    \"test:watch\": \"mocha test/** --require @babel/register --reporter min --watch test/** src/**\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com/adzialocha/osc-js.git\"\n  },\n  \"keywords\": [\n    \"osc\",\n    \"data\",\n    \"open\",\n    \"sound\",\n    \"control\",\n    \"websocket\",\n    \"udp\",\n    \"datagram\",\n    \"network\"\n  ],\n  \"author\": \"Andreas Dzialocha\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/adzialocha/osc-js/issues\"\n  },\n  \"files\": [\n    \"lib\"\n  ],\n  \"homepage\": \"https://github.com/adzialocha/osc-js#readme\",\n  \"devDependencies\": {\n    \"@babel/core\": \"7.19.3\",\n    \"@babel/eslint-parser\": \"7.19.1\",\n    \"@babel/preset-env\": \"7.19.3\",\n    \"@babel/register\": \"7.18.9\",\n    \"@rollup/plugin-alias\": \"^3.1.9\",\n    \"@rollup/plugin-babel\": \"^5.3.1\",\n    \"@types/node\": \"^18.8.3\",\n    \"@types/ws\": \"^8.5.3\",\n    \"chai\": \"4.3.6\",\n    \"chai-spies-next\": \"0.9.3\",\n    \"esdoc\": \"1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"1.0.0\",\n    \"eslint\": \"8.24.0\",\n    \"eslint-config-airbnb-base\": \"15.0.0\",\n    \"eslint-plugin-import\": \"2.26.0\",\n    \"mocha\": \"10.0.0\",\n    \"rollup\": \"2.79.1\",\n    \"rollup-plugin-cleanup\": \"3.2.1\",\n    \"rollup-plugin-dts\": \"^4.2.2\",\n    \"rollup-plugin-terser\": \"7.0.2\",\n    \"typescript\": \"^4.8.4\"\n  },\n  \"dependencies\": {\n    \"ws\": \"^8.9.0\"\n  }\n}\n",
    "longname": "/home/runner/work/osc-js/osc-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 310,
    "kind": "testFile",
    "name": "test/atomic/blob.spec.js",
    "content": "import { expect } from 'chai'\n\nimport AtomicBlob from '../../src/atomic/blob'\n\n/** @test {AtomicBlob} */\ndescribe('AtomicBlob', () => {\n  const bitArray = {\n    0: 0, 1: 0, 2: 0, 3: 5, 4: 54, 5: 42, 6: 11, 7: 33, 8: 66, 9: 0, 10: 0, 11: 0,\n  }\n\n  let atomic\n\n  before(() => {\n    atomic = new AtomicBlob(new Uint8Array([54, 42, 11, 33, 66]))\n  })\n\n  /** @test {AtomicBlob#pack} */\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      result = atomic.pack()\n    })\n\n    it('returns correct bits', () => {\n      expect(JSON.stringify(result)).to.equal(JSON.stringify(bitArray))\n    })\n\n    it('returns the first 8 bit for the size of the data', () => {\n      const dataView = new DataView(result.buffer)\n      expect(dataView.getInt32(0, false)).to.equal(5)\n    })\n  })\n\n  /** @test {AtomicBlob#unpack} */\n  describe('unpack', () => {\n    let returnValue\n\n    before(() => {\n      const data = new Uint8Array([0, 0, 0, 7, 1, 2, 3, 4, 5, 6, 7])\n      const dataView = new DataView(data.buffer)\n\n      returnValue = atomic.unpack(dataView, 0)\n    })\n\n    it('returns a number', () => {\n      expect(returnValue).to.be.a('number')\n    })\n\n    it('sets the offset to 12', () => {\n      expect(atomic.offset).to.equal(12)\n    })\n\n    it('sets the value to our blob', () => {\n      expect(JSON.stringify(atomic.value)).to.equal(\n        JSON.stringify({\n          0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7,\n        }),\n      )\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/atomic/blob.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/atomic/blob.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/atomic/blob.spec.js~describe0",
    "access": null,
    "description": "AtomicBlob",
    "lineNumber": 6,
    "testTargets": [
      "AtomicBlob"
    ]
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/atomic/blob.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/blob.spec.js~describe0.describe1",
    "access": null,
    "description": "pack",
    "lineNumber": 18,
    "testTargets": [
      "AtomicBlob#pack"
    ]
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/atomic/blob.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/blob.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "returns correct bits",
    "lineNumber": 25
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/atomic/blob.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/blob.spec.js~describe0.describe1.it3",
    "access": null,
    "description": "returns the first 8 bit for the size of the data",
    "lineNumber": 29
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "describe4",
    "testId": 4,
    "memberof": "test/atomic/blob.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/blob.spec.js~describe0.describe4",
    "access": null,
    "description": "unpack",
    "lineNumber": 36,
    "testTargets": [
      "AtomicBlob#unpack"
    ]
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/atomic/blob.spec.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/blob.spec.js~describe0.describe4.it5",
    "access": null,
    "description": "returns a number",
    "lineNumber": 46
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/atomic/blob.spec.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/blob.spec.js~describe0.describe4.it6",
    "access": null,
    "description": "sets the offset to 12",
    "lineNumber": 50
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/atomic/blob.spec.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/blob.spec.js~describe0.describe4.it7",
    "access": null,
    "description": "sets the value to our blob",
    "lineNumber": 54
  },
  {
    "__docId__": 319,
    "kind": "testFile",
    "name": "test/atomic/float32.spec.js",
    "content": "import { expect } from 'chai'\n\nimport AtomicFloat32 from '../../src/atomic/float32'\n\n/** @test {AtomicFloat32} */\ndescribe('AtomicFloat32', () => {\n  const bitArray = {\n    0: 70, 1: 25, 2: 124, 3: 237,\n  }\n\n  let atomic\n\n  before(() => {\n    atomic = new AtomicFloat32(9823.2312155)\n  })\n\n  /** @test {AtomicFloat32#pack} */\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      result = atomic.pack()\n    })\n\n    it('returns correct bits', () => {\n      expect(JSON.stringify(result)).to.equal(JSON.stringify(bitArray))\n    })\n  })\n\n  /** @test {AtomicFloat32#unpack} */\n  describe('unpack', () => {\n    let returnValue\n\n    before(() => {\n      const data = new Uint8Array(8)\n      const dataView = new DataView(data.buffer)\n\n      dataView.setFloat32(0, 1.254999123, false)\n\n      returnValue = atomic.unpack(dataView, 0)\n    })\n\n    it('returns a number', () => {\n      expect(returnValue).to.be.a('number')\n    })\n\n    it('sets the offset to 4', () => {\n      expect(atomic.offset).to.equal(4)\n    })\n\n    it('sets the value to a human readable float number', () => {\n      expect(atomic.value).to.equal(Math.fround(1.254999123))\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/atomic/float32.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/atomic/float32.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/atomic/float32.spec.js~describe8",
    "access": null,
    "description": "AtomicFloat32",
    "lineNumber": 6,
    "testTargets": [
      "AtomicFloat32"
    ]
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/atomic/float32.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/float32.spec.js~describe8.describe9",
    "access": null,
    "description": "pack",
    "lineNumber": 18,
    "testTargets": [
      "AtomicFloat32#pack"
    ]
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/atomic/float32.spec.js~describe8.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/float32.spec.js~describe8.describe9.it10",
    "access": null,
    "description": "returns correct bits",
    "lineNumber": 25
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/atomic/float32.spec.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/float32.spec.js~describe8.describe11",
    "access": null,
    "description": "unpack",
    "lineNumber": 31,
    "testTargets": [
      "AtomicFloat32#unpack"
    ]
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/atomic/float32.spec.js~describe8.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/float32.spec.js~describe8.describe11.it12",
    "access": null,
    "description": "returns a number",
    "lineNumber": 43
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/atomic/float32.spec.js~describe8.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/float32.spec.js~describe8.describe11.it13",
    "access": null,
    "description": "sets the offset to 4",
    "lineNumber": 47
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/atomic/float32.spec.js~describe8.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/float32.spec.js~describe8.describe11.it14",
    "access": null,
    "description": "sets the value to a human readable float number",
    "lineNumber": 51
  },
  {
    "__docId__": 327,
    "kind": "testFile",
    "name": "test/atomic/int32.spec.js",
    "content": "import { expect } from 'chai'\n\nimport AtomicInt32 from '../../src/atomic/int32'\n\n/** @test {AtomicInt32} */\ndescribe('AtomicInt32', () => {\n  const bitArray = {\n    0: 0, 1: 0, 2: 0, 3: 42,\n  }\n\n  let atomic\n\n  before(() => {\n    atomic = new AtomicInt32(42)\n  })\n\n  /** @test {AtomicInt32#pack} */\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      result = atomic.pack()\n    })\n\n    it('returns correct bits', () => {\n      expect(JSON.stringify(result)).to.equal(JSON.stringify(bitArray))\n    })\n  })\n\n  /** @test {AtomicInt32#unpack} */\n  describe('unpack', () => {\n    let returnValue\n\n    before(() => {\n      const data = new Uint8Array(4)\n      const dataView = new DataView(data.buffer)\n\n      dataView.setInt32(0, 214748364, false)\n\n      returnValue = atomic.unpack(dataView, 0)\n    })\n\n    it('returns a number', () => {\n      expect(returnValue).to.be.a('number')\n    })\n\n    it('sets the offset to 4', () => {\n      expect(atomic.offset).to.equal(4)\n    })\n\n    it('sets the value to a human readable number', () => {\n      expect(atomic.value).to.equal(214748364)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/atomic/int32.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/atomic/int32.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/atomic/int32.spec.js~describe15",
    "access": null,
    "description": "AtomicInt32",
    "lineNumber": 6,
    "testTargets": [
      "AtomicInt32"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "describe16",
    "testId": 16,
    "memberof": "test/atomic/int32.spec.js~describe15",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/int32.spec.js~describe15.describe16",
    "access": null,
    "description": "pack",
    "lineNumber": 18,
    "testTargets": [
      "AtomicInt32#pack"
    ]
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/atomic/int32.spec.js~describe15.describe16",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/int32.spec.js~describe15.describe16.it17",
    "access": null,
    "description": "returns correct bits",
    "lineNumber": 25
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "test/atomic/int32.spec.js~describe15",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/int32.spec.js~describe15.describe18",
    "access": null,
    "description": "unpack",
    "lineNumber": 31,
    "testTargets": [
      "AtomicInt32#unpack"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/atomic/int32.spec.js~describe15.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/int32.spec.js~describe15.describe18.it19",
    "access": null,
    "description": "returns a number",
    "lineNumber": 43
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/atomic/int32.spec.js~describe15.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/int32.spec.js~describe15.describe18.it20",
    "access": null,
    "description": "sets the offset to 4",
    "lineNumber": 47
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/atomic/int32.spec.js~describe15.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/int32.spec.js~describe15.describe18.it21",
    "access": null,
    "description": "sets the value to a human readable number",
    "lineNumber": 51
  },
  {
    "__docId__": 335,
    "kind": "testFile",
    "name": "test/atomic/int64.spec.js",
    "content": "import { expect } from 'chai'\n\nimport AtomicInt64 from '../../src/atomic/int64'\n\nconst MAX_INT64 = BigInt('9223372036854775807')\nconst MIN_INT64 = BigInt('-9223372036854775808')\n\n/** @test {AtomicInt64} */\ndescribe('AtomicInt64', () => {\n  const bitArray = {\n    0: 127, 1: 255, 2: 255, 3: 255, 4: 255, 5: 255, 6: 255, 7: 255,\n  }\n\n  let atomic\n\n  before(() => {\n    atomic = new AtomicInt64(MAX_INT64)\n  })\n\n  describe('bounds', () => {\n    it('throws an error in constructor if out of bounds', () => {\n      /* eslint-disable no-new */\n      expect(() => { new AtomicInt64(MAX_INT64 + BigInt('1')) }).to.throw('OSC AtomicInt64 value is out of bounds')\n      expect(() => { new AtomicInt64(MIN_INT64 + BigInt('-1')) }).to.throw('OSC AtomicInt64 value is out of bounds')\n      /* eslint-enable no-new */\n    })\n  })\n\n  /** @test {AtomicInt64#pack} */\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      result = atomic.pack()\n    })\n\n    it('returns correct bits', () => {\n      expect(JSON.stringify(result)).to.equal(JSON.stringify(bitArray))\n    })\n  })\n\n  /** @test {AtomicInt64#unpack} */\n  describe('unpack', () => {\n    let returnValue\n\n    before(() => {\n      const data = new Uint8Array(8)\n      const dataView = new DataView(data.buffer)\n\n      dataView.setBigInt64(0, BigInt.asIntN(64, MAX_INT64), false)\n\n      returnValue = atomic.unpack(dataView, 0)\n    })\n\n    it('returns a number', () => {\n      expect(returnValue).to.be.a('number')\n    })\n\n    it('sets the offset to 4', () => {\n      expect(atomic.offset).to.equal(8)\n    })\n\n    it('sets the value to a human readable number', () => {\n      const res = atomic.value === MAX_INT64\n      expect(res).to.be.true\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/atomic/int64.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/atomic/int64.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/atomic/int64.spec.js~describe22",
    "access": null,
    "description": "AtomicInt64",
    "lineNumber": 9,
    "testTargets": [
      "AtomicInt64"
    ]
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "describe23",
    "testId": 23,
    "memberof": "test/atomic/int64.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/int64.spec.js~describe22.describe23",
    "access": null,
    "description": "bounds",
    "lineNumber": 20
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/atomic/int64.spec.js~describe22.describe23",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/int64.spec.js~describe22.describe23.it24",
    "access": null,
    "description": "throws an error in constructor if out of bounds",
    "lineNumber": 21
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/atomic/int64.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/int64.spec.js~describe22.describe25",
    "access": null,
    "description": "pack",
    "lineNumber": 30,
    "testTargets": [
      "AtomicInt64#pack"
    ]
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/atomic/int64.spec.js~describe22.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/int64.spec.js~describe22.describe25.it26",
    "access": null,
    "description": "returns correct bits",
    "lineNumber": 37
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/atomic/int64.spec.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/int64.spec.js~describe22.describe27",
    "access": null,
    "description": "unpack",
    "lineNumber": 43,
    "testTargets": [
      "AtomicInt64#unpack"
    ]
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/atomic/int64.spec.js~describe22.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/int64.spec.js~describe22.describe27.it28",
    "access": null,
    "description": "returns a number",
    "lineNumber": 55
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/atomic/int64.spec.js~describe22.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/int64.spec.js~describe22.describe27.it29",
    "access": null,
    "description": "sets the offset to 4",
    "lineNumber": 59
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/atomic/int64.spec.js~describe22.describe27",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/int64.spec.js~describe22.describe27.it30",
    "access": null,
    "description": "sets the value to a human readable number",
    "lineNumber": 63
  },
  {
    "__docId__": 345,
    "kind": "testFile",
    "name": "test/atomic/string.spec.js",
    "content": "import { expect } from 'chai'\n\nimport AtomicString from '../../src/atomic/string'\n\nfunction generateLongString(length = 500000) {\n  let str = ''\n\n  for (let i = 0; i < length; i += 1) {\n    str += 'a'\n  }\n\n  return str\n}\n\n/** @test {AtomicString} */\ndescribe('AtomicString', () => {\n  const bitArrayHello = [104, 97, 108, 108, 111, 0, 0, 0]\n\n  let atomic\n\n  before(() => {\n    atomic = new AtomicString('hallo')\n  })\n\n  /** @test {AtomicString#unpack} */\n  describe('unpack', () => {\n    let returnValue\n\n    before(() => {\n      const data = new Uint8Array(bitArrayHello)\n      const dataView = new DataView(data.buffer)\n\n      returnValue = atomic.unpack(dataView, 0)\n    })\n\n    it('returns a number', () => {\n      expect(returnValue).to.be.a('number')\n    })\n\n    it('sets the offset to a multiple of 4', () => {\n      expect(atomic.offset % 4).to.equal(0)\n    })\n\n    it('sets the value to a human readable string', () => {\n      expect(atomic.value).to.equal('hallo')\n    })\n  })\n\n  /** @test {AtomicString#pack} */\n  describe('pack', () => {\n    it('returns correct bits', () => {\n      expect(JSON.stringify(atomic.pack())).to.equal(\n        JSON.stringify(new Int8Array(bitArrayHello)),\n      )\n    })\n\n    it('converts a long string without throwing RangeError', () => {\n      const longString = generateLongString()\n      const largeAtomic = new AtomicString(longString)\n      const dataView = new DataView(largeAtomic.pack().buffer)\n\n      expect(() => {\n        largeAtomic.unpack(dataView, 0)\n      }).to.not.throw(RangeError)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/atomic/string.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "test/atomic/string.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/atomic/string.spec.js~describe31",
    "access": null,
    "description": "AtomicString",
    "lineNumber": 16,
    "testTargets": [
      "AtomicString"
    ]
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "describe32",
    "testId": 32,
    "memberof": "test/atomic/string.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/string.spec.js~describe31.describe32",
    "access": null,
    "description": "unpack",
    "lineNumber": 26,
    "testTargets": [
      "AtomicString#unpack"
    ]
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/atomic/string.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/string.spec.js~describe31.describe32.it33",
    "access": null,
    "description": "returns a number",
    "lineNumber": 36
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/atomic/string.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/string.spec.js~describe31.describe32.it34",
    "access": null,
    "description": "sets the offset to a multiple of 4",
    "lineNumber": 40
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/atomic/string.spec.js~describe31.describe32",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/string.spec.js~describe31.describe32.it35",
    "access": null,
    "description": "sets the value to a human readable string",
    "lineNumber": 44
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/atomic/string.spec.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/string.spec.js~describe31.describe36",
    "access": null,
    "description": "pack",
    "lineNumber": 50,
    "testTargets": [
      "AtomicString#pack"
    ]
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/atomic/string.spec.js~describe31.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/string.spec.js~describe31.describe36.it37",
    "access": null,
    "description": "returns correct bits",
    "lineNumber": 51
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/atomic/string.spec.js~describe31.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/string.spec.js~describe31.describe36.it38",
    "access": null,
    "description": "converts a long string without throwing RangeError",
    "lineNumber": 57
  },
  {
    "__docId__": 354,
    "kind": "testFile",
    "name": "test/atomic/timetag.spec.js",
    "content": "import { expect } from 'chai'\n\nimport AtomicTimetag, {\n  Timetag,\n  SECONDS_70_YEARS,\n} from '../../src/atomic/timetag'\n\n/** @test {Timetag} */\ndescribe('Timetag', () => {\n  let timetag\n  let anotherTimetag\n\n  before(() => {\n    timetag = new Timetag(SECONDS_70_YEARS + 1234, 0)\n    anotherTimetag = new Timetag(3718482449, 131799040)\n  })\n\n  it('sets the values correctly on initialization', () => {\n    expect(timetag.seconds).to.be.equals(SECONDS_70_YEARS + 1234)\n    expect(timetag.fractions).to.be.equals(0)\n  })\n\n  /** @test {Timetag#timestamp} */\n  describe('timestamp', () => {\n    it('converts correctly to js timestamps', () => {\n      expect(timetag.timestamp()).to.be.equals(1234 * 1000)\n      expect(anotherTimetag.timestamp()).to.be.equals(1509493649000)\n    })\n\n    it('converts correctly to NTP timestamps', () => {\n      timetag.timestamp(1)\n\n      expect(timetag.seconds).to.be.equals(SECONDS_70_YEARS)\n      expect(timetag.fractions).to.be.equals(4294967)\n    })\n  })\n})\n\n/** @test {AtomicTimetag} */\ndescribe('AtomicTimetag', () => {\n  const bitArray = {\n    0: 0, 1: 1, 2: 248, 3: 99, 4: 0, 5: 4, 6: 84, 7: 63,\n  }\n\n  let atomic\n\n  before(() => {\n    atomic = new AtomicTimetag(new Timetag(129123, 283711))\n  })\n\n  /** @test {AtomicTimetag#pack} */\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      result = atomic.pack()\n    })\n\n    it('returns correct bits', () => {\n      expect(JSON.stringify(result)).to.equal(JSON.stringify(bitArray))\n    })\n\n    it('consists of 64 bits', () => {\n      expect(result.byteLength * 8).to.equal(64)\n    })\n  })\n\n  /** @test {AtomicTimetag#unpack} */\n  describe('unpack', () => {\n    let returnValue\n\n    before(() => {\n      const data = new Uint8Array([1, 1, 1, 0, 0, 0, 1, 0])\n      const dataView = new DataView(data.buffer)\n\n      returnValue = atomic.unpack(dataView, 0)\n    })\n\n    it('returns a number', () => {\n      expect(returnValue).to.be.a('number')\n    })\n\n    it('sets the offset to 8', () => {\n      expect(atomic.offset).to.equal(8)\n    })\n\n    it('sets the correct NTP values', () => {\n      expect(atomic.value.seconds).to.equal(16843008)\n      expect(atomic.value.fractions).to.equal(256)\n    })\n  })\n\n  describe('constructor', () => {\n    it('with an integer timestamp', () => {\n      atomic = new AtomicTimetag(5000)\n      expect(atomic.value.seconds).to.equal(2208988805)\n    })\n\n    it('with a Date instance', () => {\n      const date = new Date(2015, 2, 21, 5, 0, 21)\n      date.setUTCHours(4)\n      atomic = new AtomicTimetag(date)\n      expect(atomic.value.seconds).to.equal(3635899221)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/atomic/timetag.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "test/atomic/timetag.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe39",
    "access": null,
    "description": "Timetag",
    "lineNumber": 9,
    "testTargets": [
      "Timetag"
    ]
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/atomic/timetag.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe39.it40",
    "access": null,
    "description": "sets the values correctly on initialization",
    "lineNumber": 18
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/atomic/timetag.spec.js~describe39",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe39.describe41",
    "access": null,
    "description": "timestamp",
    "lineNumber": 24,
    "testTargets": [
      "Timetag#timestamp"
    ]
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/atomic/timetag.spec.js~describe39.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe39.describe41.it42",
    "access": null,
    "description": "converts correctly to js timestamps",
    "lineNumber": 25
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/atomic/timetag.spec.js~describe39.describe41",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe39.describe41.it43",
    "access": null,
    "description": "converts correctly to NTP timestamps",
    "lineNumber": 30
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "test/atomic/timetag.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44",
    "access": null,
    "description": "AtomicTimetag",
    "lineNumber": 40,
    "testTargets": [
      "AtomicTimetag"
    ]
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/atomic/timetag.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe45",
    "access": null,
    "description": "pack",
    "lineNumber": 52,
    "testTargets": [
      "AtomicTimetag#pack"
    ]
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/atomic/timetag.spec.js~describe44.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe45.it46",
    "access": null,
    "description": "returns correct bits",
    "lineNumber": 59
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/atomic/timetag.spec.js~describe44.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe45.it47",
    "access": null,
    "description": "consists of 64 bits",
    "lineNumber": 63
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/atomic/timetag.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe48",
    "access": null,
    "description": "unpack",
    "lineNumber": 69,
    "testTargets": [
      "AtomicTimetag#unpack"
    ]
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/atomic/timetag.spec.js~describe44.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe48.it49",
    "access": null,
    "description": "returns a number",
    "lineNumber": 79
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/atomic/timetag.spec.js~describe44.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe48.it50",
    "access": null,
    "description": "sets the offset to 8",
    "lineNumber": 83
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/atomic/timetag.spec.js~describe44.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe48.it51",
    "access": null,
    "description": "sets the correct NTP values",
    "lineNumber": 87
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/atomic/timetag.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe52",
    "access": null,
    "description": "constructor",
    "lineNumber": 93
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/atomic/timetag.spec.js~describe44.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe52.it53",
    "access": null,
    "description": "with an integer timestamp",
    "lineNumber": 94
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/atomic/timetag.spec.js~describe44.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/timetag.spec.js~describe44.describe52.it54",
    "access": null,
    "description": "with a Date instance",
    "lineNumber": 99
  },
  {
    "__docId__": 371,
    "kind": "testFile",
    "name": "test/atomic/uint64.spec.js",
    "content": "import { expect } from 'chai'\n\nimport AtomicUInt64 from '../../src/atomic/uint64'\n\nconst MAX_UINT64 = BigInt('18446744073709551615')\n\n/** @test {AtomicUInt64} */\ndescribe('AtomicUInt64', () => {\n  const bitArray = {\n    0: 255, 1: 255, 2: 255, 3: 255, 4: 255, 5: 255, 6: 255, 7: 255,\n  }\n\n  let atomic\n\n  before(() => {\n    atomic = new AtomicUInt64(MAX_UINT64)\n  })\n\n  describe('bounds', () => {\n    it('throws an error in constructor if out of bounds', () => {\n      /* eslint-disable no-new */\n      expect(() => { new AtomicUInt64(MAX_UINT64 + BigInt('1')) }).to.throw('OSC AtomicUInt64 value is out of bounds')\n      expect(() => { new AtomicUInt64(BigInt('-1')) }).to.throw('OSC AtomicUInt64 value is out of bounds')\n      /* eslint-enable no-new */\n    })\n  })\n\n  /** @test {AtomicUInt64#pack} */\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      result = atomic.pack()\n    })\n\n    it('returns correct bits', () => {\n      expect(JSON.stringify(result)).to.equal(JSON.stringify(bitArray))\n    })\n  })\n\n  /** @test {AtomicUInt64#unpack} */\n  describe('unpack', () => {\n    let returnValue\n\n    before(() => {\n      const data = new Uint8Array(8)\n      const dataView = new DataView(data.buffer)\n\n      dataView.setBigInt64(0, BigInt.asUintN(64, MAX_UINT64), false)\n\n      returnValue = atomic.unpack(dataView, 0)\n    })\n\n    it('returns a number', () => {\n      expect(returnValue).to.be.a('number')\n    })\n\n    it('sets the offset to 4', () => {\n      expect(atomic.offset).to.equal(8)\n    })\n\n    it('sets the value to a human readable number', () => {\n      const res = atomic.value === MAX_UINT64\n      expect(res).to.be.true\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/atomic/uint64.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/atomic/uint64.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/atomic/uint64.spec.js~describe55",
    "access": null,
    "description": "AtomicUInt64",
    "lineNumber": 8,
    "testTargets": [
      "AtomicUInt64"
    ]
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "describe56",
    "testId": 56,
    "memberof": "test/atomic/uint64.spec.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/uint64.spec.js~describe55.describe56",
    "access": null,
    "description": "bounds",
    "lineNumber": 19
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/atomic/uint64.spec.js~describe55.describe56",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/uint64.spec.js~describe55.describe56.it57",
    "access": null,
    "description": "throws an error in constructor if out of bounds",
    "lineNumber": 20
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/atomic/uint64.spec.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/uint64.spec.js~describe55.describe58",
    "access": null,
    "description": "pack",
    "lineNumber": 29,
    "testTargets": [
      "AtomicUInt64#pack"
    ]
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/atomic/uint64.spec.js~describe55.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/uint64.spec.js~describe55.describe58.it59",
    "access": null,
    "description": "returns correct bits",
    "lineNumber": 36
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "test/atomic/uint64.spec.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic/uint64.spec.js~describe55.describe60",
    "access": null,
    "description": "unpack",
    "lineNumber": 42,
    "testTargets": [
      "AtomicUInt64#unpack"
    ]
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/atomic/uint64.spec.js~describe55.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/uint64.spec.js~describe55.describe60.it61",
    "access": null,
    "description": "returns a number",
    "lineNumber": 54
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/atomic/uint64.spec.js~describe55.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/uint64.spec.js~describe55.describe60.it62",
    "access": null,
    "description": "sets the offset to 4",
    "lineNumber": 58
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/atomic/uint64.spec.js~describe55.describe60",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic/uint64.spec.js~describe55.describe60.it63",
    "access": null,
    "description": "sets the value to a human readable number",
    "lineNumber": 62
  },
  {
    "__docId__": 381,
    "kind": "testFile",
    "name": "test/atomic.spec.js",
    "content": "import { expect } from 'chai'\n\nimport Atomic from '../src/atomic'\nimport AtomicBlob from '../src/atomic/blob'\nimport AtomicFloat32 from '../src/atomic/float32'\nimport AtomicFloat64 from '../src/atomic/float64'\nimport AtomicInt32 from '../src/atomic/int32'\nimport AtomicInt64 from '../src/atomic/int64'\nimport AtomicString from '../src/atomic/string'\nimport AtomicTimetag, {\n  Timetag,\n  SECONDS_70_YEARS,\n} from '../src/atomic/timetag'\nimport AtomicUInt64 from '../src/atomic/uint64'\n\n/** @test {Atomic} */\ndescribe('Atomic', () => {\n  let atomic\n  let atomicChildren\n\n  before(() => {\n    atomic = new Atomic(2)\n\n    atomicChildren = [\n      new AtomicInt32(0),\n      new AtomicInt32(123132132),\n      new AtomicInt64(BigInt('0x7FFFFFFFFFFFFFFF')),\n      new AtomicUInt64(BigInt('0xFFFFFFFFFFFFFFFF')),\n      new AtomicFloat32(1299389992.342243),\n      new AtomicFloat64(1299389992.342243),\n      new AtomicString('hello'),\n      new AtomicString(''),\n      new AtomicBlob(new Uint8Array([5, 4, 3, 2, 1])),\n      new AtomicTimetag(new Timetag(SECONDS_70_YEARS + 123, 3312123)),\n    ]\n  })\n\n  it('sets the given value on construction', () => {\n    expect(atomic.value).to.equal(2)\n  })\n\n  it('sets an initial offset of zero', () => {\n    expect(atomic.offset).to.be.equals(0)\n  })\n\n  /** @test {Atomic#unpack} */\n  describe('unpack', () => {\n    it('exists', () => {\n      atomicChildren.forEach((atomicItem) => {\n        expect(atomicItem).to.have.property('unpack')\n      })\n    })\n  })\n\n  describe('pack', () => {\n    it('returns a multiple of 32', () => {\n      atomicChildren.forEach((atomicItem) => {\n        expect((atomicItem.pack().byteLength * 8) % 32).to.equal(0)\n      })\n    })\n\n    it('returns an object of type Uint8Array', () => {\n      atomicChildren.forEach((atomicItem) => {\n        expect(atomicItem.pack()).to.be.a('uint8Array')\n      })\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/atomic.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "describe64",
    "testId": 64,
    "memberof": "test/atomic.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/atomic.spec.js~describe64",
    "access": null,
    "description": "Atomic",
    "lineNumber": 17,
    "testTargets": [
      "Atomic"
    ]
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/atomic.spec.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic.spec.js~describe64.it65",
    "access": null,
    "description": "sets the given value on construction",
    "lineNumber": 38
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/atomic.spec.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic.spec.js~describe64.it66",
    "access": null,
    "description": "sets an initial offset of zero",
    "lineNumber": 42
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "describe67",
    "testId": 67,
    "memberof": "test/atomic.spec.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic.spec.js~describe64.describe67",
    "access": null,
    "description": "unpack",
    "lineNumber": 47,
    "testTargets": [
      "Atomic#unpack"
    ]
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/atomic.spec.js~describe64.describe67",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic.spec.js~describe64.describe67.it68",
    "access": null,
    "description": "exists",
    "lineNumber": 48
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "test/atomic.spec.js~describe64",
    "testDepth": 1,
    "static": true,
    "longname": "test/atomic.spec.js~describe64.describe69",
    "access": null,
    "description": "pack",
    "lineNumber": 55
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/atomic.spec.js~describe64.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic.spec.js~describe64.describe69.it70",
    "access": null,
    "description": "returns a multiple of 32",
    "lineNumber": 56
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/atomic.spec.js~describe64.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "test/atomic.spec.js~describe64.describe69.it71",
    "access": null,
    "description": "returns an object of type Uint8Array",
    "lineNumber": 62
  },
  {
    "__docId__": 390,
    "kind": "testFile",
    "name": "test/bundle.spec.js",
    "content": "import { expect } from 'chai'\n\nimport Bundle from '../src/bundle'\nimport Message from '../src/message'\n\n/** @test {Bundle} */\ndescribe('Bundle', () => {\n  let bundle\n\n  it('contains a set of osc bundle data', () => {\n    bundle = new Bundle()\n    expect(bundle.timetag).to.exist\n  })\n\n  describe('add', () => {\n    before(() => {\n      const message = new Message('/foo/bar', 1, 2, 'ho')\n\n      bundle = new Bundle([message])\n      bundle.add(new Message('/some/path', 42.1))\n      bundle.add(new Bundle(Date.now() + 500))\n    })\n\n    it('contains 3 bundle elements', () => {\n      expect(bundle.bundleElements.length).to.equals(3)\n    })\n  })\n\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      bundle = new Bundle([new Message('/super/path', 12)])\n      result = bundle.pack()\n    })\n\n    it('returns a multiple of 32', () => {\n      expect((result.byteLength * 8) % 32).to.equal(0)\n    })\n\n    it('can be unpacked again', () => {\n      const anotherBundle = new Bundle()\n      anotherBundle.unpack(new DataView(result.buffer), 0)\n\n      expect(anotherBundle.bundleElements[0].address).to.equal('/super/path')\n      expect(anotherBundle.bundleElements[0].args[0]).to.equal(12)\n    })\n  })\n\n  describe('unpack', () => {\n    let result\n\n    before(() => {\n      const data = new Uint8Array([35, 98, 117, 110, 100, 108, 101, 0, 220, 10,\n        223, 251, 100, 221, 48, 0, 0, 0, 0, 20, 47, 116, 101, 115, 116, 47, 112,\n        97, 116, 104, 0, 0, 44, 102, 0, 0, 66, 76, 204, 205])\n      const dataView = new DataView(data.buffer)\n\n      bundle = new Bundle()\n      result = bundle.unpack(dataView, 0)\n    })\n\n    it('decodes the correct timetag', () => {\n      expect(bundle.timetag.value.seconds).to.equal(3691700219)\n    })\n\n    it('returns a number', () => {\n      expect(result).to.be.a('number')\n    })\n  })\n\n  describe('timestamp', () => {\n    before(() => {\n      bundle = new Bundle()\n      bundle.timestamp(1234)\n    })\n\n    it('sets the timetag', () => {\n      expect(bundle.timetag.value.seconds).to.equal(2208988801)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/bundle.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "test/bundle.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/bundle.spec.js~describe72",
    "access": null,
    "description": "Bundle",
    "lineNumber": 7,
    "testTargets": [
      "Bundle"
    ]
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/bundle.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.it73",
    "access": null,
    "description": "contains a set of osc bundle data",
    "lineNumber": 10
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "describe74",
    "testId": 74,
    "memberof": "test/bundle.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe74",
    "access": null,
    "description": "add",
    "lineNumber": 15
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/bundle.spec.js~describe72.describe74",
    "testDepth": 2,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe74.it75",
    "access": null,
    "description": "contains 3 bundle elements",
    "lineNumber": 24
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "describe76",
    "testId": 76,
    "memberof": "test/bundle.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe76",
    "access": null,
    "description": "pack",
    "lineNumber": 29
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/bundle.spec.js~describe72.describe76",
    "testDepth": 2,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe76.it77",
    "access": null,
    "description": "returns a multiple of 32",
    "lineNumber": 37
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/bundle.spec.js~describe72.describe76",
    "testDepth": 2,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe76.it78",
    "access": null,
    "description": "can be unpacked again",
    "lineNumber": 41
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/bundle.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe79",
    "access": null,
    "description": "unpack",
    "lineNumber": 50
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/bundle.spec.js~describe72.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe79.it80",
    "access": null,
    "description": "decodes the correct timetag",
    "lineNumber": 63
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/bundle.spec.js~describe72.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe79.it81",
    "access": null,
    "description": "returns a number",
    "lineNumber": 67
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "test/bundle.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe82",
    "access": null,
    "description": "timestamp",
    "lineNumber": 72
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/bundle.spec.js~describe72.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/bundle.spec.js~describe72.describe82.it83",
    "access": null,
    "description": "sets the timetag",
    "lineNumber": 78
  },
  {
    "__docId__": 403,
    "kind": "testFile",
    "name": "test/common/helpers.spec.js",
    "content": "import { expect } from 'chai'\n\nimport EncodeHelper, { typeTag, prepareAddress } from '../../src/common/helpers'\n\nimport AtomicFloat32 from '../../src/atomic/float32'\nimport AtomicString from '../../src/atomic/string'\n\n/** @test {typeTag} */\ndescribe('typeTag', () => {\n  it('returns the right OSC Type Tag characters', () => {\n    expect(typeTag(2)).to.be.equals('i')\n    expect(typeTag(2.2)).to.be.equals('f')\n    expect(typeTag('joe')).to.be.equals('s')\n    expect(typeTag(new Uint8Array([1, 2, 3]))).to.be.equals('b')\n  })\n})\n\n/** @test {prepareAddress} */\ndescribe('prepareAddress', () => {\n  it('builds an valid  address from an array', () => {\n    expect(prepareAddress(['hello', 'world'])).to.be.equals('/hello/world')\n  })\n\n  it('builds an valid  address from an invalid string', () => {\n    expect(prepareAddress('hello/world')).to.be.equals('/hello/world')\n  })\n\n  it('removes the last slash', () => {\n    expect(prepareAddress('/hello/world/')).to.be.equals('/hello/world')\n  })\n})\n\n/** @test {EncodeHelper} */\ndescribe('EncodeHelper', () => {\n  let encoder\n\n  before(() => {\n    encoder = new EncodeHelper()\n    encoder.add(new AtomicFloat32(24.12))\n    encoder.add(new AtomicString('joe'))\n  })\n\n  it('adds items up and increases the byteLength accordingly', () => {\n    expect(encoder.byteLength).to.be.equals(8)\n    expect(encoder.data.length).to.be.equals(2)\n  })\n\n  it('merges the items to one Uint8Array', () => {\n    const merged = encoder.merge()\n\n    expect(merged.length).to.be.equals(8)\n    expect(merged).to.be.a('uint8array')\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/common/helpers.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "describe84",
    "testId": 84,
    "memberof": "test/common/helpers.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/common/helpers.spec.js~describe84",
    "access": null,
    "description": "typeTag",
    "lineNumber": 9,
    "testTargets": [
      "typeTag"
    ]
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/common/helpers.spec.js~describe84",
    "testDepth": 1,
    "static": true,
    "longname": "test/common/helpers.spec.js~describe84.it85",
    "access": null,
    "description": "returns the right OSC Type Tag characters",
    "lineNumber": 10
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "describe86",
    "testId": 86,
    "memberof": "test/common/helpers.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/common/helpers.spec.js~describe86",
    "access": null,
    "description": "prepareAddress",
    "lineNumber": 19,
    "testTargets": [
      "prepareAddress"
    ]
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/common/helpers.spec.js~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "test/common/helpers.spec.js~describe86.it87",
    "access": null,
    "description": "builds an valid  address from an array",
    "lineNumber": 20
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/common/helpers.spec.js~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "test/common/helpers.spec.js~describe86.it88",
    "access": null,
    "description": "builds an valid  address from an invalid string",
    "lineNumber": 24
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/common/helpers.spec.js~describe86",
    "testDepth": 1,
    "static": true,
    "longname": "test/common/helpers.spec.js~describe86.it89",
    "access": null,
    "description": "removes the last slash",
    "lineNumber": 28
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "describe90",
    "testId": 90,
    "memberof": "test/common/helpers.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/common/helpers.spec.js~describe90",
    "access": null,
    "description": "EncodeHelper",
    "lineNumber": 34,
    "testTargets": [
      "EncodeHelper"
    ]
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/common/helpers.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "test/common/helpers.spec.js~describe90.it91",
    "access": null,
    "description": "adds items up and increases the byteLength accordingly",
    "lineNumber": 43
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/common/helpers.spec.js~describe90",
    "testDepth": 1,
    "static": true,
    "longname": "test/common/helpers.spec.js~describe90.it92",
    "access": null,
    "description": "merges the items to one Uint8Array",
    "lineNumber": 48
  },
  {
    "__docId__": 413,
    "kind": "testFile",
    "name": "test/common/utils.spec.js",
    "content": "import { expect } from 'chai'\n\nimport { pad, isNull, isUndefined } from '../../src/common/utils'\n\n/** @test {pad} */\ndescribe('pad', () => {\n  it('returns the next multiple of 4', () => {\n    expect(pad(2)).to.be.equals(4)\n    expect(pad(8)).to.be.equals(8)\n    expect(pad(31)).to.be.equals(32)\n    expect(pad(0)).to.be.equals(0)\n  })\n})\n\n/** @test {isNull} */\ndescribe('isNull', () => {\n  it('correctly identifies null value', () => {\n    expect(isNull(0)).to.be.false\n    expect(isNull(undefined)).to.be.false\n    expect(isNull(null)).to.be.true\n  })\n})\n\n/** @test {isUndefined} */\ndescribe('isUndefined', () => {\n  it('correctly identifies undefined value', () => {\n    expect(isUndefined(0)).to.be.false\n    expect(isUndefined(undefined)).to.be.true\n    expect(isUndefined(null)).to.be.false\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/common/utils.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "test/common/utils.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/common/utils.spec.js~describe93",
    "access": null,
    "description": "pad",
    "lineNumber": 6,
    "testTargets": [
      "pad"
    ]
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/common/utils.spec.js~describe93",
    "testDepth": 1,
    "static": true,
    "longname": "test/common/utils.spec.js~describe93.it94",
    "access": null,
    "description": "returns the next multiple of 4",
    "lineNumber": 7
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "describe95",
    "testId": 95,
    "memberof": "test/common/utils.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/common/utils.spec.js~describe95",
    "access": null,
    "description": "isNull",
    "lineNumber": 16,
    "testTargets": [
      "isNull"
    ]
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/common/utils.spec.js~describe95",
    "testDepth": 1,
    "static": true,
    "longname": "test/common/utils.spec.js~describe95.it96",
    "access": null,
    "description": "correctly identifies null value",
    "lineNumber": 17
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "describe97",
    "testId": 97,
    "memberof": "test/common/utils.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/common/utils.spec.js~describe97",
    "access": null,
    "description": "isUndefined",
    "lineNumber": 25,
    "testTargets": [
      "isUndefined"
    ]
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/common/utils.spec.js~describe97",
    "testDepth": 1,
    "static": true,
    "longname": "test/common/utils.spec.js~describe97.it98",
    "access": null,
    "description": "correctly identifies undefined value",
    "lineNumber": 26
  },
  {
    "__docId__": 420,
    "kind": "testFile",
    "name": "test/events.spec.js",
    "content": "import chai, { expect } from 'chai'\nimport spies from 'chai-spies-next'\n\nimport EventHandler from '../src/events'\nimport Message from '../src/message'\n\nchai.use(spies)\n\n/** @test {EventHandler} */\ndescribe('EventHandler', () => {\n  let handler\n\n  before(() => {\n    handler = new EventHandler()\n  })\n\n  /** @test {EventHandler#on} */\n  describe('on', () => {\n    let spy\n    let id\n\n    before(() => {\n      spy = chai.spy()\n      id = handler.on('/test/path', spy)\n    })\n\n    it('returns different subscription ids for each listener', () => {\n      const anotherId = handler.on(['test', 'path'], () => {})\n      expect(id !== anotherId).to.be.true\n    })\n\n    it('registers a handler which can be called', () => {\n      handler.notify('/test/path', {})\n      expect(spy).to.have.been.called()\n    })\n  })\n\n  /** @test {EventHandler#off} */\n  describe('off', () => {\n    let spy\n    let id\n\n    before(() => {\n      spy = chai.spy()\n      id = handler.on('/test/path', spy)\n    })\n\n    it('removes a handler', () => {\n      const success = handler.off('/test/path', id)\n      handler.notify('/test/path', {})\n\n      expect(spy).to.not.have.been.called()\n      expect(success).to.be.true\n    })\n\n    it('returns false when handler was not found', () => {\n      const success = handler.off('/test/path/which/does/not/exist', id)\n      expect(success).to.be.false\n    })\n  })\n\n  /** @test {EventHandler#notify} */\n  describe('notify', () => {\n    const testdata = {\n      test: 'data',\n    }\n\n    const spy = []\n\n    before(() => {\n      for (let i = 0; i < 12; i += 1) {\n        spy.push(chai.spy())\n      }\n\n      // regular address handlers\n      handler.on('/', spy[0])\n      handler.on('/one/test', spy[1])\n      handler.on('/and/another', spy[2])\n      handler.on('/two/test/path', spy[3])\n      handler.on(['two', 'test', 'path'], spy[4])\n      handler.on('/two/some/path', spy[5])\n\n      // system event handlers\n      handler.on('error', spy[6])\n      handler.on('close', spy[7])\n      handler.on('open', spy[8])\n\n      // pattern address handlers\n      handler.on('/two/*/path', spy[9])\n      handler.on('*', spy[10])\n      handler.on('/o?e/{test,bar}', spy[11])\n    })\n\n    afterEach(() => {\n      spy.forEach((item) => {\n        item.reset()\n      })\n    })\n\n    it('passes over the event data', () => {\n      handler.notify('/and/another', testdata)\n      expect(spy[2]).have.been.called.with(testdata)\n    })\n\n    it('accepts messages', () => {\n      handler.notify(new Message(['and', 'another']))\n      expect(spy[2]).have.been.called()\n    })\n\n    it('accepts binary packets', () => {\n      const binary = new Uint8Array([\n        47, 97, 110, 100, 47, 97, 110,\n        111, 116, 104, 101, 114, 0, 0, 0, 0, 44, 0, 0, 0,\n      ])\n\n      handler.notify(binary)\n      expect(spy[2]).have.been.called()\n    })\n\n    describe('event listeners', () => {\n      it('notifies error callbacks', () => {\n        handler.notify('error', testdata)\n        expect(spy[6]).have.been.called.with(testdata)\n      })\n\n      it('notifies close callbacks', () => {\n        handler.notify('close', testdata)\n        expect(spy[7]).have.been.called.with(testdata)\n      })\n\n      it('notifies open callbacks', () => {\n        handler.notify('open', testdata)\n        expect(spy[8]).have.been.called.with(testdata)\n      })\n    })\n\n    describe('address listeners with timetags', () => {\n      it('calls the handler later', () => {\n        handler.notify('/', testdata, Date.now() + 5000)\n\n        expect(spy[0]).not.have.been.called()\n      })\n    })\n\n    describe('address listeners with regular strings', () => {\n      it('calls the root listener', () => {\n        handler.notify('/', testdata)\n\n        expect(spy[0]).have.been.called()\n        expect(spy[1]).not.have.been.called()\n        expect(spy[4]).not.have.been.called()\n      })\n\n      it('calls two listeners with the same address', () => {\n        handler.notify('/two/test/path', testdata)\n\n        expect(spy[3]).have.been.called()\n        expect(spy[4]).have.been.called()\n      })\n\n      it('works with {} wildcard', () => {\n        handler.notify('/two/{test,some}/path', testdata)\n\n        expect(spy[1]).not.have.been.called()\n        expect(spy[3]).have.been.called()\n        expect(spy[4]).have.been.called()\n        expect(spy[5]).have.been.called()\n      })\n\n      it('works with [] wildcard', () => {\n        handler.notify('/[pawgfo]ne/[bnit]est', testdata)\n\n        expect(spy[1]).have.been.called()\n        expect(spy[2]).not.have.been.called()\n      })\n\n      it('works with [!] wildcard', () => {\n        handler.notify('/two/[!s][eso][tspm][tea]/path', testdata)\n\n        expect(spy[3]).have.been.called()\n        expect(spy[5]).not.have.been.called()\n      })\n\n      it('works with [a-z] wildcard', () => {\n        handler.notify('/two/[a-z]est/p[a-c]t[e-i]', testdata)\n\n        expect(spy[3]).have.been.called()\n        expect(spy[5]).not.have.been.called()\n      })\n\n      it('works with * wildcard', () => {\n        handler.notify('/two/*', testdata)\n\n        expect(spy[3]).have.been.called()\n        expect(spy[4]).have.been.called()\n        expect(spy[5]).have.been.called()\n        expect(spy[1]).not.have.been.called()\n      })\n\n      it('works with * wildcard calling all', () => {\n        handler.notify('/*', testdata)\n\n        expect(spy[0]).have.been.called()\n        expect(spy[1]).have.been.called()\n        expect(spy[2]).have.been.called()\n        expect(spy[3]).have.been.called()\n        expect(spy[4]).have.been.called()\n        expect(spy[5]).have.been.called()\n      })\n\n      it('works with ? wildcard', () => {\n        handler.notify('/two/????/pa?h', testdata)\n\n        expect(spy[0]).not.have.been.called()\n        expect(spy[3]).have.been.called()\n        expect(spy[5]).have.been.called()\n      })\n    })\n\n    describe('address listeners with pattern matching', () => {\n      it('calls wildcard listeners', () => {\n        handler.notify('/two/bar/path', testdata)\n\n        expect(spy[9]).have.been.called()\n        expect(spy[10]).have.been.called()\n        expect(spy[4]).not.have.been.called()\n      })\n\n      it('calls group matching listener', () => {\n        handler.notify('/ose/test', testdata)\n\n        expect(spy[10]).have.been.called()\n        expect(spy[11]).have.been.called()\n        expect(spy[1]).not.have.been.called()\n        expect(spy[9]).not.have.been.called()\n      })\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/events.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/events.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/events.spec.js~describe99",
    "access": null,
    "description": "EventHandler",
    "lineNumber": 10,
    "testTargets": [
      "EventHandler"
    ]
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "describe100",
    "testId": 100,
    "memberof": "test/events.spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe100",
    "access": null,
    "description": "on",
    "lineNumber": 18,
    "testTargets": [
      "EventHandler#on"
    ]
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/events.spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe100.it101",
    "access": null,
    "description": "returns different subscription ids for each listener",
    "lineNumber": 27
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "it102",
    "testId": 102,
    "memberof": "test/events.spec.js~describe99.describe100",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe100.it102",
    "access": null,
    "description": "registers a handler which can be called",
    "lineNumber": 32
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "describe103",
    "testId": 103,
    "memberof": "test/events.spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe103",
    "access": null,
    "description": "off",
    "lineNumber": 39,
    "testTargets": [
      "EventHandler#off"
    ]
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/events.spec.js~describe99.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe103.it104",
    "access": null,
    "description": "removes a handler",
    "lineNumber": 48
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/events.spec.js~describe99.describe103",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe103.it105",
    "access": null,
    "description": "returns false when handler was not found",
    "lineNumber": 56
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "describe106",
    "testId": 106,
    "memberof": "test/events.spec.js~describe99",
    "testDepth": 1,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106",
    "access": null,
    "description": "notify",
    "lineNumber": 63,
    "testTargets": [
      "EventHandler#notify"
    ]
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/events.spec.js~describe99.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.it107",
    "access": null,
    "description": "passes over the event data",
    "lineNumber": 100
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/events.spec.js~describe99.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.it108",
    "access": null,
    "description": "accepts messages",
    "lineNumber": 105
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/events.spec.js~describe99.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.it109",
    "access": null,
    "description": "accepts binary packets",
    "lineNumber": 110
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "describe110",
    "testId": 110,
    "memberof": "test/events.spec.js~describe99.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe110",
    "access": null,
    "description": "event listeners",
    "lineNumber": 120
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/events.spec.js~describe99.describe106.describe110",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe110.it111",
    "access": null,
    "description": "notifies error callbacks",
    "lineNumber": 121
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/events.spec.js~describe99.describe106.describe110",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe110.it112",
    "access": null,
    "description": "notifies close callbacks",
    "lineNumber": 126
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/events.spec.js~describe99.describe106.describe110",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe110.it113",
    "access": null,
    "description": "notifies open callbacks",
    "lineNumber": 131
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "describe114",
    "testId": 114,
    "memberof": "test/events.spec.js~describe99.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe114",
    "access": null,
    "description": "address listeners with timetags",
    "lineNumber": 137
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/events.spec.js~describe99.describe106.describe114",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe114.it115",
    "access": null,
    "description": "calls the handler later",
    "lineNumber": 138
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "test/events.spec.js~describe99.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116",
    "access": null,
    "description": "address listeners with regular strings",
    "lineNumber": 145
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/events.spec.js~describe99.describe106.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116.it117",
    "access": null,
    "description": "calls the root listener",
    "lineNumber": 146
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/events.spec.js~describe99.describe106.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116.it118",
    "access": null,
    "description": "calls two listeners with the same address",
    "lineNumber": 154
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "it119",
    "testId": 119,
    "memberof": "test/events.spec.js~describe99.describe106.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116.it119",
    "access": null,
    "description": "works with {} wildcard",
    "lineNumber": 161
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/events.spec.js~describe99.describe106.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116.it120",
    "access": null,
    "description": "works with [] wildcard",
    "lineNumber": 170
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/events.spec.js~describe99.describe106.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116.it121",
    "access": null,
    "description": "works with [!] wildcard",
    "lineNumber": 177
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/events.spec.js~describe99.describe106.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116.it122",
    "access": null,
    "description": "works with [a-z] wildcard",
    "lineNumber": 184
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it123",
    "testId": 123,
    "memberof": "test/events.spec.js~describe99.describe106.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116.it123",
    "access": null,
    "description": "works with * wildcard",
    "lineNumber": 191
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/events.spec.js~describe99.describe106.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116.it124",
    "access": null,
    "description": "works with * wildcard calling all",
    "lineNumber": 200
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/events.spec.js~describe99.describe106.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe116.it125",
    "access": null,
    "description": "works with ? wildcard",
    "lineNumber": 211
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "describe126",
    "testId": 126,
    "memberof": "test/events.spec.js~describe99.describe106",
    "testDepth": 2,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe126",
    "access": null,
    "description": "address listeners with pattern matching",
    "lineNumber": 220
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it127",
    "testId": 127,
    "memberof": "test/events.spec.js~describe99.describe106.describe126",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe126.it127",
    "access": null,
    "description": "calls wildcard listeners",
    "lineNumber": 221
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/events.spec.js~describe99.describe106.describe126",
    "testDepth": 3,
    "static": true,
    "longname": "test/events.spec.js~describe99.describe106.describe126.it128",
    "access": null,
    "description": "calls group matching listener",
    "lineNumber": 229
  },
  {
    "__docId__": 451,
    "kind": "testFile",
    "name": "test/message.spec.js",
    "content": "import { expect } from 'chai'\n\nimport Message, { TypedMessage } from '../src/message'\n\n/** @test {TypedMessage} */\ndescribe('TypedMessage', () => {\n  let typedMessage\n\n  before(() => {\n    typedMessage = new TypedMessage()\n  })\n\n  it('contains a set of osc message data', () => {\n    expect(typedMessage.address).to.exist\n    expect(typedMessage.types).to.exist\n    expect(typedMessage.args).to.exist\n  })\n\n  it('can be initialized with an address', () => {\n    const anotherMessage = new TypedMessage('somekind/of/path')\n    expect(anotherMessage.address).to.be.equals('/somekind/of/path')\n  })\n\n  it('can be initialized with an address and argument array', () => {\n    const anotherMessage = new TypedMessage('/a/path', [\n      { type: 'i', value: 123 },\n      { type: 'd', value: 123.123 },\n      { type: 'h', value: BigInt('0xFFFFFF') },\n      { type: 'T', value: null },\n    ])\n    expect(anotherMessage.types.length).to.equal(4)\n    expect(anotherMessage.args.length).to.equal(4)\n  })\n\n  /** @test {TypedMessage#add} */\n  describe('add', () => {\n    before(() => {\n      typedMessage = new TypedMessage()\n\n      typedMessage.add('s', 'Hello World')\n      typedMessage.add('i', 121123)\n      typedMessage.add('d', 123.123456789)\n      typedMessage.add('T')\n      typedMessage.add('i', 10)\n    })\n\n    it('pushes the values to our args array', () => {\n      expect(typedMessage.args).to.deep.equal(['Hello World', 121123, 123.123456789, true, 10])\n    })\n\n    it('adds to the types string accordingly', () => {\n      expect(typedMessage.types).to.equal('sidTi')\n    })\n  })\n\n  /** @test {TypedMessage#pack} */\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      typedMessage = new TypedMessage('/test/types')\n\n      typedMessage.add('i', 1)\n      typedMessage.add('h', BigInt('0x7FFFFFFFFFFFFFFF'))\n      typedMessage.add('t', BigInt('0xFFFFFFFFFFFFFFFF'))\n      typedMessage.add('f', 123.123)\n      typedMessage.add('d', 123.123456789)\n      typedMessage.add('s', 'stringValue')\n      typedMessage.add('b', new Uint8Array([100, 52]))\n      typedMessage.add('T') // true\n      typedMessage.add('F') // false\n      typedMessage.add('N') // Nil\n      typedMessage.add('I') // Infinitum\n\n      result = typedMessage.pack()\n    })\n\n    it('returns an object we can unpack again', () => {\n      const anotherMessage = new TypedMessage()\n      anotherMessage.unpack(new DataView(result.buffer), 0)\n\n      expect(anotherMessage.address).to.equal('/test/types')\n      expect(anotherMessage.args.length).to.equal(11)\n      expect(anotherMessage.args[0]).to.equal(1)\n      // chai.expect cannot handle BigInt directly\n      expect(anotherMessage.args[1] === BigInt('0x7FFFFFFFFFFFFFFF')).to.be.true\n      expect(anotherMessage.args[2] === BigInt('0xFFFFFFFFFFFFFFFF')).to.be.true\n      expect(anotherMessage.args[3]).to.be.closeTo(123.123, 0.00001)\n      expect(anotherMessage.args[4]).to.be.closeTo(123.123456789, 0.00001)\n      expect(anotherMessage.args[5]).to.equal('stringValue')\n      expect(anotherMessage.args[6][0]).to.equal(100)\n      expect(anotherMessage.args[7]).to.equal(true)\n      expect(anotherMessage.args[8]).to.equal(false)\n      expect(anotherMessage.args[9]).to.equal(null)\n      expect(anotherMessage.args[10]).to.equal(Infinity)\n\n      expect(anotherMessage.types.length).to.equal(12)\n      expect(anotherMessage.types).to.equal(',ihtfdsbTFNI')\n    })\n\n    it('returns a multiple of 32', () => {\n      expect((result.byteLength * 8) % 32).to.equal(0)\n    })\n  })\n\n  /** @test {TypedMessage#unpack} */\n  describe('unpack', () => {\n    let result\n    let anotherMessage\n\n    before(() => {\n      anotherMessage = new TypedMessage()\n      const data = new Uint8Array([47, 115, 111, 109, 101, 47, 97,\n        100, 100, 114, 0, 0, 44, 100, 115, 105, 0, 0, 0, 0, 64, 94,\n        199, 230, 183, 77, 206, 89, 116, 101, 115, 116,\n        0, 0, 0, 0, 0, 0, 0, 0])\n      const dataView = new DataView(data.buffer, 0)\n      result = anotherMessage.unpack(dataView)\n    })\n\n    it('decodes the message correctly', () => {\n      expect(anotherMessage.address).to.equal('/some/addr')\n      expect(anotherMessage.args[1]).to.equal('test')\n      expect(anotherMessage.args[2]).to.equal(0)\n    })\n\n    it('returns a number', () => {\n      expect(result).to.be.a('number')\n    })\n  })\n})\n\n/** @test {Message} */\ndescribe('Message', () => {\n  let message\n\n  before(() => {\n    message = new Message()\n  })\n\n  it('contains a set of osc message data', () => {\n    expect(message.address).to.exist\n    expect(message.types).to.exist\n    expect(message.args).to.exist\n  })\n\n  it('fills the arguments and address during its construction', () => {\n    const anotherMessage = new Message('somekind/of/path', 221.21, 317, 'test', false, null)\n\n    expect(anotherMessage.address).to.be.equals('/somekind/of/path')\n    expect(anotherMessage.args[0]).to.be.equals(221.21)\n    expect(anotherMessage.args[3]).to.be.equals(false)\n    expect(anotherMessage.args[4]).to.be.equals(null)\n    expect(anotherMessage.types).to.be.equals('fisFN')\n  })\n\n  /** @test {Message#add} */\n  describe('add', () => {\n    before(() => {\n      message = new Message()\n\n      message.add('Hello World')\n      message.add(121123)\n    })\n\n    it('pushes the values to our args array', () => {\n      expect(message.args).to.deep.equal(['Hello World', 121123])\n    })\n\n    it('changes the types string accordingly', () => {\n      expect(message.types).to.equal('si')\n    })\n  })\n\n  /** @test {Message#pack} */\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      message = new Message()\n\n      message.address = '/sssss/osc/sssssadss'\n      message.add(12)\n      message.add(null)\n      message.add('Hello World')\n      message.add(Infinity)\n      message.add(22111.344)\n      message.add(new Uint8Array([100, 52]))\n\n      result = message.pack()\n    })\n\n    it('returns an object we can unpack again', () => {\n      const anotherMessage = new Message()\n      anotherMessage.unpack(new DataView(result.buffer), 0)\n\n      expect(anotherMessage.address).to.equal('/sssss/osc/sssssadss')\n      expect(anotherMessage.args[1]).to.equal(null)\n      expect(anotherMessage.args[3]).to.equal(Infinity)\n      expect(anotherMessage.args[5][0]).to.equal(100)\n    })\n\n    it('returns a multiple of 32', () => {\n      expect((result.byteLength * 8) % 32).to.equal(0)\n    })\n  })\n\n  /** @test {Message#unpack} */\n  describe('unpack', () => {\n    let result\n    let anotherMessage\n\n    before(() => {\n      anotherMessage = new Message()\n      const data = new Uint8Array([\n        47, 116, 101, 115, 116, 47, 112, 97,\n        116, 104, 0, 0, 44, 105, 0, 0, 0, 0, 2, 141])\n      const dataView = new DataView(data.buffer, 0)\n\n      result = anotherMessage.unpack(dataView)\n    })\n\n    it('decodes the message correctly', () => {\n      expect(anotherMessage.address).to.equal('/test/path')\n      expect(anotherMessage.args[0]).to.equal(653)\n    })\n\n    it('returns a number', () => {\n      expect(result).to.be.a('number')\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/message.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "describe129",
    "testId": 129,
    "memberof": "test/message.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/message.spec.js~describe129",
    "access": null,
    "description": "TypedMessage",
    "lineNumber": 6,
    "testTargets": [
      "TypedMessage"
    ]
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/message.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe129.it130",
    "access": null,
    "description": "contains a set of osc message data",
    "lineNumber": 13
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/message.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe129.it131",
    "access": null,
    "description": "can be initialized with an address",
    "lineNumber": 19
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "it132",
    "testId": 132,
    "memberof": "test/message.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe129.it132",
    "access": null,
    "description": "can be initialized with an address and argument array",
    "lineNumber": 24
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "describe133",
    "testId": 133,
    "memberof": "test/message.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe129.describe133",
    "access": null,
    "description": "add",
    "lineNumber": 36,
    "testTargets": [
      "TypedMessage#add"
    ]
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/message.spec.js~describe129.describe133",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe129.describe133.it134",
    "access": null,
    "description": "pushes the values to our args array",
    "lineNumber": 47
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/message.spec.js~describe129.describe133",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe129.describe133.it135",
    "access": null,
    "description": "adds to the types string accordingly",
    "lineNumber": 51
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "describe136",
    "testId": 136,
    "memberof": "test/message.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe129.describe136",
    "access": null,
    "description": "pack",
    "lineNumber": 57,
    "testTargets": [
      "TypedMessage#pack"
    ]
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/message.spec.js~describe129.describe136",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe129.describe136.it137",
    "access": null,
    "description": "returns an object we can unpack again",
    "lineNumber": 78
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/message.spec.js~describe129.describe136",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe129.describe136.it138",
    "access": null,
    "description": "returns a multiple of 32",
    "lineNumber": 101
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/message.spec.js~describe129",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe129.describe139",
    "access": null,
    "description": "unpack",
    "lineNumber": 107,
    "testTargets": [
      "TypedMessage#unpack"
    ]
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/message.spec.js~describe129.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe129.describe139.it140",
    "access": null,
    "description": "decodes the message correctly",
    "lineNumber": 121
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/message.spec.js~describe129.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe129.describe139.it141",
    "access": null,
    "description": "returns a number",
    "lineNumber": 127
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "describe142",
    "testId": 142,
    "memberof": "test/message.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/message.spec.js~describe142",
    "access": null,
    "description": "Message",
    "lineNumber": 134,
    "testTargets": [
      "Message"
    ]
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/message.spec.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe142.it143",
    "access": null,
    "description": "contains a set of osc message data",
    "lineNumber": 141
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "it144",
    "testId": 144,
    "memberof": "test/message.spec.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe142.it144",
    "access": null,
    "description": "fills the arguments and address during its construction",
    "lineNumber": 147
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "describe145",
    "testId": 145,
    "memberof": "test/message.spec.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe142.describe145",
    "access": null,
    "description": "add",
    "lineNumber": 158,
    "testTargets": [
      "Message#add"
    ]
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/message.spec.js~describe142.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe142.describe145.it146",
    "access": null,
    "description": "pushes the values to our args array",
    "lineNumber": 166
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/message.spec.js~describe142.describe145",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe142.describe145.it147",
    "access": null,
    "description": "changes the types string accordingly",
    "lineNumber": 170
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "describe148",
    "testId": 148,
    "memberof": "test/message.spec.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe142.describe148",
    "access": null,
    "description": "pack",
    "lineNumber": 176,
    "testTargets": [
      "Message#pack"
    ]
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/message.spec.js~describe142.describe148",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe142.describe148.it149",
    "access": null,
    "description": "returns an object we can unpack again",
    "lineNumber": 193
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/message.spec.js~describe142.describe148",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe142.describe148.it150",
    "access": null,
    "description": "returns a multiple of 32",
    "lineNumber": 203
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "test/message.spec.js~describe142",
    "testDepth": 1,
    "static": true,
    "longname": "test/message.spec.js~describe142.describe151",
    "access": null,
    "description": "unpack",
    "lineNumber": 209,
    "testTargets": [
      "Message#unpack"
    ]
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "it152",
    "testId": 152,
    "memberof": "test/message.spec.js~describe142.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe142.describe151.it152",
    "access": null,
    "description": "decodes the message correctly",
    "lineNumber": 223
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/message.spec.js~describe142.describe151",
    "testDepth": 2,
    "static": true,
    "longname": "test/message.spec.js~describe142.describe151.it153",
    "access": null,
    "description": "returns a number",
    "lineNumber": 228
  },
  {
    "__docId__": 477,
    "kind": "testFile",
    "name": "test/osc.spec.js",
    "content": "import chai, { expect } from 'chai'\nimport spies from 'chai-spies-next'\n\nimport OSC from '../src/osc'\n\nimport Packet from '../src/packet'\nimport Message from '../src/message'\n\nchai.use(spies)\n\nclass TestPlugin {\n  constructor() {\n    this.socketStatus = -1\n    this.notify = null\n  }\n\n  registerNotify(fn) {\n    this.notify = fn\n  }\n\n  status() {\n    return this.socketStatus\n  }\n\n  open() {\n    this.socketStatus = 1\n    this.notify('open')\n  }\n\n  send() {\n    // unused\n  }\n\n  close() {\n    this.socketStatus = 3\n    this.notify('close')\n  }\n\n  // mocking helpers\n  mockError() {\n    this.notify('error', { message: 'An error' })\n  }\n\n  mockMessage() {\n    this.notify(new Message(['test/path'], 55.1, 224))\n  }\n}\n\n/** @test {OSC} */\ndescribe('OSC', () => {\n  let osc\n  let plugin\n\n  before(() => {\n    plugin = new TestPlugin()\n    osc = new OSC({\n      discardLateMessages: true,\n      plugin,\n    })\n  })\n\n  it('returns the instance options when created', () => {\n    expect(osc.options.discardLateMessages).to.be.true\n  })\n\n  /** @test {OSC#on} */\n  describe('on', () => {\n    it('calls my subscription when listening to the right address', () => {\n      const spy = chai.spy()\n      osc.on('/test/path', spy)\n\n      plugin.mockMessage()\n\n      expect(spy).to.have.been.called()\n    })\n\n    it('calls an error', () => {\n      const spy = chai.spy()\n      osc.on('error', spy)\n\n      plugin.mockError()\n\n      expect(spy).to.have.been.called()\n    })\n  })\n\n  /** @test {OSC#off} */\n  describe('off', () => {\n    it('removes a subscription', () => {\n      const spy = chai.spy()\n      const id = osc.on('error', spy)\n\n      osc.off('error', id)\n\n      plugin.mockError()\n\n      expect(spy).to.not.have.been.called()\n    })\n  })\n\n  /** @test {OSC#status} */\n  describe('status', () => {\n    it('returns the initial status', () => {\n      expect(osc.status()).to.be.equals(OSC.STATUS.IS_NOT_INITIALIZED)\n    })\n  })\n\n  /** @test {OSC#open} */\n  describe('open', () => {\n    let spy\n\n    beforeEach(() => {\n      spy = chai.spy()\n      osc.on('open', spy)\n      osc.open()\n    })\n\n    it('returns the correct status', () => {\n      expect(osc.status()).to.be.equals(OSC.STATUS.IS_OPEN)\n    })\n\n    it('calls the open event', () => {\n      expect(spy).to.have.been.called()\n    })\n  })\n\n  /** @test {OSC#close} */\n  describe('close', () => {\n    let spy\n\n    beforeEach(() => {\n      spy = chai.spy()\n      osc.on('close', spy)\n      osc.close()\n    })\n\n    it('returns the correct status', () => {\n      expect(osc.status()).to.be.equals(OSC.STATUS.IS_CLOSED)\n    })\n\n    it('calls the close event', () => {\n      expect(spy).to.have.been.called()\n    })\n  })\n\n  /** @test {OSC#send} */\n  describe('send', () => {\n    it('passes over a binary object with configs to the plugin', () => {\n      const message = new Message('/test/path', 122, 554)\n      const packet = new Packet(message)\n      const config = { host: 'localhost', port: 9001 }\n      const spy = chai.spy.on(plugin, 'send')\n      const binary = packet.pack()\n\n      osc.send(packet, config)\n\n      expect(binary).to.be.a('Uint8Array')\n      expect(spy).to.have.been.called.with(binary, config)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/osc.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "describe154",
    "testId": 154,
    "memberof": "test/osc.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/osc.spec.js~describe154",
    "access": null,
    "description": "OSC",
    "lineNumber": 50,
    "testTargets": [
      "OSC"
    ]
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/osc.spec.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/osc.spec.js~describe154.it155",
    "access": null,
    "description": "returns the instance options when created",
    "lineNumber": 62
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "describe156",
    "testId": 156,
    "memberof": "test/osc.spec.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe156",
    "access": null,
    "description": "on",
    "lineNumber": 67,
    "testTargets": [
      "OSC#on"
    ]
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/osc.spec.js~describe154.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe156.it157",
    "access": null,
    "description": "calls my subscription when listening to the right address",
    "lineNumber": 68
  },
  {
    "__docId__": 482,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/osc.spec.js~describe154.describe156",
    "testDepth": 2,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe156.it158",
    "access": null,
    "description": "calls an error",
    "lineNumber": 77
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "describe159",
    "testId": 159,
    "memberof": "test/osc.spec.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe159",
    "access": null,
    "description": "off",
    "lineNumber": 88,
    "testTargets": [
      "OSC#off"
    ]
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "test/osc.spec.js~describe154.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe159.it160",
    "access": null,
    "description": "removes a subscription",
    "lineNumber": 89
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "describe161",
    "testId": 161,
    "memberof": "test/osc.spec.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe161",
    "access": null,
    "description": "status",
    "lineNumber": 102,
    "testTargets": [
      "OSC#status"
    ]
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "test/osc.spec.js~describe154.describe161",
    "testDepth": 2,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe161.it162",
    "access": null,
    "description": "returns the initial status",
    "lineNumber": 103
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "describe163",
    "testId": 163,
    "memberof": "test/osc.spec.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe163",
    "access": null,
    "description": "open",
    "lineNumber": 109,
    "testTargets": [
      "OSC#open"
    ]
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/osc.spec.js~describe154.describe163",
    "testDepth": 2,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe163.it164",
    "access": null,
    "description": "returns the correct status",
    "lineNumber": 118
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/osc.spec.js~describe154.describe163",
    "testDepth": 2,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe163.it165",
    "access": null,
    "description": "calls the open event",
    "lineNumber": 122
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "test/osc.spec.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe166",
    "access": null,
    "description": "close",
    "lineNumber": 128,
    "testTargets": [
      "OSC#close"
    ]
  },
  {
    "__docId__": 491,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/osc.spec.js~describe154.describe166",
    "testDepth": 2,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe166.it167",
    "access": null,
    "description": "returns the correct status",
    "lineNumber": 137
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "it168",
    "testId": 168,
    "memberof": "test/osc.spec.js~describe154.describe166",
    "testDepth": 2,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe166.it168",
    "access": null,
    "description": "calls the close event",
    "lineNumber": 141
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "describe169",
    "testId": 169,
    "memberof": "test/osc.spec.js~describe154",
    "testDepth": 1,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe169",
    "access": null,
    "description": "send",
    "lineNumber": 147,
    "testTargets": [
      "OSC#send"
    ]
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/osc.spec.js~describe154.describe169",
    "testDepth": 2,
    "static": true,
    "longname": "test/osc.spec.js~describe154.describe169.it170",
    "access": null,
    "description": "passes over a binary object with configs to the plugin",
    "lineNumber": 148
  },
  {
    "__docId__": 495,
    "kind": "testFile",
    "name": "test/packet.spec.js",
    "content": "import { expect } from 'chai'\n\nimport Packet from '../src/packet'\nimport Message from '../src/message'\n\n/** @test {Packet} */\ndescribe('Packet', () => {\n  let packet\n\n  /** @test {Packet#pack} */\n  describe('pack', () => {\n    let result\n\n    before(() => {\n      packet = new Packet(new Message('/test/path', 21))\n      result = packet.pack()\n    })\n\n    it('returns an object we can unpack again', () => {\n      const anotherPacket = new Packet()\n      anotherPacket.unpack(new DataView(result.buffer), 0)\n\n      expect(anotherPacket.value.address).to.equal('/test/path')\n      expect(anotherPacket.value.args[0]).to.equal(21)\n    })\n\n    it('returns a multiple of 32', () => {\n      expect((result.byteLength * 8) % 32).to.equal(0)\n    })\n  })\n\n  /** @test {Packet#unpack} */\n  describe('unpack', () => {\n    let result\n\n    before(() => {\n      const data = new Uint8Array([\n        47, 116, 101, 115, 116, 47, 112, 97,\n        116, 104, 0, 0, 44, 105, 0, 0, 0, 0, 2, 141])\n      const dataView = new DataView(data.buffer, 0)\n\n      packet = new Packet()\n      result = packet.unpack(dataView)\n    })\n\n    it('decodes the message correctly', () => {\n      expect(packet.value.address).to.equal('/test/path')\n      expect(packet.value.args[0]).to.equal(653)\n    })\n\n    it('returns the offset of the data', () => {\n      expect(result).to.equal(20)\n    })\n\n    it('returns a number', () => {\n      expect(result).to.be.a('number')\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/packet.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "describe171",
    "testId": 171,
    "memberof": "test/packet.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/packet.spec.js~describe171",
    "access": null,
    "description": "Packet",
    "lineNumber": 7,
    "testTargets": [
      "Packet"
    ]
  },
  {
    "__docId__": 497,
    "kind": "test",
    "name": "describe172",
    "testId": 172,
    "memberof": "test/packet.spec.js~describe171",
    "testDepth": 1,
    "static": true,
    "longname": "test/packet.spec.js~describe171.describe172",
    "access": null,
    "description": "pack",
    "lineNumber": 11,
    "testTargets": [
      "Packet#pack"
    ]
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/packet.spec.js~describe171.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/packet.spec.js~describe171.describe172.it173",
    "access": null,
    "description": "returns an object we can unpack again",
    "lineNumber": 19
  },
  {
    "__docId__": 499,
    "kind": "test",
    "name": "it174",
    "testId": 174,
    "memberof": "test/packet.spec.js~describe171.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/packet.spec.js~describe171.describe172.it174",
    "access": null,
    "description": "returns a multiple of 32",
    "lineNumber": 27
  },
  {
    "__docId__": 500,
    "kind": "test",
    "name": "describe175",
    "testId": 175,
    "memberof": "test/packet.spec.js~describe171",
    "testDepth": 1,
    "static": true,
    "longname": "test/packet.spec.js~describe171.describe175",
    "access": null,
    "description": "unpack",
    "lineNumber": 33,
    "testTargets": [
      "Packet#unpack"
    ]
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/packet.spec.js~describe171.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/packet.spec.js~describe171.describe175.it176",
    "access": null,
    "description": "decodes the message correctly",
    "lineNumber": 46
  },
  {
    "__docId__": 502,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/packet.spec.js~describe171.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/packet.spec.js~describe171.describe175.it177",
    "access": null,
    "description": "returns the offset of the data",
    "lineNumber": 51
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/packet.spec.js~describe171.describe175",
    "testDepth": 2,
    "static": true,
    "longname": "test/packet.spec.js~describe171.describe175.it178",
    "access": null,
    "description": "returns a number",
    "lineNumber": 55
  },
  {
    "__docId__": 504,
    "kind": "testFile",
    "name": "test/plugin/bridge.spec.js",
    "content": "import { expect } from 'chai'\n\nimport OSC from '../../src/osc'\nimport Message from '../../src/message'\n\nimport BridgePlugin from '../../src/plugin/bridge'\nimport DatagramPlugin from '../../src/plugin/dgram'\nimport WebsocketClientPlugin from '../../src/plugin/wsclient'\n\nconst PORT_WEBSOCKET = 9129\nconst PORT_UDP_SERVER = 9130\nconst PORT_UDP_CLIENT = 9131\n\n/** @test {BridgePlugin} */\ndescribe('BridgePlugin', () => {\n  let plugin\n  let osc\n  let oscWsClient\n  let oscUdpClient\n\n  before(() => {\n    plugin = new BridgePlugin({\n      wsServer: {\n        port: PORT_WEBSOCKET,\n      },\n      udpClient: {\n        host: '127.0.0.1',\n        port: PORT_UDP_CLIENT,\n      },\n      udpServer: {\n        host: '127.0.0.1',\n        port: PORT_UDP_SERVER,\n      },\n    })\n\n    osc = new OSC({\n      plugin,\n    })\n\n    oscWsClient = new OSC({\n      plugin: new WebsocketClientPlugin({\n        port: PORT_WEBSOCKET,\n      }),\n    })\n\n    oscUdpClient = new OSC({\n      plugin: new DatagramPlugin({\n        open: {\n          host: '127.0.0.1',\n          port: PORT_UDP_CLIENT,\n        },\n      }),\n    })\n  })\n\n  it('merges the given options correctly', () => {\n    expect(plugin.options.wsServer.port).to.be.equals(PORT_WEBSOCKET)\n    expect(plugin.options.udpServer.host).to.be.equals('127.0.0.1')\n    expect(plugin.options.receiver).to.be.equals('ws')\n  })\n\n  describe('status', () => {\n    it('returns the initial status', () => {\n      expect(plugin.status()).to.be.equals(-1)\n    })\n  })\n\n  describe('remote address info', () => {\n    it('returns the remote address info', (done) => {\n      const expectedMessage = {\n        offset: 24,\n        address: '/test/path',\n        types: ',ii',\n        args: [122, 554],\n      }\n\n      const expectedRinfo = {\n        address: '127.0.0.1',\n        family: 'IPv4',\n        port: PORT_UDP_SERVER,\n        size: 24,\n      }\n\n      oscUdpClient.on('/test/path', (message, rinfo) => {\n        expect(message).to.deep.equal(expectedMessage)\n        expect(rinfo).to.deep.equal(expectedRinfo)\n\n        done()\n      })\n\n      oscWsClient.on('open', () => {\n        oscWsClient.send(new Message('/test/path', 122, 554))\n      })\n\n      oscUdpClient.on('open', () => {\n        oscWsClient.open()\n      })\n\n      osc.on('open', () => {\n        oscUdpClient.open()\n      })\n\n      osc.open()\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/plugin/bridge.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "describe179",
    "testId": 179,
    "memberof": "test/plugin/bridge.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/plugin/bridge.spec.js~describe179",
    "access": null,
    "description": "BridgePlugin",
    "lineNumber": 15,
    "testTargets": [
      "BridgePlugin"
    ]
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/plugin/bridge.spec.js~describe179",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/bridge.spec.js~describe179.it180",
    "access": null,
    "description": "merges the given options correctly",
    "lineNumber": 56
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "describe181",
    "testId": 181,
    "memberof": "test/plugin/bridge.spec.js~describe179",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/bridge.spec.js~describe179.describe181",
    "access": null,
    "description": "status",
    "lineNumber": 62
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/plugin/bridge.spec.js~describe179.describe181",
    "testDepth": 2,
    "static": true,
    "longname": "test/plugin/bridge.spec.js~describe179.describe181.it182",
    "access": null,
    "description": "returns the initial status",
    "lineNumber": 63
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "describe183",
    "testId": 183,
    "memberof": "test/plugin/bridge.spec.js~describe179",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/bridge.spec.js~describe179.describe183",
    "access": null,
    "description": "remote address info",
    "lineNumber": 68
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/plugin/bridge.spec.js~describe179.describe183",
    "testDepth": 2,
    "static": true,
    "longname": "test/plugin/bridge.spec.js~describe179.describe183.it184",
    "access": null,
    "description": "returns the remote address info",
    "lineNumber": 69
  },
  {
    "__docId__": 511,
    "kind": "testFile",
    "name": "test/plugin/dgram.spec.js",
    "content": "import { expect } from 'chai'\n\nimport DatagramPlugin from '../../src/plugin/dgram'\nimport Message from '../../src/message'\nimport OSC from '../../src/osc'\n\nconst PORT_UDP = 8129\n\n/** @test {DatagramPlugin} */\ndescribe('DatagramPlugin', () => {\n  let plugin\n  let osc\n\n  before(() => {\n    plugin = new DatagramPlugin({\n      send: {\n        port: PORT_UDP,\n      },\n      open: {\n        host: '127.0.0.1',\n        port: PORT_UDP,\n      },\n    })\n\n    osc = new OSC({\n      discardLateMessages: true,\n      plugin,\n    })\n  })\n\n  it('merges the given options correctly', () => {\n    expect(plugin.options.send.port).to.be.equals(PORT_UDP)\n    expect(plugin.options.open.host).to.be.equals('127.0.0.1')\n  })\n\n  describe('status', () => {\n    it('returns the initial status', () => {\n      expect(plugin.status()).to.be.equals(-1)\n    })\n  })\n\n  describe('remote address info', () => {\n    it('returns the remote address info', (done) => {\n      const expectedMessage = {\n        offset: 24,\n        address: '/test/path',\n        types: ',ii',\n        args: [122, 554],\n      }\n\n      const expectedRinfo = {\n        address: '127.0.0.1',\n        family: 'IPv4',\n        port: PORT_UDP,\n        size: 24,\n      }\n\n      osc.open()\n\n      osc.on('/test/path', (message, rinfo) => {\n        expect(message).to.deep.equal(expectedMessage)\n        expect(rinfo).to.deep.equal(expectedRinfo)\n\n        done()\n      })\n\n      osc.send(new Message('/test/path', 122, 554))\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/plugin/dgram.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "describe185",
    "testId": 185,
    "memberof": "test/plugin/dgram.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/plugin/dgram.spec.js~describe185",
    "access": null,
    "description": "DatagramPlugin",
    "lineNumber": 10,
    "testTargets": [
      "DatagramPlugin"
    ]
  },
  {
    "__docId__": 513,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/plugin/dgram.spec.js~describe185",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/dgram.spec.js~describe185.it186",
    "access": null,
    "description": "merges the given options correctly",
    "lineNumber": 31
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "describe187",
    "testId": 187,
    "memberof": "test/plugin/dgram.spec.js~describe185",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/dgram.spec.js~describe185.describe187",
    "access": null,
    "description": "status",
    "lineNumber": 36
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/plugin/dgram.spec.js~describe185.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/plugin/dgram.spec.js~describe185.describe187.it188",
    "access": null,
    "description": "returns the initial status",
    "lineNumber": 37
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "describe189",
    "testId": 189,
    "memberof": "test/plugin/dgram.spec.js~describe185",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/dgram.spec.js~describe185.describe189",
    "access": null,
    "description": "remote address info",
    "lineNumber": 42
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/plugin/dgram.spec.js~describe185.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/plugin/dgram.spec.js~describe185.describe189.it190",
    "access": null,
    "description": "returns the remote address info",
    "lineNumber": 43
  },
  {
    "__docId__": 518,
    "kind": "testFile",
    "name": "test/plugin/ws.spec.js",
    "content": "import { expect } from 'chai'\n\nimport OSC from '../../src/osc'\nimport Message from '../../src/message'\n\nimport WebsocketClientPlugin from '../../src/plugin/wsclient'\nimport WebsocketServerPlugin from '../../src/plugin/wsserver'\n\nconst PORT_WEBSOCKET = 8129\n\n/** @test {WebsocketClientPlugin} */\ndescribe('WebsocketClient/ServerPlugin', () => {\n  let plugin\n  let osc\n  let oscServer\n\n  before(() => {\n    plugin = new WebsocketClientPlugin({\n      port: PORT_WEBSOCKET,\n      host: '127.0.0.1',\n    })\n\n    osc = new OSC({\n      discardLateMessages: true,\n      plugin,\n    })\n\n    oscServer = new OSC({\n      discardLateMessages: true,\n      plugin: new WebsocketServerPlugin({\n        port: PORT_WEBSOCKET,\n        host: '127.0.0.1',\n      }),\n    })\n  })\n\n  describe('remote address info', () => {\n    it('returns the remote address info', (done) => {\n      const expectedMessage = {\n        offset: 24,\n        address: '/test/path',\n        types: ',ii',\n        args: [122, 554],\n      }\n\n      const expectedRinfo = {\n        address: '127.0.0.1',\n        family: 'wsserver',\n        port: PORT_WEBSOCKET,\n        size: 0,\n      }\n\n      oscServer.on('/test/path', (message, rinfo) => {\n        expect(message).to.deep.equal(expectedMessage)\n        expect(rinfo).to.deep.equal(expectedRinfo)\n\n        done()\n      })\n\n      osc.on('open', () => osc.send(new Message('/test/path', 122, 554)))\n\n      oscServer.open()\n      osc.open()\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/plugin/ws.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "describe191",
    "testId": 191,
    "memberof": "test/plugin/ws.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/plugin/ws.spec.js~describe191",
    "access": null,
    "description": "WebsocketClient/ServerPlugin",
    "lineNumber": 12,
    "testTargets": [
      "WebsocketClientPlugin"
    ]
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/plugin/ws.spec.js~describe191",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/ws.spec.js~describe191.describe192",
    "access": null,
    "description": "remote address info",
    "lineNumber": 37
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/plugin/ws.spec.js~describe191.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/plugin/ws.spec.js~describe191.describe192.it193",
    "access": null,
    "description": "returns the remote address info",
    "lineNumber": 38
  },
  {
    "__docId__": 522,
    "kind": "testFile",
    "name": "test/plugin/wsclient.spec.js",
    "content": "import { expect } from 'chai'\n\nimport WebsocketClientPlugin from '../../src/plugin/wsclient'\n\n/** @test {WebsocketClientPlugin} */\ndescribe('WebsocketClientPlugin', () => {\n  let plugin\n\n  before(() => {\n    plugin = new WebsocketClientPlugin({\n      port: 8129,\n      host: '127.0.0.1',\n    })\n  })\n\n  it('merges the given options correctly', () => {\n    expect(plugin.options.port).to.be.equals(8129)\n    expect(plugin.options.host).to.be.equals('127.0.0.1')\n    expect(plugin.options.secure).to.be.equals(false)\n  })\n\n  describe('status', () => {\n    it('returns the initial status', () => {\n      expect(plugin.status()).to.be.equals(-1)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/plugin/wsclient.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "describe194",
    "testId": 194,
    "memberof": "test/plugin/wsclient.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/plugin/wsclient.spec.js~describe194",
    "access": null,
    "description": "WebsocketClientPlugin",
    "lineNumber": 6,
    "testTargets": [
      "WebsocketClientPlugin"
    ]
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/plugin/wsclient.spec.js~describe194",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/wsclient.spec.js~describe194.it195",
    "access": null,
    "description": "merges the given options correctly",
    "lineNumber": 16
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "describe196",
    "testId": 196,
    "memberof": "test/plugin/wsclient.spec.js~describe194",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/wsclient.spec.js~describe194.describe196",
    "access": null,
    "description": "status",
    "lineNumber": 22
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/plugin/wsclient.spec.js~describe194.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/plugin/wsclient.spec.js~describe194.describe196.it197",
    "access": null,
    "description": "returns the initial status",
    "lineNumber": 23
  },
  {
    "__docId__": 527,
    "kind": "testFile",
    "name": "test/plugin/wsserver.spec.js",
    "content": "import { expect } from 'chai'\n\nimport WebsocketServerPlugin from '../../src/plugin/wsserver'\n\n/** @test {WebsocketServerPlugin} */\ndescribe('WebsocketServerPlugin', () => {\n  let plugin\n\n  before(() => {\n    plugin = new WebsocketServerPlugin({\n      udpServer: {\n        port: 8129,\n      },\n      wsServer: {\n        host: '127.0.0.1',\n      },\n    })\n  })\n\n  it('merges the given options correctly', () => {\n    expect(plugin.options.udpServer.port).to.be.equals(8129)\n    expect(plugin.options.wsServer.host).to.be.equals('127.0.0.1')\n  })\n\n  describe('status', () => {\n    it('returns the initial status', () => {\n      expect(plugin.status()).to.be.equals(-1)\n    })\n  })\n})\n",
    "static": true,
    "longname": "/home/runner/work/osc-js/osc-js/test/plugin/wsserver.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 528,
    "kind": "test",
    "name": "describe198",
    "testId": 198,
    "memberof": "test/plugin/wsserver.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/plugin/wsserver.spec.js~describe198",
    "access": null,
    "description": "WebsocketServerPlugin",
    "lineNumber": 6,
    "testTargets": [
      "WebsocketServerPlugin"
    ]
  },
  {
    "__docId__": 529,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/plugin/wsserver.spec.js~describe198",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/wsserver.spec.js~describe198.it199",
    "access": null,
    "description": "merges the given options correctly",
    "lineNumber": 20
  },
  {
    "__docId__": 530,
    "kind": "test",
    "name": "describe200",
    "testId": 200,
    "memberof": "test/plugin/wsserver.spec.js~describe198",
    "testDepth": 1,
    "static": true,
    "longname": "test/plugin/wsserver.spec.js~describe198.describe200",
    "access": null,
    "description": "status",
    "lineNumber": 25
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/plugin/wsserver.spec.js~describe198.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/plugin/wsserver.spec.js~describe198.describe200.it201",
    "access": null,
    "description": "returns the initial status",
    "lineNumber": 26
  }
]